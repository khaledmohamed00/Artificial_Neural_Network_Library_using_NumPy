
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003b8  00800060  000009f6  00000a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002268  00000000  00000000  00000e24  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fe0  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004080  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	14 e0       	ldi	r17, 0x04	; 4
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 31       	cpi	r26, 0x18	; 24
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 39 02 	call	0x472	; 0x472 <main>
  7a:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <uart_init>:
#include "UART_int.h"



void uart_init(void){
DDRD|=(1<<DDD1);
  82:	89 9a       	sbi	0x11, 1	; 17
DDRD&=~(1<<DDD0);
  84:	88 98       	cbi	0x11, 0	; 17
UBRRL = 0x33;//set baudrate 9600
  86:	83 e3       	ldi	r24, 0x33	; 51
  88:	89 b9       	out	0x09, r24	; 9
UBRRH = 0;
  8a:	10 bc       	out	0x20, r1	; 32
UCSRC=(1<<UCSZ0)|(1<<UCSZ1)|(1<<URSEL);  // Set Frame Format -> 8 data, 1 stop, No Parity
  8c:	86 e8       	ldi	r24, 0x86	; 134
  8e:	80 bd       	out	0x20, r24	; 32
UCSRB=(1<<RXEN)|(1<<TXEN);// Enable RX and TX
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	8a b9       	out	0x0a, r24	; 10
  94:	08 95       	ret

00000096 <uart_send_char>:


}

void uart_send_char(u8 c){
while(!(UCSRA & (1<<UDRE)));
  96:	5d 9b       	sbis	0x0b, 5	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <uart_send_char>

      UDR=c;
  9a:	8c b9       	out	0x0c, r24	; 12
  9c:	08 95       	ret

0000009e <uart_receive_char>:

}

u8 uart_receive_char(void){
while(!(UCSRA & (1<<RXC)));
  9e:	5f 9b       	sbis	0x0b, 7	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <uart_receive_char>
return UDR;
  a2:	8c b1       	in	r24, 0x0c	; 12
}
  a4:	08 95       	ret

000000a6 <power>:
#include "UART_int.h"




u32 power(u16 base,u16 power){
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	6c 01       	movw	r12, r24
  b4:	eb 01       	movw	r28, r22
u32 num=1;
if(power==0u)
  b6:	20 97       	sbiw	r28, 0x00	; 0
  b8:	c1 f0       	breq	.+48     	; 0xea <power+0x44>
  ba:	e1 e0       	ldi	r30, 0x01	; 1
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
return 1;
else{
u16 i;	
for(i=1;i<=power;i++){
num=num*base;
  c6:	e1 2c       	mov	r14, r1
  c8:	f1 2c       	mov	r15, r1
u32 num=1;
if(power==0u)
return 1;
else{
u16 i;	
for(i=1;i<=power;i++){
  ca:	ce 17       	cp	r28, r30
  cc:	df 07       	cpc	r29, r31
  ce:	50 f0       	brcs	.+20     	; 0xe4 <power+0x3e>
num=num*base;
  d0:	37 2f       	mov	r19, r23
  d2:	59 2f       	mov	r21, r25
  d4:	c7 01       	movw	r24, r14
  d6:	b6 01       	movw	r22, r12
  d8:	0e 94 b3 04 	call	0x966	; 0x966 <__mulsi3>
  dc:	26 2f       	mov	r18, r22
  de:	48 2f       	mov	r20, r24
u32 num=1;
if(power==0u)
return 1;
else{
u16 i;	
for(i=1;i<=power;i++){
  e0:	31 96       	adiw	r30, 0x01	; 1
  e2:	f3 cf       	rjmp	.-26     	; 0xca <power+0x24>
num=num*base;
}

return num;
  e4:	62 2f       	mov	r22, r18
  e6:	84 2f       	mov	r24, r20
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <power+0x4c>


u32 power(u16 base,u16 power){
u32 num=1;
if(power==0u)
return 1;
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
}

return num;
}

}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	ff 90       	pop	r15
  f8:	ef 90       	pop	r14
  fa:	df 90       	pop	r13
  fc:	cf 90       	pop	r12
  fe:	08 95       	ret

00000100 <int_to_array_of_char>:


void int_to_array_of_char(u16 number,u8 * array_of_char){
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	fc 01       	movw	r30, r24
 10a:	eb 01       	movw	r28, r22

u16 digits=0;
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
u16 temp=number;
while(temp!=0){
digits++;
temp=temp/10;
 110:	0a e0       	ldi	r16, 0x0A	; 10
 112:	10 e0       	ldi	r17, 0x00	; 0

void int_to_array_of_char(u16 number,u8 * array_of_char){

u16 digits=0;
u16 temp=number;
while(temp!=0){
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	39 f0       	breq	.+14     	; 0x126 <int_to_array_of_char+0x26>
digits++;
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
temp=temp/10;
 11c:	b8 01       	movw	r22, r16
 11e:	0e 94 c3 04 	call	0x986	; 0x986 <__udivmodhi4>
 122:	cb 01       	movw	r24, r22
 124:	f7 cf       	rjmp	.-18     	; 0x114 <int_to_array_of_char+0x14>
 126:	2c 0f       	add	r18, r28
 128:	3d 1f       	adc	r19, r29
 12a:	e9 01       	movw	r28, r18
}
temp=digits;
while(number!=0 ){
u16 digit=number%10;
 12c:	0a e0       	ldi	r16, 0x0A	; 10
 12e:	10 e0       	ldi	r17, 0x00	; 0
while(temp!=0){
digits++;
temp=temp/10;
}
temp=digits;
while(number!=0 ){
 130:	30 97       	sbiw	r30, 0x00	; 0
 132:	41 f0       	breq	.+16     	; 0x144 <int_to_array_of_char+0x44>
u16 digit=number%10;
number=number/10;
 134:	cf 01       	movw	r24, r30
 136:	b8 01       	movw	r22, r16
 138:	0e 94 c3 04 	call	0x986	; 0x986 <__udivmodhi4>
 13c:	fb 01       	movw	r30, r22
array_of_char[temp-1]=digit+'0';
 13e:	80 5d       	subi	r24, 0xD0	; 208
 140:	8a 93       	st	-Y, r24
 142:	f6 cf       	rjmp	.-20     	; 0x130 <int_to_array_of_char+0x30>
temp--;
}
array_of_char[digits]='\0';
 144:	f9 01       	movw	r30, r18
 146:	10 82       	st	Z, r1

}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <u32_array_of_char_to_int>:



u32 u32_array_of_char_to_int(u8 * array){
 152:	8f 92       	push	r8
 154:	9f 92       	push	r9
 156:	af 92       	push	r10
 158:	bf 92       	push	r11
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	7c 01       	movw	r14, r24

u8 index=0;
u32 number=0;
u8 digits=0;
 166:	90 e0       	ldi	r25, 0x00	; 0
while(array[digits]!='\0'){
 168:	f7 01       	movw	r30, r14
 16a:	e9 0f       	add	r30, r25
 16c:	f1 1d       	adc	r31, r1
 16e:	80 81       	ld	r24, Z
 170:	88 23       	and	r24, r24
 172:	11 f0       	breq	.+4      	; 0x178 <u32_array_of_char_to_int+0x26>
digits++;
 174:	9f 5f       	subi	r25, 0xFF	; 255
 176:	f8 cf       	rjmp	.-16     	; 0x168 <u32_array_of_char_to_int+0x16>
}
digits--;
 178:	1f ef       	ldi	r17, 0xFF	; 255
 17a:	19 0f       	add	r17, r25
 17c:	d1 2f       	mov	r29, r17


u32 u32_array_of_char_to_int(u8 * array){

u8 index=0;
u32 number=0;
 17e:	81 2c       	mov	r8, r1
 180:	91 2c       	mov	r9, r1
 182:	54 01       	movw	r10, r8
 184:	81 2f       	mov	r24, r17
 186:	8d 1b       	sub	r24, r29
u8 digits=0;
while(array[digits]!='\0'){
digits++;
}
digits--;
while(array[index]!='\0'){
 188:	f7 01       	movw	r30, r14
 18a:	e8 0f       	add	r30, r24
 18c:	f1 1d       	adc	r31, r1
 18e:	c0 81       	ld	r28, Z
 190:	cc 23       	and	r28, r28
 192:	99 f0       	breq	.+38     	; 0x1ba <u32_array_of_char_to_int+0x68>


number=number+((array[index]-'0')*(u32)power(10,digits));
 194:	6d 2f       	mov	r22, r29
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	8a e0       	ldi	r24, 0x0A	; 10
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 53 00 	call	0xa6	; 0xa6 <power>
 1a0:	9b 01       	movw	r18, r22
 1a2:	ac 01       	movw	r20, r24
 1a4:	ac 2f       	mov	r26, r28
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	d0 97       	sbiw	r26, 0x30	; 48
 1aa:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__mulshisi3>
 1ae:	86 0e       	add	r8, r22
 1b0:	97 1e       	adc	r9, r23
 1b2:	a8 1e       	adc	r10, r24
 1b4:	b9 1e       	adc	r11, r25
index++;
digits--;
 1b6:	d1 50       	subi	r29, 0x01	; 1
 1b8:	e5 cf       	rjmp	.-54     	; 0x184 <u32_array_of_char_to_int+0x32>
}

return number;

}
 1ba:	c5 01       	movw	r24, r10
 1bc:	b4 01       	movw	r22, r8
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	bf 90       	pop	r11
 1ca:	af 90       	pop	r10
 1cc:	9f 90       	pop	r9
 1ce:	8f 90       	pop	r8
 1d0:	08 95       	ret

000001d2 <USART_SendString>:


void USART_SendString(char * string){
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24

int index=0;
while(string[index] !='\0')
 1d8:	89 91       	ld	r24, Y+
 1da:	88 23       	and	r24, r24
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <USART_SendString+0x12>
{uart_send_char(string[index]);
 1de:	0e 94 4b 00 	call	0x96	; 0x96 <uart_send_char>
 1e2:	fa cf       	rjmp	.-12     	; 0x1d8 <USART_SendString+0x6>
index++;
}

}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <read_string_uart>:



void read_string_uart(u8 * recived_data_buffer )
{
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	8c 01       	movw	r16, r24
     u8 data=uart_receive_char();
 1f6:	0e 94 4f 00 	call	0x9e	; 0x9e <uart_receive_char>
 1fa:	c8 2f       	mov	r28, r24
     uart_send_char(data);
 1fc:	0e 94 4b 00 	call	0x96	; 0x96 <uart_send_char>
     u16 index=0;
     while(data !=13){
 200:	78 01       	movw	r14, r16
 202:	97 01       	movw	r18, r14
 204:	20 1b       	sub	r18, r16
 206:	31 0b       	sbc	r19, r17
 208:	cd 30       	cpi	r28, 0x0D	; 13
 20a:	49 f0       	breq	.+18     	; 0x21e <read_string_uart+0x34>
     recived_data_buffer[index++]=data;
 20c:	f7 01       	movw	r30, r14
 20e:	c1 93       	st	Z+, r28
 210:	7f 01       	movw	r14, r30
     data=uart_receive_char();
 212:	0e 94 4f 00 	call	0x9e	; 0x9e <uart_receive_char>
 216:	c8 2f       	mov	r28, r24
     uart_send_char(data);
 218:	0e 94 4b 00 	call	0x96	; 0x96 <uart_send_char>
 21c:	f2 cf       	rjmp	.-28     	; 0x202 <read_string_uart+0x18>

     }
     recived_data_buffer[index]='\0';
 21e:	f8 01       	movw	r30, r16
 220:	e2 0f       	add	r30, r18
 222:	f3 1f       	adc	r31, r19
 224:	10 82       	st	Z, r1
     USART_SendString("\r\n");
 226:	87 e7       	ldi	r24, 0x77	; 119
 228:	90 e0       	ldi	r25, 0x00	; 0

}
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
     data=uart_receive_char();
     uart_send_char(data);

     }
     recived_data_buffer[index]='\0';
     USART_SendString("\r\n");
 234:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <USART_SendString>

00000238 <printf_int_uart>:




void printf_int_uart(u32 number,u8* recived_data_buffer)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	dc 01       	movw	r26, r24
 23e:	cb 01       	movw	r24, r22
 240:	ea 01       	movw	r28, r20

int_to_array_of_char(number,recived_data_buffer);
 242:	ba 01       	movw	r22, r20
 244:	0e 94 80 00 	call	0x100	; 0x100 <int_to_array_of_char>
USART_SendString(recived_data_buffer);
 248:	ce 01       	movw	r24, r28

}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28

void printf_int_uart(u32 number,u8* recived_data_buffer)
{

int_to_array_of_char(number,recived_data_buffer);
USART_SendString(recived_data_buffer);
 24e:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <USART_SendString>

00000252 <scanf_int_uart>:
}



void scanf_int_uart(u32 *number,u8* recived_data_buffer)
{
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	8c 01       	movw	r16, r24
 25c:	eb 01       	movw	r28, r22
  read_string_uart( recived_data_buffer );
 25e:	cb 01       	movw	r24, r22
 260:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_string_uart>
  *number=u32_array_of_char_to_int(recived_data_buffer);
 264:	ce 01       	movw	r24, r28
 266:	0e 94 a9 00 	call	0x152	; 0x152 <u32_array_of_char_to_int>
 26a:	f8 01       	movw	r30, r16
 26c:	60 83       	st	Z, r22
 26e:	71 83       	std	Z+1, r23	; 0x01
 270:	82 83       	std	Z+2, r24	; 0x02
 272:	93 83       	std	Z+3, r25	; 0x03

}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <EEPROM_Init>:
#include "UART_IO_int.h"
#include"eeprom.h"
#include "IIC_private.h"
void EEPROM_Init(void)
{
  I2C_Init();
 27e:	0c 94 0d 02 	jmp	0x41a	; 0x41a <I2C_Init>

00000282 <EEPROM_WriteByte>:
}

u8 EEPROM_WriteByte(u16 addr, u8 data,u8 stop)
{
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ec 01       	movw	r28, r24
 28c:	06 2f       	mov	r16, r22
 28e:	14 2f       	mov	r17, r20
  u8 state = 0;
  u8 _3MSBAddr = 0;

  // Start TWI
  TWIStart();
 290:	0e 94 18 02 	call	0x430	; 0x430 <TWIStart>
  // Get State
  state = TWIGetStatus();
 294:	0e 94 36 02 	call	0x46c	; 0x46c <TWIGetStatus>
  // Check if TWI Start
  if (state != TW_START)
 298:	88 30       	cpi	r24, 0x08	; 8
 29a:	19 f0       	breq	.+6      	; 0x2a2 <EEPROM_WriteByte+0x20>
  {USART_SendString("TW_START_Erro");
 29c:	89 ea       	ldi	r24, 0xA9	; 169
 29e:	93 e0       	ldi	r25, 0x03	; 3
 2a0:	1c c0       	rjmp	.+56     	; 0x2da <EEPROM_WriteByte+0x58>
    USART_SendString("\r\n");
      //PORTA |= 0x01;
    return 0;
  }
  
  _3MSBAddr = ((u8) ((addr & 0x0700) >> 7));
 2a2:	9e 01       	movw	r18, r28
 2a4:	22 27       	eor	r18, r18
 2a6:	37 70       	andi	r19, 0x07	; 7
 2a8:	c9 01       	movw	r24, r18
 2aa:	88 0f       	add	r24, r24
 2ac:	89 2f       	mov	r24, r25
 2ae:	88 1f       	adc	r24, r24
 2b0:	99 0b       	sbc	r25, r25
 2b2:	91 95       	neg	r25
   TWIWrite(0xA0|_3MSBAddr);
 2b4:	80 6a       	ori	r24, 0xA0	; 160
 2b6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
  //TWIWrite(0xA0);
  // Get Status
  state = TWIGetStatus();
 2ba:	0e 94 36 02 	call	0x46c	; 0x46c <TWIGetStatus>
  // Check if it is TW_MT_SLA_ACK
  if (state != TW_MT_SLA_ACK)
 2be:	88 31       	cpi	r24, 0x18	; 24
 2c0:	19 f0       	breq	.+6      	; 0x2c8 <EEPROM_WriteByte+0x46>
  {
    USART_SendString("TW_MT_SLA_ACK_Erro");
 2c2:	87 eb       	ldi	r24, 0xB7	; 183
 2c4:	93 e0       	ldi	r25, 0x03	; 3
 2c6:	09 c0       	rjmp	.+18     	; 0x2da <EEPROM_WriteByte+0x58>
    //PORTA |= 0x02;
    return 0;
  }

  // Write the Rest of Location Address(8 Bits)
  TWIWrite((u8) addr);
 2c8:	8c 2f       	mov	r24, r28
 2ca:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>

  // Get State
  state = TWIGetStatus();
 2ce:	0e 94 36 02 	call	0x46c	; 0x46c <TWIGetStatus>

  // check if it is TW_MT_DATA_ACK
  if (state != TW_MT_DATA_ACK)
 2d2:	88 32       	cpi	r24, 0x28	; 40
 2d4:	51 f0       	breq	.+20     	; 0x2ea <EEPROM_WriteByte+0x68>
  {
    USART_SendString("TW_MT_DATA_ACK_Erro");
 2d6:	8a ec       	ldi	r24, 0xCA	; 202
 2d8:	93 e0       	ldi	r25, 0x03	; 3
 2da:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    USART_SendString("\r\n");
 2de:	87 e7       	ldi	r24, 0x77	; 119
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
   
   //PORTA |= 0x04;
    return 0;
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0c c0       	rjmp	.+24     	; 0x302 <EEPROM_WriteByte+0x80>
  }

  // Send Data
  TWIWrite(data);
 2ea:	80 2f       	mov	r24, r16
 2ec:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>

  // Get Status
  state = TWIGetStatus();
 2f0:	0e 94 36 02 	call	0x46c	; 0x46c <TWIGetStatus>

  // Check if it is TW_MT_DATA_ACK
  if (state != TW_MT_DATA_ACK)
 2f4:	88 32       	cpi	r24, 0x28	; 40
 2f6:	79 f7       	brne	.-34     	; 0x2d6 <EEPROM_WriteByte+0x54>
      // PORTA |= 0x02;
    return 0;
  }

  // TWI Stop
  if(stop==1)
 2f8:	11 30       	cpi	r17, 0x01	; 1
 2fa:	11 f4       	brne	.+4      	; 0x300 <EEPROM_WriteByte+0x7e>
  {TWIStop();
 2fc:	0e 94 1e 02 	call	0x43c	; 0x43c <TWIStop>
  }
  // Return Done
  return 1;
 300:	81 e0       	ldi	r24, 0x01	; 1
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	08 95       	ret

0000030c <EEPROM_ReadByte>:

u8 EEPROM_ReadByte(u16 addr, u8 *data,u8 stop)
{
 30c:	cf 92       	push	r12
 30e:	df 92       	push	r13
 310:	ff 92       	push	r15
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	8c 01       	movw	r16, r24
 31c:	6b 01       	movw	r12, r22
 31e:	f4 2e       	mov	r15, r20
  u8 state = 0;
  u8 _3MSBAddr = 0;

  // Start TWI
  TWIStart();
 320:	0e 94 18 02 	call	0x430	; 0x430 <TWIStart>

  // Get State
  state = TWIGetStatus();
 324:	0e 94 36 02 	call	0x46c	; 0x46c <TWIGetStatus>

  // Check if TWI Start
  if (state != TW_START)
 328:	88 30       	cpi	r24, 0x08	; 8
 32a:	51 f0       	breq	.+20     	; 0x340 <EEPROM_ReadByte+0x34>
    {USART_SendString("TW_START_Erro");
 32c:	89 ea       	ldi	r24, 0xA9	; 169
 32e:	93 e0       	ldi	r25, 0x03	; 3
 330:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    USART_SendString("\r\n");
 334:	87 e7       	ldi	r24, 0x77	; 119
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    return 0;
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	65 c0       	rjmp	.+202    	; 0x40a <EEPROM_ReadByte+0xfe>
    }

  
  _3MSBAddr = ((u8) ((addr & 0x0700) >> 7));
 340:	e8 01       	movw	r28, r16
 342:	cc 27       	eor	r28, r28
 344:	d7 70       	andi	r29, 0x07	; 7
 346:	cc 0f       	add	r28, r28
 348:	cd 2f       	mov	r28, r29
 34a:	cc 1f       	adc	r28, r28
 34c:	dd 0b       	sbc	r29, r29
 34e:	d1 95       	neg	r29
   TWIWrite(0xA0|_3MSBAddr);
 350:	8c 2f       	mov	r24, r28
 352:	80 6a       	ori	r24, 0xA0	; 160
 354:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
  //TWIWrite(0xA0);

  // Get Status
  state = TWIGetStatus();
 358:	0e 94 36 02 	call	0x46c	; 0x46c <TWIGetStatus>

  // Check if it is TW_MT_SLA_ACK
  if (state != TW_MT_SLA_ACK)
 35c:	88 31       	cpi	r24, 0x18	; 24
 35e:	51 f0       	breq	.+20     	; 0x374 <EEPROM_ReadByte+0x68>
    {USART_SendString("TW_MT_SLA_ACK_Erro");
 360:	87 eb       	ldi	r24, 0xB7	; 183
 362:	93 e0       	ldi	r25, 0x03	; 3
 364:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    USART_SendString("\r\n");
 368:	87 e7       	ldi	r24, 0x77	; 119
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>

      return 2;
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	4b c0       	rjmp	.+150    	; 0x40a <EEPROM_ReadByte+0xfe>
     
     }
  // Write the Rest of Location Address(8 Bits)
  TWIWrite((u8) addr);
 374:	80 2f       	mov	r24, r16
 376:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>

  // Get State
  state = TWIGetStatus();
 37a:	0e 94 36 02 	call	0x46c	; 0x46c <TWIGetStatus>

  // check if it is TW_MT_DATA_ACK
  if (state != TW_MT_DATA_ACK)
 37e:	88 32       	cpi	r24, 0x28	; 40
 380:	51 f0       	breq	.+20     	; 0x396 <EEPROM_ReadByte+0x8a>
    {USART_SendString("TW_MT_DATA_ACK_Erro");
 382:	8a ec       	ldi	r24, 0xCA	; 202
 384:	93 e0       	ldi	r25, 0x03	; 3
 386:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    USART_SendString("\r\n");
 38a:	87 e7       	ldi	r24, 0x77	; 119
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      return 3;
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	3a c0       	rjmp	.+116    	; 0x40a <EEPROM_ReadByte+0xfe>
    }
  // Now The Master Will Be Master Reciever

  // Now we need to Send Start Bit Again
  // Start TWI
  TWIStart();
 396:	0e 94 18 02 	call	0x430	; 0x430 <TWIStart>

  // Get State
  state = TWIGetStatus();
 39a:	0e 94 36 02 	call	0x46c	; 0x46c <TWIGetStatus>

  // Check if TW_REP_START
  if (state != TW_REP_START)
 39e:	80 31       	cpi	r24, 0x10	; 16
 3a0:	51 f0       	breq	.+20     	; 0x3b6 <EEPROM_ReadByte+0xaa>
    {USART_SendString("TW_REP_START_Erro");
 3a2:	8e ed       	ldi	r24, 0xDE	; 222
 3a4:	93 e0       	ldi	r25, 0x03	; 3
 3a6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
     USART_SendString("\r\n");
 3aa:	87 e7       	ldi	r24, 0x77	; 119
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>

      return 4;
 3b2:	84 e0       	ldi	r24, 0x04	; 4
 3b4:	2a c0       	rjmp	.+84     	; 0x40a <EEPROM_ReadByte+0xfe>
    }
  
  _3MSBAddr = ((u8) ((addr & 0x0700) >> 7));
   TWIWrite(0xA0|_3MSBAddr|1);
 3b6:	8c 2f       	mov	r24, r28
 3b8:	81 6a       	ori	r24, 0xA1	; 161
 3ba:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
//  TWIWrite(0xA0 | 1);
  // Get Status
  state = TWIGetStatus();
 3be:	0e 94 36 02 	call	0x46c	; 0x46c <TWIGetStatus>

  // Check if it is TW_MR_SLA_ACK
  if (state != TW_MR_SLA_ACK)
 3c2:	80 34       	cpi	r24, 0x40	; 64
 3c4:	51 f0       	breq	.+20     	; 0x3da <EEPROM_ReadByte+0xce>
    {USART_SendString("TW_MR_SLA_ACK_Erro");
 3c6:	80 ef       	ldi	r24, 0xF0	; 240
 3c8:	93 e0       	ldi	r25, 0x03	; 3
 3ca:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
     USART_SendString("\r\n");
 3ce:	87 e7       	ldi	r24, 0x77	; 119
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>

      return 5;
 3d6:	85 e0       	ldi	r24, 0x05	; 5
 3d8:	18 c0       	rjmp	.+48     	; 0x40a <EEPROM_ReadByte+0xfe>
    }
  // Read Data
  // *data = TWIReadNACK();
  *data = TWIReadACK();
 3da:	0e 94 28 02 	call	0x450	; 0x450 <TWIReadACK>
 3de:	f6 01       	movw	r30, r12
 3e0:	80 83       	st	Z, r24

  // Get Status
  state = TWIGetStatus();
 3e2:	0e 94 36 02 	call	0x46c	; 0x46c <TWIGetStatus>

  // Check if it is
  if (state != TW_MR_DATA_ACK)
 3e6:	80 35       	cpi	r24, 0x50	; 80
 3e8:	51 f0       	breq	.+20     	; 0x3fe <EEPROM_ReadByte+0xf2>
  {
    USART_SendString("TW_MR_DATA_ACK_Erro");
 3ea:	83 e0       	ldi	r24, 0x03	; 3
 3ec:	94 e0       	ldi	r25, 0x04	; 4
 3ee:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
     USART_SendString("\r\n");
 3f2:	87 e7       	ldi	r24, 0x77	; 119
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    return 6;
 3fa:	86 e0       	ldi	r24, 0x06	; 6
 3fc:	06 c0       	rjmp	.+12     	; 0x40a <EEPROM_ReadByte+0xfe>
  }
  // TWI Stop
 if(stop==1)
 3fe:	f1 e0       	ldi	r31, 0x01	; 1
 400:	ff 12       	cpse	r15, r31
 402:	02 c0       	rjmp	.+4      	; 0x408 <EEPROM_ReadByte+0xfc>
  {TWIStop();
 404:	0e 94 1e 02 	call	0x43c	; 0x43c <TWIStop>
  }

  // Return Done
  return 1;
 408:	81 e0       	ldi	r24, 0x01	; 1
}
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	ff 90       	pop	r15
 414:	df 90       	pop	r13
 416:	cf 90       	pop	r12
 418:	08 95       	ret

0000041a <I2C_Init>:

void I2C_Init(void)
{
  
  // Bit Rate: 400.000 kHz
  TWBR = 72;
 41a:	88 e4       	ldi	r24, 0x48	; 72
 41c:	80 b9       	out	0x00, r24	; 0
  
  TWAR = 0x02;
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	82 b9       	out	0x02, r24	; 2
  
  TWCR = 0x44;
 422:	84 e4       	ldi	r24, 0x44	; 68
 424:	86 bf       	out	0x36, r24	; 54
  TWSR = 0x00;
 426:	11 b8       	out	0x01, r1	; 1
  TWSR &= (~((1 << TWPS1) | (1 << TWPS0)));
 428:	81 b1       	in	r24, 0x01	; 1
 42a:	8c 7f       	andi	r24, 0xFC	; 252
 42c:	81 b9       	out	0x01, r24	; 1
 42e:	08 95       	ret

00000430 <TWIStart>:
}

void TWIStart(void)
{
  // Send Start Condition
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 430:	84 ea       	ldi	r24, 0xA4	; 164
 432:	86 bf       	out	0x36, r24	; 54

  // Wait for TWINT flag set in TWCR Register
  while (!(TWCR & (1 << TWINT)))
 434:	06 b6       	in	r0, 0x36	; 54
 436:	07 fe       	sbrs	r0, 7
 438:	fd cf       	rjmp	.-6      	; 0x434 <TWIStart+0x4>
    ;
}
 43a:	08 95       	ret

0000043c <TWIStop>:

void TWIStop(void)
{
  // Send Stop Condition
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 43c:	84 e9       	ldi	r24, 0x94	; 148
 43e:	86 bf       	out	0x36, r24	; 54
 440:	08 95       	ret

00000442 <TWIWrite>:
}

void TWIWrite(u8 data)
{
  // Put data On TWI Register
  TWDR = data;
 442:	83 b9       	out	0x03, r24	; 3
  // Send Data
  TWCR = (1 << TWINT) | (1 << TWEN);
 444:	84 e8       	ldi	r24, 0x84	; 132
 446:	86 bf       	out	0x36, r24	; 54
  // Wait for TWINT flag set in TWCR Register
  while (!(TWCR & (1 << TWINT)))
 448:	06 b6       	in	r0, 0x36	; 54
 44a:	07 fe       	sbrs	r0, 7
 44c:	fd cf       	rjmp	.-6      	; 0x448 <TWIWrite+0x6>
    ;
}
 44e:	08 95       	ret

00000450 <TWIReadACK>:

u8 TWIReadACK(void)
{
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);    //enable Ack
 450:	84 ec       	ldi	r24, 0xC4	; 196
 452:	86 bf       	out	0x36, r24	; 54
  // Wait for TWINT flag set in TWCR Register
  while (!(TWCR & (1 << TWINT)))
 454:	06 b6       	in	r0, 0x36	; 54
 456:	07 fe       	sbrs	r0, 7
 458:	fd cf       	rjmp	.-6      	; 0x454 <TWIReadACK+0x4>
    ;
  // Read Data
  return TWDR;
 45a:	83 b1       	in	r24, 0x03	; 3
}
 45c:	08 95       	ret

0000045e <TWIReadNACK>:

u8 TWIReadNACK(void)
{
  TWCR = (1 << TWINT) | (1 << TWEN);
 45e:	84 e8       	ldi	r24, 0x84	; 132
 460:	86 bf       	out	0x36, r24	; 54
  // Wait for TWINT flag set in TWCR Register
  while (!(TWCR & (1 << TWINT)))
 462:	06 b6       	in	r0, 0x36	; 54
 464:	07 fe       	sbrs	r0, 7
 466:	fd cf       	rjmp	.-6      	; 0x462 <TWIReadNACK+0x4>
    ;
  // Read Data
  return TWDR;
 468:	83 b1       	in	r24, 0x03	; 3
}
 46a:	08 95       	ret

0000046c <TWIGetStatus>:
 46c:	81 b1       	in	r24, 0x01	; 1
 46e:	88 7f       	andi	r24, 0xF8	; 248
 470:	08 95       	ret

00000472 <main>:
#include "UART_int.h"
#include "UART_IO_int.h"
#define stop 1
#define no_stop 0
int main ()
{ u8 array_of_char[12];
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	a5 97       	sbiw	r28, 0x25	; 37
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
  u8 recived_data_buffer[12];
 uart_init();
 486:	0e 94 41 00 	call	0x82	; 0x82 <uart_init>
 EEPROM_Init();
 48a:	0e 94 3f 01 	call	0x27e	; 0x27e <EEPROM_Init>
 
 u32 no_of_bytes;
 u32 address;
 u8 flag_w;
 u8 flag_r;
 USART_SendString("EEPROM 24c08 interface");
 48e:	80 e6       	ldi	r24, 0x60	; 96
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>

 USART_SendString("\r\n");
 496:	87 e7       	ldi	r24, 0x77	; 119
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
 USART_SendString(" *************************************************************************************");
 49e:	8a e7       	ldi	r24, 0x7A	; 122
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
 USART_SendString("\r\n");
 4a6:	87 e7       	ldi	r24, 0x77	; 119
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>

  while(1){
  	USART_SendString(" *******************************************************************************************************");
 4ae:	81 ed       	ldi	r24, 0xD1	; 209
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    USART_SendString("\r\n");
 4b6:	87 e7       	ldi	r24, 0x77	; 119
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
  	USART_SendString("EEPROM 24c08 interface options : for read press r for write press w  :   ");
 4be:	8a e3       	ldi	r24, 0x3A	; 58
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
  	USART_SendString("\r\n");
 4c6:	87 e7       	ldi	r24, 0x77	; 119
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
  	USART_SendString(" for read press r  :   ");
 4ce:	84 e8       	ldi	r24, 0x84	; 132
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    USART_SendString("\r\n");
 4d6:	87 e7       	ldi	r24, 0x77	; 119
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
  	USART_SendString(" for write press w  :   ");
 4de:	8b e6       	ldi	r24, 0x6B	; 107
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    USART_SendString("\r\n");
 4e6:	87 e7       	ldi	r24, 0x77	; 119
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    USART_SendString(" for multiple read press mr  :   ");
 4ee:	8c e9       	ldi	r24, 0x9C	; 156
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    USART_SendString("\r\n");
 4f6:	87 e7       	ldi	r24, 0x77	; 119
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    USART_SendString(" for multiple write press mw  :   ");
 4fe:	8e eb       	ldi	r24, 0xBE	; 190
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    USART_SendString("\r\n");
 506:	87 e7       	ldi	r24, 0x77	; 119
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    USART_SendString("the command :  ");
 50e:	81 ee       	ldi	r24, 0xE1	; 225
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>


  	read_string_uart(array_of_char);
 516:	ce 01       	movw	r24, r28
 518:	0d 96       	adiw	r24, 0x0d	; 13
 51a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_string_uart>
    USART_SendString("\r\n");
 51e:	87 e7       	ldi	r24, 0x77	; 119
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
    if(array_of_char[0]=='w')
 526:	8d 85       	ldd	r24, Y+13	; 0x0d
 528:	87 37       	cpi	r24, 0x77	; 119
 52a:	09 f0       	breq	.+2      	; 0x52e <main+0xbc>
 52c:	42 c0       	rjmp	.+132    	; 0x5b2 <main+0x140>
    {

      USART_SendString("enter the address you want to write in from 0 to 1023 : ");
 52e:	81 ef       	ldi	r24, 0xF1	; 241
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
  	  scanf_int_uart(&address,recived_data_buffer);
 536:	be 01       	movw	r22, r28
 538:	6f 5f       	subi	r22, 0xFF	; 255
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	ce 01       	movw	r24, r28
 53e:	49 96       	adiw	r24, 0x19	; 25
 540:	0e 94 29 01 	call	0x252	; 0x252 <scanf_int_uart>
  	  USART_SendString("\r\n");
 544:	87 e7       	ldi	r24, 0x77	; 119
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      USART_SendString("enter the data format decimal or ascii  d or a: ");
 54c:	8a e2       	ldi	r24, 0x2A	; 42
 54e:	92 e0       	ldi	r25, 0x02	; 2
 550:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      read_string_uart(array_of_char);
 554:	ce 01       	movw	r24, r28
 556:	0d 96       	adiw	r24, 0x0d	; 13
 558:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_string_uart>
      USART_SendString("\r\n");
 55c:	87 e7       	ldi	r24, 0x77	; 119
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>

      if(array_of_char[0]=='d')     
 564:	8d 85       	ldd	r24, Y+13	; 0x0d
 566:	84 36       	cpi	r24, 0x64	; 100
 568:	91 f4       	brne	.+36     	; 0x58e <main+0x11c>
      {USART_SendString("enter the data in decimal format from 0 to 255 : "); 
 56a:	8b e5       	ldi	r24, 0x5B	; 91
 56c:	92 e0       	ldi	r25, 0x02	; 2
 56e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>

       scanf_int_uart(&data32,recived_data_buffer);
 572:	be 01       	movw	r22, r28
 574:	6f 5f       	subi	r22, 0xFF	; 255
 576:	7f 4f       	sbci	r23, 0xFF	; 255
 578:	ce 01       	movw	r24, r28
 57a:	81 96       	adiw	r24, 0x21	; 33
 57c:	0e 94 29 01 	call	0x252	; 0x252 <scanf_int_uart>
       USART_SendString("\r\n");
 580:	87 e7       	ldi	r24, 0x77	; 119
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
       flag_w=EEPROM_WriteByte(address,(u8)data32,stop);
 588:	41 e0       	ldi	r20, 0x01	; 1
 58a:	69 a1       	ldd	r22, Y+33	; 0x21
 58c:	0d c0       	rjmp	.+26     	; 0x5a8 <main+0x136>
       }
       else if(array_of_char[0]=='a')
 58e:	81 36       	cpi	r24, 0x61	; 97
 590:	09 f0       	breq	.+2      	; 0x594 <main+0x122>
 592:	8d cf       	rjmp	.-230    	; 0x4ae <main+0x3c>
      {USART_SendString("enter the data in ascii format : ");
 594:	8d e8       	ldi	r24, 0x8D	; 141
 596:	92 e0       	ldi	r25, 0x02	; 2
 598:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
       read_string_uart(array_of_char);
 59c:	ce 01       	movw	r24, r28
 59e:	0d 96       	adiw	r24, 0x0d	; 13
 5a0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_string_uart>
       flag_w=EEPROM_WriteByte(address,(u8)array_of_char[0],stop);
 5a4:	41 e0       	ldi	r20, 0x01	; 1
 5a6:	6d 85       	ldd	r22, Y+13	; 0x0d
 5a8:	89 8d       	ldd	r24, Y+25	; 0x19
 5aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
 5ac:	0e 94 41 01 	call	0x282	; 0x282 <EEPROM_WriteByte>
 5b0:	7e cf       	rjmp	.-260    	; 0x4ae <main+0x3c>


    }
    }	
    else if(array_of_char[0]=='r')
 5b2:	82 37       	cpi	r24, 0x72	; 114
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <main+0x146>
 5b6:	4f c0       	rjmp	.+158    	; 0x656 <main+0x1e4>
    { USART_SendString("enter the address you want to read from 0 to 1023 : ");
 5b8:	8f ea       	ldi	r24, 0xAF	; 175
 5ba:	92 e0       	ldi	r25, 0x02	; 2
 5bc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      scanf_int_uart(&address,recived_data_buffer);
 5c0:	be 01       	movw	r22, r28
 5c2:	6f 5f       	subi	r22, 0xFF	; 255
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	ce 01       	movw	r24, r28
 5c8:	49 96       	adiw	r24, 0x19	; 25
 5ca:	0e 94 29 01 	call	0x252	; 0x252 <scanf_int_uart>
  	  USART_SendString("\r\n");
 5ce:	87 e7       	ldi	r24, 0x77	; 119
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      USART_SendString("enter the data format decimal or ascii  d or a: ");
 5d6:	8a e2       	ldi	r24, 0x2A	; 42
 5d8:	92 e0       	ldi	r25, 0x02	; 2
 5da:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      read_string_uart(array_of_char);
 5de:	ce 01       	movw	r24, r28
 5e0:	0d 96       	adiw	r24, 0x0d	; 13
 5e2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_string_uart>
  	  USART_SendString("\r\n");
 5e6:	87 e7       	ldi	r24, 0x77	; 119
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>

      if(array_of_char[0]=='d') 
 5ee:	8d 85       	ldd	r24, Y+13	; 0x0d
 5f0:	84 36       	cpi	r24, 0x64	; 100
 5f2:	f1 f4       	brne	.+60     	; 0x630 <main+0x1be>
      {
      	flag_r=EEPROM_ReadByte(address,&data8,stop);
 5f4:	41 e0       	ldi	r20, 0x01	; 1
 5f6:	be 01       	movw	r22, r28
 5f8:	6b 5d       	subi	r22, 0xDB	; 219
 5fa:	7f 4f       	sbci	r23, 0xFF	; 255
 5fc:	89 8d       	ldd	r24, Y+25	; 0x19
 5fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
 600:	0e 94 86 01 	call	0x30c	; 0x30c <EEPROM_ReadByte>
        data32=(u32)data8;
 604:	8d a1       	ldd	r24, Y+37	; 0x25
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	a0 e0       	ldi	r26, 0x00	; 0
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	89 a3       	std	Y+33, r24	; 0x21
 60e:	9a a3       	std	Y+34, r25	; 0x22
 610:	ab a3       	std	Y+35, r26	; 0x23
 612:	bc a3       	std	Y+36, r27	; 0x24
        USART_SendString("the data :");
 614:	84 ee       	ldi	r24, 0xE4	; 228
 616:	92 e0       	ldi	r25, 0x02	; 2
 618:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
        printf_int_uart(data32,recived_data_buffer);
 61c:	69 a1       	ldd	r22, Y+33	; 0x21
 61e:	7a a1       	ldd	r23, Y+34	; 0x22
 620:	8b a1       	ldd	r24, Y+35	; 0x23
 622:	9c a1       	ldd	r25, Y+36	; 0x24
 624:	ae 01       	movw	r20, r28
 626:	4f 5f       	subi	r20, 0xFF	; 255
 628:	5f 4f       	sbci	r21, 0xFF	; 255
 62a:	0e 94 1c 01 	call	0x238	; 0x238 <printf_int_uart>
 62e:	3b cf       	rjmp	.-394    	; 0x4a6 <main+0x34>
        USART_SendString("\r\n");

      }
      else if(array_of_char[0]=='a')
 630:	81 36       	cpi	r24, 0x61	; 97
 632:	09 f0       	breq	.+2      	; 0x636 <main+0x1c4>
 634:	3c cf       	rjmp	.-392    	; 0x4ae <main+0x3c>
      { 

       flag_r=EEPROM_ReadByte(address,&data8,stop);
 636:	41 e0       	ldi	r20, 0x01	; 1
 638:	be 01       	movw	r22, r28
 63a:	6b 5d       	subi	r22, 0xDB	; 219
 63c:	7f 4f       	sbci	r23, 0xFF	; 255
 63e:	89 8d       	ldd	r24, Y+25	; 0x19
 640:	9a 8d       	ldd	r25, Y+26	; 0x1a
 642:	0e 94 86 01 	call	0x30c	; 0x30c <EEPROM_ReadByte>
        //data32=(u32)data8;
        //printf_int_uart(data32,recived_data_buffer);
       USART_SendString("the data :");
 646:	84 ee       	ldi	r24, 0xE4	; 228
 648:	92 e0       	ldi	r25, 0x02	; 2
 64a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
       uart_send_char(data8); 
 64e:	8d a1       	ldd	r24, Y+37	; 0x25
 650:	0e 94 4b 00 	call	0x96	; 0x96 <uart_send_char>
 654:	28 cf       	rjmp	.-432    	; 0x4a6 <main+0x34>
      }
      
    }

//multiple read
      else if(array_of_char[0]=='m' && array_of_char[1]=='r'){
 656:	8d 36       	cpi	r24, 0x6D	; 109
 658:	09 f0       	breq	.+2      	; 0x65c <main+0x1ea>
 65a:	29 cf       	rjmp	.-430    	; 0x4ae <main+0x3c>
 65c:	8e 85       	ldd	r24, Y+14	; 0x0e
 65e:	82 37       	cpi	r24, 0x72	; 114
 660:	09 f0       	breq	.+2      	; 0x664 <main+0x1f2>
 662:	d3 c0       	rjmp	.+422    	; 0x80a <main+0x398>
      USART_SendString("enter the start address you want to read from 0 to 1023 : ");
 664:	8f ee       	ldi	r24, 0xEF	; 239
 666:	92 e0       	ldi	r25, 0x02	; 2
 668:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
  	  scanf_int_uart(&address,recived_data_buffer);
 66c:	be 01       	movw	r22, r28
 66e:	6f 5f       	subi	r22, 0xFF	; 255
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	ce 01       	movw	r24, r28
 674:	49 96       	adiw	r24, 0x19	; 25
 676:	0e 94 29 01 	call	0x252	; 0x252 <scanf_int_uart>
  	  USART_SendString("\r\n");
 67a:	87 e7       	ldi	r24, 0x77	; 119
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      
      USART_SendString("enter the number of bytes : ");
 682:	8a e2       	ldi	r24, 0x2A	; 42
 684:	93 e0       	ldi	r25, 0x03	; 3
 686:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
  	  scanf_int_uart(&no_of_bytes,recived_data_buffer);
 68a:	be 01       	movw	r22, r28
 68c:	6f 5f       	subi	r22, 0xFF	; 255
 68e:	7f 4f       	sbci	r23, 0xFF	; 255
 690:	ce 01       	movw	r24, r28
 692:	4d 96       	adiw	r24, 0x1d	; 29
 694:	0e 94 29 01 	call	0x252	; 0x252 <scanf_int_uart>
  	  USART_SendString("\r\n");
 698:	87 e7       	ldi	r24, 0x77	; 119
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>

  	  USART_SendString("enter the data format decimal or ascii  d or a: ");
 6a0:	8a e2       	ldi	r24, 0x2A	; 42
 6a2:	92 e0       	ldi	r25, 0x02	; 2
 6a4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      read_string_uart(array_of_char);
 6a8:	ce 01       	movw	r24, r28
 6aa:	0d 96       	adiw	r24, 0x0d	; 13
 6ac:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_string_uart>
      USART_SendString("\r\n");
 6b0:	87 e7       	ldi	r24, 0x77	; 119
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>

      if(array_of_char[0]=='d') 
 6b8:	8d 85       	ldd	r24, Y+13	; 0x0d
 6ba:	84 36       	cpi	r24, 0x64	; 100
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <main+0x24e>
 6be:	56 c0       	rjmp	.+172    	; 0x76c <main+0x2fa>
      {

      

      flag_r=EEPROM_ReadByte(address,&data8,no_stop);
 6c0:	40 e0       	ldi	r20, 0x00	; 0
 6c2:	be 01       	movw	r22, r28
 6c4:	6b 5d       	subi	r22, 0xDB	; 219
 6c6:	7f 4f       	sbci	r23, 0xFF	; 255
 6c8:	89 8d       	ldd	r24, Y+25	; 0x19
 6ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
 6cc:	0e 94 86 01 	call	0x30c	; 0x30c <EEPROM_ReadByte>
      data32=(u32)data8;
 6d0:	8d a1       	ldd	r24, Y+37	; 0x25
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	a0 e0       	ldi	r26, 0x00	; 0
 6d6:	b0 e0       	ldi	r27, 0x00	; 0
 6d8:	89 a3       	std	Y+33, r24	; 0x21
 6da:	9a a3       	std	Y+34, r25	; 0x22
 6dc:	ab a3       	std	Y+35, r26	; 0x23
 6de:	bc a3       	std	Y+36, r27	; 0x24
      USART_SendString("the data :");
 6e0:	84 ee       	ldi	r24, 0xE4	; 228
 6e2:	92 e0       	ldi	r25, 0x02	; 2
 6e4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      printf_int_uart(data32,recived_data_buffer);
 6e8:	69 a1       	ldd	r22, Y+33	; 0x21
 6ea:	7a a1       	ldd	r23, Y+34	; 0x22
 6ec:	8b a1       	ldd	r24, Y+35	; 0x23
 6ee:	9c a1       	ldd	r25, Y+36	; 0x24
 6f0:	ae 01       	movw	r20, r28
 6f2:	4f 5f       	subi	r20, 0xFF	; 255
 6f4:	5f 4f       	sbci	r21, 0xFF	; 255
 6f6:	0e 94 1c 01 	call	0x238	; 0x238 <printf_int_uart>
      USART_SendString("\r\n");
 6fa:	87 e7       	ldi	r24, 0x77	; 119
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
     int i;
     for(i=0;i<no_of_bytes-1;i++){
 702:	40 e0       	ldi	r20, 0x00	; 0
 704:	50 e0       	ldi	r21, 0x00	; 0
 706:	ba 01       	movw	r22, r20
 708:	6a 01       	movw	r12, r20
 70a:	7b 01       	movw	r14, r22
 70c:	8f ef       	ldi	r24, 0xFF	; 255
 70e:	c8 1a       	sub	r12, r24
 710:	d8 0a       	sbc	r13, r24
 712:	e8 0a       	sbc	r14, r24
 714:	f8 0a       	sbc	r15, r24
 716:	8d 8d       	ldd	r24, Y+29	; 0x1d
 718:	9e 8d       	ldd	r25, Y+30	; 0x1e
 71a:	af 8d       	ldd	r26, Y+31	; 0x1f
 71c:	b8 a1       	ldd	r27, Y+32	; 0x20
 71e:	01 97       	sbiw	r24, 0x01	; 1
 720:	a1 09       	sbc	r26, r1
 722:	b1 09       	sbc	r27, r1
 724:	48 17       	cp	r20, r24
 726:	59 07       	cpc	r21, r25
 728:	6a 07       	cpc	r22, r26
 72a:	7b 07       	cpc	r23, r27
 72c:	08 f0       	brcs	.+2      	; 0x730 <main+0x2be>
 72e:	bf ce       	rjmp	.-642    	; 0x4ae <main+0x3c>
        
        data8=TWIReadACK();
 730:	0e 94 28 02 	call	0x450	; 0x450 <TWIReadACK>
 734:	8d a3       	std	Y+37, r24	; 0x25
        data32=(u32)data8;
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	a0 e0       	ldi	r26, 0x00	; 0
 73a:	b0 e0       	ldi	r27, 0x00	; 0
 73c:	89 a3       	std	Y+33, r24	; 0x21
 73e:	9a a3       	std	Y+34, r25	; 0x22
 740:	ab a3       	std	Y+35, r26	; 0x23
 742:	bc a3       	std	Y+36, r27	; 0x24
        USART_SendString("the data :");
 744:	84 ee       	ldi	r24, 0xE4	; 228
 746:	92 e0       	ldi	r25, 0x02	; 2
 748:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
        printf_int_uart(data32,recived_data_buffer);
 74c:	69 a1       	ldd	r22, Y+33	; 0x21
 74e:	7a a1       	ldd	r23, Y+34	; 0x22
 750:	8b a1       	ldd	r24, Y+35	; 0x23
 752:	9c a1       	ldd	r25, Y+36	; 0x24
 754:	ae 01       	movw	r20, r28
 756:	4f 5f       	subi	r20, 0xFF	; 255
 758:	5f 4f       	sbci	r21, 0xFF	; 255
 75a:	0e 94 1c 01 	call	0x238	; 0x238 <printf_int_uart>
        USART_SendString("\r\n");
 75e:	87 e7       	ldi	r24, 0x77	; 119
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
 766:	b7 01       	movw	r22, r14
 768:	a6 01       	movw	r20, r12
 76a:	ce cf       	rjmp	.-100    	; 0x708 <main+0x296>
     }
     }
     else if(array_of_char[0]=='a') 
 76c:	81 36       	cpi	r24, 0x61	; 97
 76e:	09 f0       	breq	.+2      	; 0x772 <main+0x300>
 770:	9e ce       	rjmp	.-708    	; 0x4ae <main+0x3c>
      {flag_r=EEPROM_ReadByte(address,&data8,no_stop);
 772:	40 e0       	ldi	r20, 0x00	; 0
 774:	be 01       	movw	r22, r28
 776:	6b 5d       	subi	r22, 0xDB	; 219
 778:	7f 4f       	sbci	r23, 0xFF	; 255
 77a:	89 8d       	ldd	r24, Y+25	; 0x19
 77c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 77e:	0e 94 86 01 	call	0x30c	; 0x30c <EEPROM_ReadByte>
      data32=(u32)data8;
 782:	8d a1       	ldd	r24, Y+37	; 0x25
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	a0 e0       	ldi	r26, 0x00	; 0
 788:	b0 e0       	ldi	r27, 0x00	; 0
 78a:	89 a3       	std	Y+33, r24	; 0x21
 78c:	9a a3       	std	Y+34, r25	; 0x22
 78e:	ab a3       	std	Y+35, r26	; 0x23
 790:	bc a3       	std	Y+36, r27	; 0x24
      USART_SendString("the data :");
 792:	84 ee       	ldi	r24, 0xE4	; 228
 794:	92 e0       	ldi	r25, 0x02	; 2
 796:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      uart_send_char(data8); 
 79a:	8d a1       	ldd	r24, Y+37	; 0x25
 79c:	0e 94 4b 00 	call	0x96	; 0x96 <uart_send_char>
      USART_SendString("\r\n");
 7a0:	87 e7       	ldi	r24, 0x77	; 119
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
     int i;
     for(i=0;i<no_of_bytes-1;i++){
 7a8:	40 e0       	ldi	r20, 0x00	; 0
 7aa:	50 e0       	ldi	r21, 0x00	; 0
 7ac:	ba 01       	movw	r22, r20
 7ae:	6a 01       	movw	r12, r20
 7b0:	7b 01       	movw	r14, r22
 7b2:	8f ef       	ldi	r24, 0xFF	; 255
 7b4:	c8 1a       	sub	r12, r24
 7b6:	d8 0a       	sbc	r13, r24
 7b8:	e8 0a       	sbc	r14, r24
 7ba:	f8 0a       	sbc	r15, r24
 7bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
 7be:	9e 8d       	ldd	r25, Y+30	; 0x1e
 7c0:	af 8d       	ldd	r26, Y+31	; 0x1f
 7c2:	b8 a1       	ldd	r27, Y+32	; 0x20
 7c4:	01 97       	sbiw	r24, 0x01	; 1
 7c6:	a1 09       	sbc	r26, r1
 7c8:	b1 09       	sbc	r27, r1
 7ca:	48 17       	cp	r20, r24
 7cc:	59 07       	cpc	r21, r25
 7ce:	6a 07       	cpc	r22, r26
 7d0:	7b 07       	cpc	r23, r27
 7d2:	c0 f4       	brcc	.+48     	; 0x804 <main+0x392>
        
        data8=TWIReadACK();
 7d4:	0e 94 28 02 	call	0x450	; 0x450 <TWIReadACK>
 7d8:	8d a3       	std	Y+37, r24	; 0x25
        data32=(u32)data8;
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	a0 e0       	ldi	r26, 0x00	; 0
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	89 a3       	std	Y+33, r24	; 0x21
 7e2:	9a a3       	std	Y+34, r25	; 0x22
 7e4:	ab a3       	std	Y+35, r26	; 0x23
 7e6:	bc a3       	std	Y+36, r27	; 0x24
        USART_SendString("the data :");
 7e8:	84 ee       	ldi	r24, 0xE4	; 228
 7ea:	92 e0       	ldi	r25, 0x02	; 2
 7ec:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
       uart_send_char(data8); 
 7f0:	8d a1       	ldd	r24, Y+37	; 0x25
 7f2:	0e 94 4b 00 	call	0x96	; 0x96 <uart_send_char>
       USART_SendString("\r\n");
 7f6:	87 e7       	ldi	r24, 0x77	; 119
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
 7fe:	b7 01       	movw	r22, r14
 800:	a6 01       	movw	r20, r12
 802:	d5 cf       	rjmp	.-86     	; 0x7ae <main+0x33c>
         
      }

     TWIStop();
 804:	0e 94 1e 02 	call	0x43c	; 0x43c <TWIStop>
 808:	52 ce       	rjmp	.-860    	; 0x4ae <main+0x3c>
    }
	
	}
  else if(array_of_char[0]=='m' && array_of_char[1]=='w'){
 80a:	87 37       	cpi	r24, 0x77	; 119
 80c:	09 f0       	breq	.+2      	; 0x810 <main+0x39e>
 80e:	4f ce       	rjmp	.-866    	; 0x4ae <main+0x3c>
     
USART_SendString("enter the start address you want to write in from 0 to 1023 : ");
 810:	87 e4       	ldi	r24, 0x47	; 71
 812:	93 e0       	ldi	r25, 0x03	; 3
 814:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      scanf_int_uart(&address,recived_data_buffer);
 818:	be 01       	movw	r22, r28
 81a:	6f 5f       	subi	r22, 0xFF	; 255
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	ce 01       	movw	r24, r28
 820:	49 96       	adiw	r24, 0x19	; 25
 822:	0e 94 29 01 	call	0x252	; 0x252 <scanf_int_uart>
      USART_SendString("\r\n");
 826:	87 e7       	ldi	r24, 0x77	; 119
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      
      USART_SendString("enter the number of bytes : ");
 82e:	8a e2       	ldi	r24, 0x2A	; 42
 830:	93 e0       	ldi	r25, 0x03	; 3
 832:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      scanf_int_uart(&no_of_bytes,recived_data_buffer);
 836:	be 01       	movw	r22, r28
 838:	6f 5f       	subi	r22, 0xFF	; 255
 83a:	7f 4f       	sbci	r23, 0xFF	; 255
 83c:	ce 01       	movw	r24, r28
 83e:	4d 96       	adiw	r24, 0x1d	; 29
 840:	0e 94 29 01 	call	0x252	; 0x252 <scanf_int_uart>
      USART_SendString("\r\n");
 844:	87 e7       	ldi	r24, 0x77	; 119
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>

      USART_SendString("enter the data format decimal or ascii  d or a: ");
 84c:	8a e2       	ldi	r24, 0x2A	; 42
 84e:	92 e0       	ldi	r25, 0x02	; 2
 850:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      read_string_uart(array_of_char);
 854:	ce 01       	movw	r24, r28
 856:	0d 96       	adiw	r24, 0x0d	; 13
 858:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_string_uart>
      USART_SendString("\r\n");
 85c:	87 e7       	ldi	r24, 0x77	; 119
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>

      if(array_of_char[0]=='d') 
 864:	8d 85       	ldd	r24, Y+13	; 0x0d
 866:	84 36       	cpi	r24, 0x64	; 100
 868:	09 f0       	breq	.+2      	; 0x86c <__stack+0xd>
 86a:	42 c0       	rjmp	.+132    	; 0x8f0 <__stack+0x91>
      {
      //USART_SendString("enter the address you want to write in from 0 to 1023 : ");
      //scanf_int_uart(&address,recived_data_buffer);
      //USART_SendString("\r\n");
      USART_SendString("enter the data in decimal format from 0 to 255 : "); 
 86c:	8b e5       	ldi	r24, 0x5B	; 91
 86e:	92 e0       	ldi	r25, 0x02	; 2
 870:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      scanf_int_uart(&data32,recived_data_buffer);
 874:	be 01       	movw	r22, r28
 876:	6f 5f       	subi	r22, 0xFF	; 255
 878:	7f 4f       	sbci	r23, 0xFF	; 255
 87a:	ce 01       	movw	r24, r28
 87c:	81 96       	adiw	r24, 0x21	; 33
 87e:	0e 94 29 01 	call	0x252	; 0x252 <scanf_int_uart>
      USART_SendString("\r\n");
 882:	87 e7       	ldi	r24, 0x77	; 119
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      flag_w=EEPROM_WriteByte(address,(u8)data32,no_stop);
 88a:	40 e0       	ldi	r20, 0x00	; 0
 88c:	69 a1       	ldd	r22, Y+33	; 0x21
 88e:	89 8d       	ldd	r24, Y+25	; 0x19
 890:	9a 8d       	ldd	r25, Y+26	; 0x1a
 892:	0e 94 41 01 	call	0x282	; 0x282 <EEPROM_WriteByte>
      int j;
      for(j=0;j<no_of_bytes-1;j++){
 896:	40 e0       	ldi	r20, 0x00	; 0
 898:	50 e0       	ldi	r21, 0x00	; 0
 89a:	ba 01       	movw	r22, r20
 89c:	6a 01       	movw	r12, r20
 89e:	7b 01       	movw	r14, r22
 8a0:	8f ef       	ldi	r24, 0xFF	; 255
 8a2:	c8 1a       	sub	r12, r24
 8a4:	d8 0a       	sbc	r13, r24
 8a6:	e8 0a       	sbc	r14, r24
 8a8:	f8 0a       	sbc	r15, r24
 8aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
 8ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
 8ae:	af 8d       	ldd	r26, Y+31	; 0x1f
 8b0:	b8 a1       	ldd	r27, Y+32	; 0x20
 8b2:	01 97       	sbiw	r24, 0x01	; 1
 8b4:	a1 09       	sbc	r26, r1
 8b6:	b1 09       	sbc	r27, r1
 8b8:	48 17       	cp	r20, r24
 8ba:	59 07       	cpc	r21, r25
 8bc:	6a 07       	cpc	r22, r26
 8be:	7b 07       	cpc	r23, r27
 8c0:	08 f0       	brcs	.+2      	; 0x8c4 <__stack+0x65>
 8c2:	a0 cf       	rjmp	.-192    	; 0x804 <main+0x392>
       USART_SendString("enter the data in decimal format from 0 to 255 : "); 
 8c4:	8b e5       	ldi	r24, 0x5B	; 91
 8c6:	92 e0       	ldi	r25, 0x02	; 2
 8c8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
       scanf_int_uart(&data32,recived_data_buffer);
 8cc:	be 01       	movw	r22, r28
 8ce:	6f 5f       	subi	r22, 0xFF	; 255
 8d0:	7f 4f       	sbci	r23, 0xFF	; 255
 8d2:	ce 01       	movw	r24, r28
 8d4:	81 96       	adiw	r24, 0x21	; 33
 8d6:	0e 94 29 01 	call	0x252	; 0x252 <scanf_int_uart>
       USART_SendString("\r\n");
 8da:	87 e7       	ldi	r24, 0x77	; 119
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
       //flag_w=EEPROM_WriteByte_no_stop(address,(u8)data32,no_stop);
       data8=(u8)data32;
 8e2:	89 a1       	ldd	r24, Y+33	; 0x21
 8e4:	8d a3       	std	Y+37, r24	; 0x25
       TWIWrite(data8);
 8e6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
 8ea:	b7 01       	movw	r22, r14
 8ec:	a6 01       	movw	r20, r12
 8ee:	d6 cf       	rjmp	.-84     	; 0x89c <__stack+0x3d>
      }
      }
      else if(array_of_char[0]=='a') 
 8f0:	81 36       	cpi	r24, 0x61	; 97
 8f2:	09 f0       	breq	.+2      	; 0x8f6 <__stack+0x97>
 8f4:	87 cf       	rjmp	.-242    	; 0x804 <main+0x392>
      {USART_SendString("enter the data in ascii format : ");
 8f6:	8d e8       	ldi	r24, 0x8D	; 141
 8f8:	92 e0       	ldi	r25, 0x02	; 2
 8fa:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
       read_string_uart(array_of_char);
 8fe:	ce 01       	movw	r24, r28
 900:	0d 96       	adiw	r24, 0x0d	; 13
 902:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_string_uart>
       flag_w=EEPROM_WriteByte(address,(u8)array_of_char[0],no_stop);
 906:	40 e0       	ldi	r20, 0x00	; 0
 908:	6d 85       	ldd	r22, Y+13	; 0x0d
 90a:	89 8d       	ldd	r24, Y+25	; 0x19
 90c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 90e:	0e 94 41 01 	call	0x282	; 0x282 <EEPROM_WriteByte>
       int j;
      for(j=0;j<no_of_bytes-1;j++){
 912:	40 e0       	ldi	r20, 0x00	; 0
 914:	50 e0       	ldi	r21, 0x00	; 0
 916:	ba 01       	movw	r22, r20
 918:	6a 01       	movw	r12, r20
 91a:	7b 01       	movw	r14, r22
 91c:	8f ef       	ldi	r24, 0xFF	; 255
 91e:	c8 1a       	sub	r12, r24
 920:	d8 0a       	sbc	r13, r24
 922:	e8 0a       	sbc	r14, r24
 924:	f8 0a       	sbc	r15, r24
 926:	8d 8d       	ldd	r24, Y+29	; 0x1d
 928:	9e 8d       	ldd	r25, Y+30	; 0x1e
 92a:	af 8d       	ldd	r26, Y+31	; 0x1f
 92c:	b8 a1       	ldd	r27, Y+32	; 0x20
 92e:	01 97       	sbiw	r24, 0x01	; 1
 930:	a1 09       	sbc	r26, r1
 932:	b1 09       	sbc	r27, r1
 934:	48 17       	cp	r20, r24
 936:	59 07       	cpc	r21, r25
 938:	6a 07       	cpc	r22, r26
 93a:	7b 07       	cpc	r23, r27
 93c:	08 f0       	brcs	.+2      	; 0x940 <__stack+0xe1>
 93e:	62 cf       	rjmp	.-316    	; 0x804 <main+0x392>
      USART_SendString("enter the data in ascii format  : "); 
 940:	86 e8       	ldi	r24, 0x86	; 134
 942:	93 e0       	ldi	r25, 0x03	; 3
 944:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      read_string_uart(array_of_char);
 948:	ce 01       	movw	r24, r28
 94a:	0d 96       	adiw	r24, 0x0d	; 13
 94c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_string_uart>
      USART_SendString("\r\n");
 950:	87 e7       	ldi	r24, 0x77	; 119
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
      data8=(u8)array_of_char[0];
 958:	8d 85       	ldd	r24, Y+13	; 0x0d
 95a:	8d a3       	std	Y+37, r24	; 0x25
      TWIWrite(data8);
 95c:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
 960:	b7 01       	movw	r22, r14
 962:	a6 01       	movw	r20, r12
 964:	d9 cf       	rjmp	.-78     	; 0x918 <__stack+0xb9>

00000966 <__mulsi3>:
 966:	db 01       	movw	r26, r22
 968:	8f 93       	push	r24
 96a:	9f 93       	push	r25
 96c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__muluhisi3>
 970:	bf 91       	pop	r27
 972:	af 91       	pop	r26
 974:	a2 9f       	mul	r26, r18
 976:	80 0d       	add	r24, r0
 978:	91 1d       	adc	r25, r1
 97a:	a3 9f       	mul	r26, r19
 97c:	90 0d       	add	r25, r0
 97e:	b2 9f       	mul	r27, r18
 980:	90 0d       	add	r25, r0
 982:	11 24       	eor	r1, r1
 984:	08 95       	ret

00000986 <__udivmodhi4>:
 986:	aa 1b       	sub	r26, r26
 988:	bb 1b       	sub	r27, r27
 98a:	51 e1       	ldi	r21, 0x11	; 17
 98c:	07 c0       	rjmp	.+14     	; 0x99c <__udivmodhi4_ep>

0000098e <__udivmodhi4_loop>:
 98e:	aa 1f       	adc	r26, r26
 990:	bb 1f       	adc	r27, r27
 992:	a6 17       	cp	r26, r22
 994:	b7 07       	cpc	r27, r23
 996:	10 f0       	brcs	.+4      	; 0x99c <__udivmodhi4_ep>
 998:	a6 1b       	sub	r26, r22
 99a:	b7 0b       	sbc	r27, r23

0000099c <__udivmodhi4_ep>:
 99c:	88 1f       	adc	r24, r24
 99e:	99 1f       	adc	r25, r25
 9a0:	5a 95       	dec	r21
 9a2:	a9 f7       	brne	.-22     	; 0x98e <__udivmodhi4_loop>
 9a4:	80 95       	com	r24
 9a6:	90 95       	com	r25
 9a8:	bc 01       	movw	r22, r24
 9aa:	cd 01       	movw	r24, r26
 9ac:	08 95       	ret

000009ae <__muluhisi3>:
 9ae:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__umulhisi3>
 9b2:	a5 9f       	mul	r26, r21
 9b4:	90 0d       	add	r25, r0
 9b6:	b4 9f       	mul	r27, r20
 9b8:	90 0d       	add	r25, r0
 9ba:	a4 9f       	mul	r26, r20
 9bc:	80 0d       	add	r24, r0
 9be:	91 1d       	adc	r25, r1
 9c0:	11 24       	eor	r1, r1
 9c2:	08 95       	ret

000009c4 <__mulshisi3>:
 9c4:	b7 ff       	sbrs	r27, 7
 9c6:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__muluhisi3>

000009ca <__mulohisi3>:
 9ca:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__muluhisi3>
 9ce:	82 1b       	sub	r24, r18
 9d0:	93 0b       	sbc	r25, r19
 9d2:	08 95       	ret

000009d4 <__umulhisi3>:
 9d4:	a2 9f       	mul	r26, r18
 9d6:	b0 01       	movw	r22, r0
 9d8:	b3 9f       	mul	r27, r19
 9da:	c0 01       	movw	r24, r0
 9dc:	a3 9f       	mul	r26, r19
 9de:	70 0d       	add	r23, r0
 9e0:	81 1d       	adc	r24, r1
 9e2:	11 24       	eor	r1, r1
 9e4:	91 1d       	adc	r25, r1
 9e6:	b2 9f       	mul	r27, r18
 9e8:	70 0d       	add	r23, r0
 9ea:	81 1d       	adc	r24, r1
 9ec:	11 24       	eor	r1, r1
 9ee:	91 1d       	adc	r25, r1
 9f0:	08 95       	ret

000009f2 <_exit>:
 9f2:	f8 94       	cli

000009f4 <__stop_program>:
 9f4:	ff cf       	rjmp	.-2      	; 0x9f4 <__stop_program>
