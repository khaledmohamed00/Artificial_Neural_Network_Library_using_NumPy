
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000bd2  00000c66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007e  0080007e  00000c84  2**0
                  ALLOC
  3 .stab         00001b48  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000116f  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000393b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000394c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 77 02 	call	0x4ee	; 0x4ee <main>
  8a:	0c 94 e7 05 	jmp	0xbce	; 0xbce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_Timer0PWM_OC0>:
#include<util/delay.h>
#include<avr/io.h>
#include <avr/interrupt.h>

void init_Timer0PWM_OC0(u8 ocro_value){
     DDRB|=(1<<3);
  92:	bb 9a       	sbi	0x17, 3	; 23
     //TCCR0|=(1<<5)|(1<<6)|(1<<4)|(1<<3);
     //TCCR0|=(1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<COM00);
     TCCR0 |= (1<<WGM00)|(1<<WGM01)       // Start timer0 without
  94:	93 b7       	in	r25, 0x33	; 51
  96:	99 66       	ori	r25, 0x69	; 105
  98:	93 bf       	out	0x33, r25	; 51
             |(1<<COM01)|(1<<CS00);
     OCR0=ocro_value;
  9a:	8c bf       	out	0x3c, r24	; 60
  9c:	08 95       	ret

0000009e <calculate_Duty_Cycle_Freq>:
     //TCCR0|=(1<<CS00);
}

 void calculate_Duty_Cycle_Freq(u16 *duty_cycle ){
  9e:	8f 92       	push	r8
  a0:	9f 92       	push	r9
  a2:	af 92       	push	r10
  a4:	bf 92       	push	r11
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	ec 01       	movw	r28, r24
u16 a,b,c;
//,high,period;
        TCCR1A = 0;
  b4:	1f bc       	out	0x2f, r1	; 47
        TCNT1=0;
  b6:	1d bc       	out	0x2d, r1	; 45
  b8:	1c bc       	out	0x2c, r1	; 44
		TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag) flag */
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	88 bf       	out	0x38, r24	; 56

		//TCCR1B = 0x41;  	/* Rising edge, no prescaler */
		TCCR1B|=(1<<CS10)|(1<<ICES1);
  be:	8e b5       	in	r24, 0x2e	; 46
  c0:	81 64       	ori	r24, 0x41	; 65
  c2:	8e bd       	out	0x2e, r24	; 46
		while ((TIFR&(1<<ICF1)) == 0);
  c4:	08 b6       	in	r0, 0x38	; 56
  c6:	05 fe       	sbrs	r0, 5
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <calculate_Duty_Cycle_Freq+0x26>
		a = ICR1;  		/* Take value of capture register */
  ca:	e6 b4       	in	r14, 0x26	; 38
  cc:	f7 b4       	in	r15, 0x27	; 39
		TIFR |= (1<<ICF1);  	/* Clear ICF flag */
  ce:	98 b7       	in	r25, 0x38	; 56
  d0:	90 62       	ori	r25, 0x20	; 32
  d2:	98 bf       	out	0x38, r25	; 56
		
		//TCCR1B = 0x01;  	/* Falling edge, no prescaler */
		TCCR1B &=~(1<<ICES1);
  d4:	9e b5       	in	r25, 0x2e	; 46
  d6:	9f 7b       	andi	r25, 0xBF	; 191
  d8:	9e bd       	out	0x2e, r25	; 46
		while ((TIFR&(1<<ICF1)) == 0);
  da:	08 b6       	in	r0, 0x38	; 56
  dc:	05 fe       	sbrs	r0, 5
  de:	fd cf       	rjmp	.-6      	; 0xda <calculate_Duty_Cycle_Freq+0x3c>
		b = ICR1;  		/* Take value of capture register */
  e0:	66 b5       	in	r22, 0x26	; 38
  e2:	77 b5       	in	r23, 0x27	; 39
		TIFR |= (1<<ICF1);  	/* Clear ICF flag */
  e4:	98 b7       	in	r25, 0x38	; 56
  e6:	90 62       	ori	r25, 0x20	; 32
  e8:	98 bf       	out	0x38, r25	; 56
		
		//TCCR1B = 0x41;  	/* Rising edge, no prescaler */
		TCCR1B|=(1<<ICES1);
  ea:	9e b5       	in	r25, 0x2e	; 46
  ec:	90 64       	ori	r25, 0x40	; 64
  ee:	9e bd       	out	0x2e, r25	; 46
		while ((TIFR&(1<<ICF1)) == 0);
  f0:	08 b6       	in	r0, 0x38	; 56
  f2:	05 fe       	sbrs	r0, 5
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <calculate_Duty_Cycle_Freq+0x52>
		c = ICR1;  		/* Take value of capture register */
  f6:	06 b5       	in	r16, 0x26	; 38
  f8:	17 b5       	in	r17, 0x27	; 39
		TIFR |= (1<<ICF1);  	/* Clear ICF flag */
  fa:	98 b7       	in	r25, 0x38	; 56
  fc:	90 62       	ori	r25, 0x20	; 32
  fe:	98 bf       	out	0x38, r25	; 56

		TCCR1B = 0;  		/* Stop the timer */
 100:	1e bc       	out	0x2e, r1	; 46
		
		if(a<b && b<c)  	/* Check for valid condition, 
 102:	e6 16       	cp	r14, r22
 104:	f7 06       	cpc	r15, r23
 106:	18 f5       	brcc	.+70     	; 0x14e <calculate_Duty_Cycle_Freq+0xb0>
 108:	60 17       	cp	r22, r16
 10a:	71 07       	cpc	r23, r17
 10c:	00 f5       	brcc	.+64     	; 0x14e <calculate_Duty_Cycle_Freq+0xb0>
					to avoid timer overflow reading */
		{
			 u16 High=b-a;
 10e:	6e 19       	sub	r22, r14
 110:	7f 09       	sbc	r23, r15
			 u16 Period=c-a;
			
			u16 Duty_cycle=(((float)High/(float)Period)*100);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__floatunsisf>
 11a:	4b 01       	movw	r8, r22
 11c:	5c 01       	movw	r10, r24
		
		if(a<b && b<c)  	/* Check for valid condition, 
					to avoid timer overflow reading */
		{
			 u16 High=b-a;
			 u16 Period=c-a;
 11e:	c8 01       	movw	r24, r16
 120:	8e 19       	sub	r24, r14
 122:	9f 09       	sbc	r25, r15
			
			u16 Duty_cycle=(((float)High/(float)Period)*100);
 124:	bc 01       	movw	r22, r24
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__floatunsisf>
 12e:	9b 01       	movw	r18, r22
 130:	ac 01       	movw	r20, r24
 132:	c5 01       	movw	r24, r10
 134:	b4 01       	movw	r22, r8
 136:	0e 94 b5 02 	call	0x56a	; 0x56a <__divsf3>
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	48 ec       	ldi	r20, 0xC8	; 200
 140:	52 e4       	ldi	r21, 0x42	; 66
 142:	0e 94 4d 04 	call	0x89a	; 0x89a <__mulsf3>
 146:	0e 94 2e 03 	call	0x65c	; 0x65c <__fixunssfsi>
 14a:	79 83       	std	Y+1, r23	; 0x01
 14c:	68 83       	st	Y, r22
	 {
	 	
		}


}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	ff 90       	pop	r15
 158:	ef 90       	pop	r14
 15a:	bf 90       	pop	r11
 15c:	af 90       	pop	r10
 15e:	9f 90       	pop	r9
 160:	8f 90       	pop	r8
 162:	08 95       	ret

00000164 <ADC_Init>:
#include "ADC_register.h"

void ADC_Init (void)
{
	// ADC Enable
	SET_BIT(ADCSRA_Reg,7);
 164:	37 9a       	sbi	0x06, 7	; 6

	// Prescaler Configuration as 128
	SET_BIT(ADCSRA_Reg,2);
 166:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA_Reg,1);
 168:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA_Reg,0);
 16a:	30 9a       	sbi	0x06, 0	; 6


	// Referance Voltage as AVCC with external capacitor
	CLR_BIT(ADMUX_Reg,7);
 16c:	3f 98       	cbi	0x07, 7	; 7
	SET_BIT(ADMUX_Reg,6);
 16e:	3e 9a       	sbi	0x07, 6	; 7

	// ADC Data Rgith Adjustment
	CLR_BIT(ADMUX_Reg,5);
 170:	3d 98       	cbi	0x07, 5	; 7
 172:	08 95       	ret

00000174 <ADCu16_Read>:

u16 ADCu16_Read (u8 channel)
{
	// ADC Channel Selection
	channel &= 0x07;
	ADMUX_Reg &= 0xE0;
 174:	97 b1       	in	r25, 0x07	; 7
 176:	90 7e       	andi	r25, 0xE0	; 224
 178:	97 b9       	out	0x07, r25	; 7
	ADMUX_Reg |= channel;
 17a:	97 b1       	in	r25, 0x07	; 7
}

u16 ADCu16_Read (u8 channel)
{
	// ADC Channel Selection
	channel &= 0x07;
 17c:	87 70       	andi	r24, 0x07	; 7
	ADMUX_Reg &= 0xE0;
	ADMUX_Reg |= channel;
 17e:	98 2b       	or	r25, r24
 180:	97 b9       	out	0x07, r25	; 7

	// Start Single Convertion
	SET_BIT(ADCSRA_Reg,6);
 182:	36 9a       	sbi	0x06, 6	; 6

	//wait for the conversion
	while(!(ADCSRA_Reg & (1<<4)));
 184:	34 9b       	sbis	0x06, 4	; 6
 186:	fe cf       	rjmp	.-4      	; 0x184 <ADCu16_Read+0x10>

	//ADC Flag Clear
	SET_BIT(ADCSRA_Reg,4);
 188:	34 9a       	sbi	0x06, 4	; 6

	return ADC;
 18a:	84 b1       	in	r24, 0x04	; 4
 18c:	95 b1       	in	r25, 0x05	; 5
}
 18e:	08 95       	ret

00000190 <LCD_cmd>:

void LCD_cmd(u8 cmd)
{


DIO_u8SetPortValue(LCD_DATA,cmd);
 190:	68 2f       	mov	r22, r24
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_u8SetPortValue>
DIO_u8SetPortValue(LCD_ctrl,(0<<rs)|(0<<rw)|(1<<en));
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_u8SetPortValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	8f ec       	ldi	r24, 0xCF	; 207
 1a2:	97 e0       	ldi	r25, 0x07	; 7
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_cmd+0x14>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_cmd+0x1a>
 1aa:	00 00       	nop
_delay_ms(1);
DIO_u8SetPortValue(LCD_ctrl,(0<<rs)|(0<<rw)|(0<<en));
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_u8SetPortValue>
 1b4:	9f e7       	ldi	r25, 0x7F	; 127
 1b6:	28 e3       	ldi	r18, 0x38	; 56
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	91 50       	subi	r25, 0x01	; 1
 1bc:	20 40       	sbci	r18, 0x00	; 0
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <LCD_cmd+0x2a>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD_cmd+0x34>
 1c4:	00 00       	nop
 1c6:	08 95       	ret

000001c8 <init_LCD>:
#include "DIO_int.h"
#include "LCD_int.h"
#include "LCD_config.h"
void init_LCD(void)
{
DIO_u8SetPortDirection(LCD_DATA,0xff);
 1c8:	6f ef       	ldi	r22, 0xFF	; 255
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPortDirection>
DIO_u8SetPortDirection(LCD_ctrl,0x07);
 1d0:	67 e0       	ldi	r22, 0x07	; 7
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_u8SetPortDirection>

LCD_cmd(0x38);                            // initialization of 16X2 LCD in 8bit mode
 1d8:	88 e3       	ldi	r24, 0x38	; 56
 1da:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_cmd>
 1de:	8f ec       	ldi	r24, 0xCF	; 207
 1e0:	97 e0       	ldi	r25, 0x07	; 7
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <init_LCD+0x1a>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <init_LCD+0x20>
 1e8:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x01);                                 // clear LCD
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_cmd>
 1f0:	8f ec       	ldi	r24, 0xCF	; 207
 1f2:	97 e0       	ldi	r25, 0x07	; 7
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <init_LCD+0x2c>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <init_LCD+0x32>
 1fa:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x0E);                        // cursor ON
 1fc:	8e e0       	ldi	r24, 0x0E	; 14
 1fe:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_cmd>
 202:	8f ec       	ldi	r24, 0xCF	; 207
 204:	97 e0       	ldi	r25, 0x07	; 7
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <init_LCD+0x3e>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <init_LCD+0x44>
 20c:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x80);                     // —8 go to first line and –0 is for 0th position
 20e:	80 e8       	ldi	r24, 0x80	; 128
 210:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_cmd>
 214:	8f ec       	ldi	r24, 0xCF	; 207
 216:	97 e0       	ldi	r25, 0x07	; 7
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <init_LCD+0x50>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <init_LCD+0x56>
 21e:	00 00       	nop
 220:	08 95       	ret

00000222 <LCD_write>:
}

void LCD_write(u8 data)
{

DIO_u8SetPortValue(LCD_DATA,data);
 222:	68 2f       	mov	r22, r24
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_u8SetPortValue>
DIO_u8SetPortValue(LCD_ctrl,(1<<rs)|(0<<rw)|(1<<en));
 22a:	65 e0       	ldi	r22, 0x05	; 5
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_u8SetPortValue>
 232:	8f ec       	ldi	r24, 0xCF	; 207
 234:	97 e0       	ldi	r25, 0x07	; 7
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_write+0x14>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_write+0x1a>
 23c:	00 00       	nop
_delay_ms(1);

DIO_u8SetPortValue(LCD_ctrl, (1<<rs)|(0<<rw)|(0<<en));
 23e:	64 e0       	ldi	r22, 0x04	; 4
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_u8SetPortValue>
 246:	9f e7       	ldi	r25, 0x7F	; 127
 248:	28 e3       	ldi	r18, 0x38	; 56
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	91 50       	subi	r25, 0x01	; 1
 24e:	20 40       	sbci	r18, 0x00	; 0
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <LCD_write+0x2a>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_write+0x34>
 256:	00 00       	nop
 258:	08 95       	ret

0000025a <LCD_write_string>:
return ;

}

void LCD_write_string(u8 *str)             //store address value of the string in pointer *str
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
int i=0;
while(str[i]!='\0')                               // loop will go on till the NULL character in the string
 260:	89 91       	ld	r24, Y+
 262:	88 23       	and	r24, r24
 264:	19 f0       	breq	.+6      	; 0x26c <LCD_write_string+0x12>
{
LCD_write(str[i]);                            // sending data on LCD byte by byte
 266:	0e 94 11 01 	call	0x222	; 0x222 <LCD_write>
 26a:	fa cf       	rjmp	.-12     	; 0x260 <LCD_write_string+0x6>
i++;
}
return;
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <LCD_write_int>:

void LCD_write_int(u16 number){
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	18 2f       	mov	r17, r24
 280:	09 2f       	mov	r16, r25

s16 num=number;
 282:	68 2f       	mov	r22, r24
 284:	79 2f       	mov	r23, r25
s16 digits=0;
 286:	c0 e0       	ldi	r28, 0x00	; 0
 288:	d0 e0       	ldi	r29, 0x00	; 0
s16 index;
while(num>0){
digits++;
num/=10;
 28a:	ea e0       	ldi	r30, 0x0A	; 10
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	ce 01       	movw	r24, r28
 290:	01 96       	adiw	r24, 0x01	; 1
void LCD_write_int(u16 number){

s16 num=number;
s16 digits=0;
s16 index;
while(num>0){
 292:	16 16       	cp	r1, r22
 294:	17 06       	cpc	r1, r23
 296:	34 f4       	brge	.+12     	; 0x2a4 <LCD_write_int+0x32>
 298:	ec 01       	movw	r28, r24
digits++;
num/=10;
 29a:	cb 01       	movw	r24, r22
 29c:	bf 01       	movw	r22, r30
 29e:	0e 94 a1 02 	call	0x542	; 0x542 <__divmodhi4>
 2a2:	f5 cf       	rjmp	.-22     	; 0x28e <LCD_write_int+0x1c>
}
index=digits-1;
u8 * arr=malloc((digits+1)* sizeof(u8));
 2a4:	0e 94 ba 04 	call	0x974	; 0x974 <malloc>
 2a8:	fc 01       	movw	r30, r24
while(index>=0){
 2aa:	9e 01       	movw	r18, r28
s16 rem=number%10;
 2ac:	8a e0       	ldi	r24, 0x0A	; 10
 2ae:	e8 2e       	mov	r14, r24
 2b0:	f1 2c       	mov	r15, r1
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	31 09       	sbc	r19, r1
digits++;
num/=10;
}
index=digits-1;
u8 * arr=malloc((digits+1)* sizeof(u8));
while(index>=0){
 2b6:	37 fd       	sbrc	r19, 7
 2b8:	0d c0       	rjmp	.+26     	; 0x2d4 <LCD_write_int+0x62>
s16 rem=number%10;
number=number/10;
 2ba:	81 2f       	mov	r24, r17
 2bc:	90 2f       	mov	r25, r16
 2be:	b7 01       	movw	r22, r14
 2c0:	0e 94 8d 02 	call	0x51a	; 0x51a <__udivmodhi4>
 2c4:	16 2f       	mov	r17, r22
 2c6:	07 2f       	mov	r16, r23
 2c8:	df 01       	movw	r26, r30
 2ca:	a2 0f       	add	r26, r18
 2cc:	b3 1f       	adc	r27, r19
arr[index--]=rem+'0';
 2ce:	80 5d       	subi	r24, 0xD0	; 208
 2d0:	8c 93       	st	X, r24
 2d2:	ef cf       	rjmp	.-34     	; 0x2b2 <LCD_write_int+0x40>
}
arr[digits]='\0';
 2d4:	ce 0f       	add	r28, r30
 2d6:	df 1f       	adc	r29, r31
 2d8:	18 82       	st	Y, r1
LCD_write_string(arr);
 2da:	cf 01       	movw	r24, r30

}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
s16 rem=number%10;
number=number/10;
arr[index--]=rem+'0';
}
arr[digits]='\0';
LCD_write_string(arr);
 2e8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <LCD_write_string>

000002ec <LCD_write_double>:

}

void LCD_write_double(f64 number){
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	6b 01       	movw	r12, r22
 2f6:	7c 01       	movw	r14, r24

s16 num=(s16)number;
 2f8:	0e 94 27 03 	call	0x64e	; 0x64e <__fixsfsi>

LCD_write_int(num);
 2fc:	cb 01       	movw	r24, r22
 2fe:	0e 94 39 01 	call	0x272	; 0x272 <LCD_write_int>
LCD_write('.');
 302:	8e e2       	ldi	r24, 0x2E	; 46
 304:	0e 94 11 01 	call	0x222	; 0x222 <LCD_write>
s16 factor=(s16)(fmod( number, 1.0 )*100);
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	40 e8       	ldi	r20, 0x80	; 128
 30e:	5f e3       	ldi	r21, 0x3F	; 63
 310:	c7 01       	movw	r24, r14
 312:	b6 01       	movw	r22, r12
 314:	0e 94 a5 03 	call	0x74a	; 0x74a <fmod>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	48 ec       	ldi	r20, 0xC8	; 200
 31e:	52 e4       	ldi	r21, 0x42	; 66
 320:	0e 94 4d 04 	call	0x89a	; 0x89a <__mulsf3>
 324:	0e 94 27 03 	call	0x64e	; 0x64e <__fixsfsi>
LCD_write_int(factor);
 328:	cb 01       	movw	r24, r22

}
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	df 90       	pop	r13
 330:	cf 90       	pop	r12
s16 num=(s16)number;

LCD_write_int(num);
LCD_write('.');
s16 factor=(s16)(fmod( number, 1.0 )*100);
LCD_write_int(factor);
 332:	0c 94 39 01 	jmp	0x272	; 0x272 <LCD_write_int>

00000336 <LCD_build_special_char>:

}

void LCD_build_special_char(u8 location,u8 *ptr){
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29

if(location<8){
 33e:	88 30       	cpi	r24, 0x08	; 8
 340:	80 f4       	brcc	.+32     	; 0x362 <LCD_build_special_char+0x2c>
 342:	8b 01       	movw	r16, r22

LCD_cmd(0x40+location*8);
 344:	88 0f       	add	r24, r24
 346:	88 0f       	add	r24, r24
 348:	88 0f       	add	r24, r24
 34a:	80 5c       	subi	r24, 0xC0	; 192
 34c:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_cmd>
 350:	e8 01       	movw	r28, r16
 352:	08 5f       	subi	r16, 0xF8	; 248
 354:	1f 4f       	sbci	r17, 0xFF	; 255
u8 i=0;
for(i=0;i<8;i++){
LCD_write(ptr[i]);
 356:	89 91       	ld	r24, Y+
 358:	0e 94 11 01 	call	0x222	; 0x222 <LCD_write>

if(location<8){

LCD_cmd(0x40+location*8);
u8 i=0;
for(i=0;i<8;i++){
 35c:	c0 17       	cp	r28, r16
 35e:	d1 07       	cpc	r29, r17
 360:	d1 f7       	brne	.-12     	; 0x356 <LCD_build_special_char+0x20>

}

}

}
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	08 95       	ret

0000036c <LCD_goto>:

void LCD_goto(u8 x,u8 y){

if(x<16){
 36c:	80 31       	cpi	r24, 0x10	; 16
 36e:	48 f4       	brcc	.+18     	; 0x382 <LCD_goto+0x16>

if(y==0){
 370:	61 11       	cpse	r22, r1
 372:	02 c0       	rjmp	.+4      	; 0x378 <LCD_goto+0xc>
LCD_cmd(0x80+x);
 374:	80 58       	subi	r24, 0x80	; 128
 376:	03 c0       	rjmp	.+6      	; 0x37e <LCD_goto+0x12>
}else if(y==1){
 378:	61 30       	cpi	r22, 0x01	; 1
 37a:	19 f4       	brne	.+6      	; 0x382 <LCD_goto+0x16>
LCD_cmd(0xBF+x);
 37c:	81 54       	subi	r24, 0x41	; 65
 37e:	0c 94 c8 00 	jmp	0x190	; 0x190 <LCD_cmd>
 382:	08 95       	ret

00000384 <LCD_vidWriteU16>:
}

}

void LCD_vidWriteU16 (u16 u16ValCpy)
{
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	00 d0       	rcall	.+0      	; 0x38e <LCD_vidWriteU16+0xa>
 38e:	00 d0       	rcall	.+0      	; 0x390 <LCD_vidWriteU16+0xc>
 390:	00 d0       	rcall	.+0      	; 0x392 <LCD_vidWriteU16+0xe>
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
		u8 u8Iteration = 0;
		u8 u8DigitNumLoc = 0;
 396:	10 e0       	ldi	r17, 0x00	; 0
		u8 u8aNumber[6];

		while(u16ValCpy != 0)
		{

			u8aNumber[u8DigitNumLoc++] = ((u16ValCpy % 10) + '0');
 398:	2a e0       	ldi	r18, 0x0A	; 10
 39a:	30 e0       	ldi	r19, 0x00	; 0
{
		u8 u8Iteration = 0;
		u8 u8DigitNumLoc = 0;
		u8 u8aNumber[6];

		while(u16ValCpy != 0)
 39c:	00 97       	sbiw	r24, 0x00	; 0
 39e:	71 f0       	breq	.+28     	; 0x3bc <LCD_vidWriteU16+0x38>
		{

			u8aNumber[u8DigitNumLoc++] = ((u16ValCpy % 10) + '0');
 3a0:	e1 e0       	ldi	r30, 0x01	; 1
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	ec 0f       	add	r30, r28
 3a6:	fd 1f       	adc	r31, r29
 3a8:	e1 0f       	add	r30, r17
 3aa:	f1 1d       	adc	r31, r1
 3ac:	b9 01       	movw	r22, r18
 3ae:	0e 94 8d 02 	call	0x51a	; 0x51a <__udivmodhi4>
 3b2:	80 5d       	subi	r24, 0xD0	; 208
 3b4:	80 83       	st	Z, r24
			u16ValCpy = u16ValCpy / 10;
 3b6:	cb 01       	movw	r24, r22
		u8 u8aNumber[6];

		while(u16ValCpy != 0)
		{

			u8aNumber[u8DigitNumLoc++] = ((u16ValCpy % 10) + '0');
 3b8:	1f 5f       	subi	r17, 0xFF	; 255
 3ba:	f0 cf       	rjmp	.-32     	; 0x39c <LCD_vidWriteU16+0x18>
			u16ValCpy = u16ValCpy / 10;
		}

		u8Iteration = (u8DigitNumLoc-1);
 3bc:	0f ef       	ldi	r16, 0xFF	; 255
 3be:	01 0f       	add	r16, r17
		while(u8Iteration >= 0 && u8Iteration < u8DigitNumLoc)
 3c0:	01 17       	cp	r16, r17
 3c2:	88 f4       	brcc	.+34     	; 0x3e6 <LCD_vidWriteU16+0x62>
		{
			/* Write Character on LCD */
			LCD_write(u8aNumber[u8Iteration]);
 3c4:	e1 e0       	ldi	r30, 0x01	; 1
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	ec 0f       	add	r30, r28
 3ca:	fd 1f       	adc	r31, r29
 3cc:	e0 0f       	add	r30, r16
 3ce:	f1 1d       	adc	r31, r1
 3d0:	80 81       	ld	r24, Z
 3d2:	0e 94 11 01 	call	0x222	; 0x222 <LCD_write>
 3d6:	8f e9       	ldi	r24, 0x9F	; 159
 3d8:	9f e0       	ldi	r25, 0x0F	; 15
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <LCD_vidWriteU16+0x56>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <LCD_vidWriteU16+0x5c>
 3e0:	00 00       	nop
			/* Delay to let the LCD show the character */
			_delay_ms(2);
			u8Iteration = u8Iteration -1;
 3e2:	01 50       	subi	r16, 0x01	; 1
 3e4:	ed cf       	rjmp	.-38     	; 0x3c0 <LCD_vidWriteU16+0x3c>
		}
 3e6:	26 96       	adiw	r28, 0x06	; 6
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	08 95       	ret

000003fc <DIO_u8SetPinValue>:
/**************************************************DIO_u8SetPinValue*******************************************************************************/
/**********************************************************************************************************************************/
/**********************************************************************************************************************************/
u8 DIO_u8SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy){

if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){
 3fc:	84 30       	cpi	r24, 0x04	; 4
 3fe:	d8 f4       	brcc	.+54     	; 0x436 <DIO_u8SetPinValue+0x3a>
 400:	68 30       	cpi	r22, 0x08	; 8
 402:	c8 f4       	brcc	.+50     	; 0x436 <DIO_u8SetPinValue+0x3a>
 404:	90 e0       	ldi	r25, 0x00	; 0

if(u8PinValCopy==HIGH){
SET_BIT(*PORT_Output[u8PortIdCopy],u8PinIdCopy);
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	fc 01       	movw	r30, r24
 40c:	e0 5a       	subi	r30, 0xA0	; 160
 40e:	ff 4f       	sbci	r31, 0xFF	; 255
 410:	01 90       	ld	r0, Z+
 412:	f0 81       	ld	r31, Z
 414:	e0 2d       	mov	r30, r0
 416:	20 81       	ld	r18, Z
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	01 c0       	rjmp	.+2      	; 0x420 <DIO_u8SetPinValue+0x24>
 41e:	88 0f       	add	r24, r24
 420:	6a 95       	dec	r22
 422:	ea f7       	brpl	.-6      	; 0x41e <DIO_u8SetPinValue+0x22>
/**********************************************************************************************************************************/
u8 DIO_u8SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy){

if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){

if(u8PinValCopy==HIGH){
 424:	41 30       	cpi	r20, 0x01	; 1
 426:	11 f4       	brne	.+4      	; 0x42c <DIO_u8SetPinValue+0x30>
SET_BIT(*PORT_Output[u8PortIdCopy],u8PinIdCopy);
 428:	82 2b       	or	r24, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_u8SetPinValue+0x34>

}
else
{
CLR_BIT(*PORT_Output[u8PortIdCopy],u8PinIdCopy);
 42c:	80 95       	com	r24
 42e:	82 23       	and	r24, r18
 430:	80 83       	st	Z, r24
}

return SUCCESS;
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	08 95       	ret
}

else{

return ERROR;
 436:	8f ef       	ldi	r24, 0xFF	; 255

}



}
 438:	08 95       	ret

0000043a <DIO_u8GetPinValue>:
/**********************************************************************************************************************************/

u8 DIO_u8GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy,u8* u8ptrPinValCopy){


if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){
 43a:	84 30       	cpi	r24, 0x04	; 4
 43c:	b8 f4       	brcc	.+46     	; 0x46c <DIO_u8GetPinValue+0x32>
 43e:	68 30       	cpi	r22, 0x08	; 8
 440:	a8 f4       	brcc	.+42     	; 0x46c <DIO_u8GetPinValue+0x32>
*u8ptrPinValCopy=GET_BIT(*PORT_Input[u8PortIdCopy],u8PinIdCopy);
 442:	e8 2f       	mov	r30, r24
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	ee 0f       	add	r30, r30
 448:	ff 1f       	adc	r31, r31
 44a:	e8 59       	subi	r30, 0x98	; 152
 44c:	ff 4f       	sbci	r31, 0xFF	; 255
 44e:	01 90       	ld	r0, Z+
 450:	f0 81       	ld	r31, Z
 452:	e0 2d       	mov	r30, r0
 454:	80 81       	ld	r24, Z
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_u8GetPinValue+0x24>
 45a:	95 95       	asr	r25
 45c:	87 95       	ror	r24
 45e:	6a 95       	dec	r22
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_u8GetPinValue+0x20>
 462:	81 70       	andi	r24, 0x01	; 1
 464:	fa 01       	movw	r30, r20
 466:	80 83       	st	Z, r24
return SUCCESS;
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	08 95       	ret
}

else{

return ERROR;
 46c:	8f ef       	ldi	r24, 0xFF	; 255

}


}
 46e:	08 95       	ret

00000470 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){


if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){
 470:	84 30       	cpi	r24, 0x04	; 4
 472:	d8 f4       	brcc	.+54     	; 0x4aa <DIO_u8SetPinDirection+0x3a>
 474:	68 30       	cpi	r22, 0x08	; 8
 476:	c8 f4       	brcc	.+50     	; 0x4aa <DIO_u8SetPinDirection+0x3a>
 478:	90 e0       	ldi	r25, 0x00	; 0

if(u8PinDirCopy==HIGH)
{SET_BIT(*PORT_Direction[u8PortIdCopy],u8PinIdCopy);
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	fc 01       	movw	r30, r24
 480:	e0 59       	subi	r30, 0x90	; 144
 482:	ff 4f       	sbci	r31, 0xFF	; 255
 484:	01 90       	ld	r0, Z+
 486:	f0 81       	ld	r31, Z
 488:	e0 2d       	mov	r30, r0
 48a:	20 81       	ld	r18, Z
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	01 c0       	rjmp	.+2      	; 0x494 <DIO_u8SetPinDirection+0x24>
 492:	88 0f       	add	r24, r24
 494:	6a 95       	dec	r22
 496:	ea f7       	brpl	.-6      	; 0x492 <DIO_u8SetPinDirection+0x22>
u8 DIO_u8SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){


if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){

if(u8PinDirCopy==HIGH)
 498:	41 30       	cpi	r20, 0x01	; 1
 49a:	11 f4       	brne	.+4      	; 0x4a0 <DIO_u8SetPinDirection+0x30>
{SET_BIT(*PORT_Direction[u8PortIdCopy],u8PinIdCopy);
 49c:	82 2b       	or	r24, r18
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_u8SetPinDirection+0x34>
}
else
{
CLR_BIT(*PORT_Direction[u8PortIdCopy],u8PinIdCopy);
 4a0:	80 95       	com	r24
 4a2:	82 23       	and	r24, r18
 4a4:	80 83       	st	Z, r24
}

return SUCCESS;
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	08 95       	ret

}

else{

return ERROR;
 4aa:	8f ef       	ldi	r24, 0xFF	; 255

}


}
 4ac:	08 95       	ret

000004ae <DIO_u8SetPortDirection>:



u8 DIO_u8SetPortDirection (u8 u8PortIdCopy, u8 u8PortDirCopy){

if(u8PortIdCopy<=PORTD){
 4ae:	84 30       	cpi	r24, 0x04	; 4
 4b0:	60 f4       	brcc	.+24     	; 0x4ca <DIO_u8SetPortDirection+0x1c>

*PORT_Direction[u8PortIdCopy]=u8PortDirCopy;
 4b2:	e8 2f       	mov	r30, r24
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	ee 0f       	add	r30, r30
 4b8:	ff 1f       	adc	r31, r31
 4ba:	e0 59       	subi	r30, 0x90	; 144
 4bc:	ff 4f       	sbci	r31, 0xFF	; 255
 4be:	01 90       	ld	r0, Z+
 4c0:	f0 81       	ld	r31, Z
 4c2:	e0 2d       	mov	r30, r0
 4c4:	60 83       	st	Z, r22


return SUCCESS;
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	08 95       	ret

}

else{

return ERROR;
 4ca:	8f ef       	ldi	r24, 0xFF	; 255

}

}
 4cc:	08 95       	ret

000004ce <DIO_u8SetPortValue>:
 4ce:	84 30       	cpi	r24, 0x04	; 4
 4d0:	60 f4       	brcc	.+24     	; 0x4ea <DIO_u8SetPortValue+0x1c>
 4d2:	e8 2f       	mov	r30, r24
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	ee 0f       	add	r30, r30
 4d8:	ff 1f       	adc	r31, r31
 4da:	e0 5a       	subi	r30, 0xA0	; 160
 4dc:	ff 4f       	sbci	r31, 0xFF	; 255
 4de:	01 90       	ld	r0, Z+
 4e0:	f0 81       	ld	r31, Z
 4e2:	e0 2d       	mov	r30, r0
 4e4:	60 83       	st	Z, r22
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	08 95       	ret
 4ea:	8f ef       	ldi	r24, 0xFF	; 255
 4ec:	08 95       	ret

000004ee <main>:

int main (void){
DDRD|=(1<<0);
 4ee:	88 9a       	sbi	0x11, 0	; 17
 u16 *duty_cycle;	
 init_LCD();
 4f0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <init_LCD>
 init_Timer0PWM_OC0(128);
 4f4:	80 e8       	ldi	r24, 0x80	; 128
 4f6:	0e 94 49 00 	call	0x92	; 0x92 <init_Timer0PWM_OC0>
 ADC_Init();
 4fa:	0e 94 b2 00 	call	0x164	; 0x164 <ADC_Init>

	while(1)
	 {OCR0=ADCu16_Read(3);
 4fe:	83 e0       	ldi	r24, 0x03	; 3
 500:	0e 94 ba 00 	call	0x174	; 0x174 <ADCu16_Read>
 504:	8c bf       	out	0x3c, r24	; 60

       calculate_Duty_Cycle_Freq(duty_cycle);
 506:	c0 e0       	ldi	r28, 0x00	; 0
 508:	d0 e0       	ldi	r29, 0x00	; 0
 50a:	ce 01       	movw	r24, r28
 50c:	0e 94 4f 00 	call	0x9e	; 0x9e <calculate_Duty_Cycle_Freq>
	   LCD_write_int(*duty_cycle);
 510:	88 81       	ld	r24, Y
 512:	99 81       	ldd	r25, Y+1	; 0x01
 514:	0e 94 39 01 	call	0x272	; 0x272 <LCD_write_int>
	   //LCD_vidWriteU16(*duty_cycle);
	   
	}
 518:	f2 cf       	rjmp	.-28     	; 0x4fe <main+0x10>

0000051a <__udivmodhi4>:
 51a:	aa 1b       	sub	r26, r26
 51c:	bb 1b       	sub	r27, r27
 51e:	51 e1       	ldi	r21, 0x11	; 17
 520:	07 c0       	rjmp	.+14     	; 0x530 <__udivmodhi4_ep>

00000522 <__udivmodhi4_loop>:
 522:	aa 1f       	adc	r26, r26
 524:	bb 1f       	adc	r27, r27
 526:	a6 17       	cp	r26, r22
 528:	b7 07       	cpc	r27, r23
 52a:	10 f0       	brcs	.+4      	; 0x530 <__udivmodhi4_ep>
 52c:	a6 1b       	sub	r26, r22
 52e:	b7 0b       	sbc	r27, r23

00000530 <__udivmodhi4_ep>:
 530:	88 1f       	adc	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	5a 95       	dec	r21
 536:	a9 f7       	brne	.-22     	; 0x522 <__udivmodhi4_loop>
 538:	80 95       	com	r24
 53a:	90 95       	com	r25
 53c:	bc 01       	movw	r22, r24
 53e:	cd 01       	movw	r24, r26
 540:	08 95       	ret

00000542 <__divmodhi4>:
 542:	97 fb       	bst	r25, 7
 544:	07 2e       	mov	r0, r23
 546:	16 f4       	brtc	.+4      	; 0x54c <__divmodhi4+0xa>
 548:	00 94       	com	r0
 54a:	07 d0       	rcall	.+14     	; 0x55a <__divmodhi4_neg1>
 54c:	77 fd       	sbrc	r23, 7
 54e:	09 d0       	rcall	.+18     	; 0x562 <__divmodhi4_neg2>
 550:	0e 94 8d 02 	call	0x51a	; 0x51a <__udivmodhi4>
 554:	07 fc       	sbrc	r0, 7
 556:	05 d0       	rcall	.+10     	; 0x562 <__divmodhi4_neg2>
 558:	3e f4       	brtc	.+14     	; 0x568 <__divmodhi4_exit>

0000055a <__divmodhi4_neg1>:
 55a:	90 95       	com	r25
 55c:	81 95       	neg	r24
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	08 95       	ret

00000562 <__divmodhi4_neg2>:
 562:	70 95       	com	r23
 564:	61 95       	neg	r22
 566:	7f 4f       	sbci	r23, 0xFF	; 255

00000568 <__divmodhi4_exit>:
 568:	08 95       	ret

0000056a <__divsf3>:
 56a:	0e 94 c9 02 	call	0x592	; 0x592 <__divsf3x>
 56e:	0c 94 13 04 	jmp	0x826	; 0x826 <__fp_round>
 572:	0e 94 0c 04 	call	0x818	; 0x818 <__fp_pscB>
 576:	58 f0       	brcs	.+22     	; 0x58e <__divsf3+0x24>
 578:	0e 94 05 04 	call	0x80a	; 0x80a <__fp_pscA>
 57c:	40 f0       	brcs	.+16     	; 0x58e <__divsf3+0x24>
 57e:	29 f4       	brne	.+10     	; 0x58a <__divsf3+0x20>
 580:	5f 3f       	cpi	r21, 0xFF	; 255
 582:	29 f0       	breq	.+10     	; 0x58e <__divsf3+0x24>
 584:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_inf>
 588:	51 11       	cpse	r21, r1
 58a:	0c 94 47 04 	jmp	0x88e	; 0x88e <__fp_szero>
 58e:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_nan>

00000592 <__divsf3x>:
 592:	0e 94 24 04 	call	0x848	; 0x848 <__fp_split3>
 596:	68 f3       	brcs	.-38     	; 0x572 <__divsf3+0x8>

00000598 <__divsf3_pse>:
 598:	99 23       	and	r25, r25
 59a:	b1 f3       	breq	.-20     	; 0x588 <__divsf3+0x1e>
 59c:	55 23       	and	r21, r21
 59e:	91 f3       	breq	.-28     	; 0x584 <__divsf3+0x1a>
 5a0:	95 1b       	sub	r25, r21
 5a2:	55 0b       	sbc	r21, r21
 5a4:	bb 27       	eor	r27, r27
 5a6:	aa 27       	eor	r26, r26
 5a8:	62 17       	cp	r22, r18
 5aa:	73 07       	cpc	r23, r19
 5ac:	84 07       	cpc	r24, r20
 5ae:	38 f0       	brcs	.+14     	; 0x5be <__divsf3_pse+0x26>
 5b0:	9f 5f       	subi	r25, 0xFF	; 255
 5b2:	5f 4f       	sbci	r21, 0xFF	; 255
 5b4:	22 0f       	add	r18, r18
 5b6:	33 1f       	adc	r19, r19
 5b8:	44 1f       	adc	r20, r20
 5ba:	aa 1f       	adc	r26, r26
 5bc:	a9 f3       	breq	.-22     	; 0x5a8 <__divsf3_pse+0x10>
 5be:	35 d0       	rcall	.+106    	; 0x62a <__divsf3_pse+0x92>
 5c0:	0e 2e       	mov	r0, r30
 5c2:	3a f0       	brmi	.+14     	; 0x5d2 <__divsf3_pse+0x3a>
 5c4:	e0 e8       	ldi	r30, 0x80	; 128
 5c6:	32 d0       	rcall	.+100    	; 0x62c <__divsf3_pse+0x94>
 5c8:	91 50       	subi	r25, 0x01	; 1
 5ca:	50 40       	sbci	r21, 0x00	; 0
 5cc:	e6 95       	lsr	r30
 5ce:	00 1c       	adc	r0, r0
 5d0:	ca f7       	brpl	.-14     	; 0x5c4 <__divsf3_pse+0x2c>
 5d2:	2b d0       	rcall	.+86     	; 0x62a <__divsf3_pse+0x92>
 5d4:	fe 2f       	mov	r31, r30
 5d6:	29 d0       	rcall	.+82     	; 0x62a <__divsf3_pse+0x92>
 5d8:	66 0f       	add	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	88 1f       	adc	r24, r24
 5de:	bb 1f       	adc	r27, r27
 5e0:	26 17       	cp	r18, r22
 5e2:	37 07       	cpc	r19, r23
 5e4:	48 07       	cpc	r20, r24
 5e6:	ab 07       	cpc	r26, r27
 5e8:	b0 e8       	ldi	r27, 0x80	; 128
 5ea:	09 f0       	breq	.+2      	; 0x5ee <__divsf3_pse+0x56>
 5ec:	bb 0b       	sbc	r27, r27
 5ee:	80 2d       	mov	r24, r0
 5f0:	bf 01       	movw	r22, r30
 5f2:	ff 27       	eor	r31, r31
 5f4:	93 58       	subi	r25, 0x83	; 131
 5f6:	5f 4f       	sbci	r21, 0xFF	; 255
 5f8:	3a f0       	brmi	.+14     	; 0x608 <__divsf3_pse+0x70>
 5fa:	9e 3f       	cpi	r25, 0xFE	; 254
 5fc:	51 05       	cpc	r21, r1
 5fe:	78 f0       	brcs	.+30     	; 0x61e <__divsf3_pse+0x86>
 600:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_inf>
 604:	0c 94 47 04 	jmp	0x88e	; 0x88e <__fp_szero>
 608:	5f 3f       	cpi	r21, 0xFF	; 255
 60a:	e4 f3       	brlt	.-8      	; 0x604 <__divsf3_pse+0x6c>
 60c:	98 3e       	cpi	r25, 0xE8	; 232
 60e:	d4 f3       	brlt	.-12     	; 0x604 <__divsf3_pse+0x6c>
 610:	86 95       	lsr	r24
 612:	77 95       	ror	r23
 614:	67 95       	ror	r22
 616:	b7 95       	ror	r27
 618:	f7 95       	ror	r31
 61a:	9f 5f       	subi	r25, 0xFF	; 255
 61c:	c9 f7       	brne	.-14     	; 0x610 <__divsf3_pse+0x78>
 61e:	88 0f       	add	r24, r24
 620:	91 1d       	adc	r25, r1
 622:	96 95       	lsr	r25
 624:	87 95       	ror	r24
 626:	97 f9       	bld	r25, 7
 628:	08 95       	ret
 62a:	e1 e0       	ldi	r30, 0x01	; 1
 62c:	66 0f       	add	r22, r22
 62e:	77 1f       	adc	r23, r23
 630:	88 1f       	adc	r24, r24
 632:	bb 1f       	adc	r27, r27
 634:	62 17       	cp	r22, r18
 636:	73 07       	cpc	r23, r19
 638:	84 07       	cpc	r24, r20
 63a:	ba 07       	cpc	r27, r26
 63c:	20 f0       	brcs	.+8      	; 0x646 <__divsf3_pse+0xae>
 63e:	62 1b       	sub	r22, r18
 640:	73 0b       	sbc	r23, r19
 642:	84 0b       	sbc	r24, r20
 644:	ba 0b       	sbc	r27, r26
 646:	ee 1f       	adc	r30, r30
 648:	88 f7       	brcc	.-30     	; 0x62c <__divsf3_pse+0x94>
 64a:	e0 95       	com	r30
 64c:	08 95       	ret

0000064e <__fixsfsi>:
 64e:	0e 94 2e 03 	call	0x65c	; 0x65c <__fixunssfsi>
 652:	68 94       	set
 654:	b1 11       	cpse	r27, r1
 656:	0c 94 47 04 	jmp	0x88e	; 0x88e <__fp_szero>
 65a:	08 95       	ret

0000065c <__fixunssfsi>:
 65c:	0e 94 2c 04 	call	0x858	; 0x858 <__fp_splitA>
 660:	88 f0       	brcs	.+34     	; 0x684 <__fixunssfsi+0x28>
 662:	9f 57       	subi	r25, 0x7F	; 127
 664:	98 f0       	brcs	.+38     	; 0x68c <__fixunssfsi+0x30>
 666:	b9 2f       	mov	r27, r25
 668:	99 27       	eor	r25, r25
 66a:	b7 51       	subi	r27, 0x17	; 23
 66c:	b0 f0       	brcs	.+44     	; 0x69a <__fixunssfsi+0x3e>
 66e:	e1 f0       	breq	.+56     	; 0x6a8 <__fixunssfsi+0x4c>
 670:	66 0f       	add	r22, r22
 672:	77 1f       	adc	r23, r23
 674:	88 1f       	adc	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	1a f0       	brmi	.+6      	; 0x680 <__fixunssfsi+0x24>
 67a:	ba 95       	dec	r27
 67c:	c9 f7       	brne	.-14     	; 0x670 <__fixunssfsi+0x14>
 67e:	14 c0       	rjmp	.+40     	; 0x6a8 <__fixunssfsi+0x4c>
 680:	b1 30       	cpi	r27, 0x01	; 1
 682:	91 f0       	breq	.+36     	; 0x6a8 <__fixunssfsi+0x4c>
 684:	0e 94 46 04 	call	0x88c	; 0x88c <__fp_zero>
 688:	b1 e0       	ldi	r27, 0x01	; 1
 68a:	08 95       	ret
 68c:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_zero>
 690:	67 2f       	mov	r22, r23
 692:	78 2f       	mov	r23, r24
 694:	88 27       	eor	r24, r24
 696:	b8 5f       	subi	r27, 0xF8	; 248
 698:	39 f0       	breq	.+14     	; 0x6a8 <__fixunssfsi+0x4c>
 69a:	b9 3f       	cpi	r27, 0xF9	; 249
 69c:	cc f3       	brlt	.-14     	; 0x690 <__fixunssfsi+0x34>
 69e:	86 95       	lsr	r24
 6a0:	77 95       	ror	r23
 6a2:	67 95       	ror	r22
 6a4:	b3 95       	inc	r27
 6a6:	d9 f7       	brne	.-10     	; 0x69e <__fixunssfsi+0x42>
 6a8:	3e f4       	brtc	.+14     	; 0x6b8 <__fixunssfsi+0x5c>
 6aa:	90 95       	com	r25
 6ac:	80 95       	com	r24
 6ae:	70 95       	com	r23
 6b0:	61 95       	neg	r22
 6b2:	7f 4f       	sbci	r23, 0xFF	; 255
 6b4:	8f 4f       	sbci	r24, 0xFF	; 255
 6b6:	9f 4f       	sbci	r25, 0xFF	; 255
 6b8:	08 95       	ret

000006ba <__floatunsisf>:
 6ba:	e8 94       	clt
 6bc:	09 c0       	rjmp	.+18     	; 0x6d0 <__floatsisf+0x12>

000006be <__floatsisf>:
 6be:	97 fb       	bst	r25, 7
 6c0:	3e f4       	brtc	.+14     	; 0x6d0 <__floatsisf+0x12>
 6c2:	90 95       	com	r25
 6c4:	80 95       	com	r24
 6c6:	70 95       	com	r23
 6c8:	61 95       	neg	r22
 6ca:	7f 4f       	sbci	r23, 0xFF	; 255
 6cc:	8f 4f       	sbci	r24, 0xFF	; 255
 6ce:	9f 4f       	sbci	r25, 0xFF	; 255
 6d0:	99 23       	and	r25, r25
 6d2:	a9 f0       	breq	.+42     	; 0x6fe <__floatsisf+0x40>
 6d4:	f9 2f       	mov	r31, r25
 6d6:	96 e9       	ldi	r25, 0x96	; 150
 6d8:	bb 27       	eor	r27, r27
 6da:	93 95       	inc	r25
 6dc:	f6 95       	lsr	r31
 6de:	87 95       	ror	r24
 6e0:	77 95       	ror	r23
 6e2:	67 95       	ror	r22
 6e4:	b7 95       	ror	r27
 6e6:	f1 11       	cpse	r31, r1
 6e8:	f8 cf       	rjmp	.-16     	; 0x6da <__floatsisf+0x1c>
 6ea:	fa f4       	brpl	.+62     	; 0x72a <__floatsisf+0x6c>
 6ec:	bb 0f       	add	r27, r27
 6ee:	11 f4       	brne	.+4      	; 0x6f4 <__floatsisf+0x36>
 6f0:	60 ff       	sbrs	r22, 0
 6f2:	1b c0       	rjmp	.+54     	; 0x72a <__floatsisf+0x6c>
 6f4:	6f 5f       	subi	r22, 0xFF	; 255
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	8f 4f       	sbci	r24, 0xFF	; 255
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	16 c0       	rjmp	.+44     	; 0x72a <__floatsisf+0x6c>
 6fe:	88 23       	and	r24, r24
 700:	11 f0       	breq	.+4      	; 0x706 <__floatsisf+0x48>
 702:	96 e9       	ldi	r25, 0x96	; 150
 704:	11 c0       	rjmp	.+34     	; 0x728 <__floatsisf+0x6a>
 706:	77 23       	and	r23, r23
 708:	21 f0       	breq	.+8      	; 0x712 <__floatsisf+0x54>
 70a:	9e e8       	ldi	r25, 0x8E	; 142
 70c:	87 2f       	mov	r24, r23
 70e:	76 2f       	mov	r23, r22
 710:	05 c0       	rjmp	.+10     	; 0x71c <__floatsisf+0x5e>
 712:	66 23       	and	r22, r22
 714:	71 f0       	breq	.+28     	; 0x732 <__floatsisf+0x74>
 716:	96 e8       	ldi	r25, 0x86	; 134
 718:	86 2f       	mov	r24, r22
 71a:	70 e0       	ldi	r23, 0x00	; 0
 71c:	60 e0       	ldi	r22, 0x00	; 0
 71e:	2a f0       	brmi	.+10     	; 0x72a <__floatsisf+0x6c>
 720:	9a 95       	dec	r25
 722:	66 0f       	add	r22, r22
 724:	77 1f       	adc	r23, r23
 726:	88 1f       	adc	r24, r24
 728:	da f7       	brpl	.-10     	; 0x720 <__floatsisf+0x62>
 72a:	88 0f       	add	r24, r24
 72c:	96 95       	lsr	r25
 72e:	87 95       	ror	r24
 730:	97 f9       	bld	r25, 7
 732:	08 95       	ret
 734:	0e 94 05 04 	call	0x80a	; 0x80a <__fp_pscA>
 738:	20 f0       	brcs	.+8      	; 0x742 <__floatsisf+0x84>
 73a:	19 f0       	breq	.+6      	; 0x742 <__floatsisf+0x84>
 73c:	0e 94 0c 04 	call	0x818	; 0x818 <__fp_pscB>
 740:	50 f4       	brcc	.+20     	; 0x756 <fmod+0xc>
 742:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_nan>
 746:	0c 94 47 04 	jmp	0x88e	; 0x88e <__fp_szero>

0000074a <fmod>:
 74a:	e9 2f       	mov	r30, r25
 74c:	0e 94 24 04 	call	0x848	; 0x848 <__fp_split3>
 750:	88 f3       	brcs	.-30     	; 0x734 <__floatsisf+0x76>
 752:	55 23       	and	r21, r21
 754:	b1 f3       	breq	.-20     	; 0x742 <__floatsisf+0x84>
 756:	e7 fb       	bst	r30, 7
 758:	62 17       	cp	r22, r18
 75a:	73 07       	cpc	r23, r19
 75c:	84 07       	cpc	r24, r20
 75e:	95 07       	cpc	r25, r21
 760:	a8 f1       	brcs	.+106    	; 0x7cc <fmod+0x82>
 762:	89 f3       	breq	.-30     	; 0x746 <__floatsisf+0x88>
 764:	e9 2f       	mov	r30, r25
 766:	ff 27       	eor	r31, r31
 768:	88 23       	and	r24, r24
 76a:	2a f0       	brmi	.+10     	; 0x776 <fmod+0x2c>
 76c:	31 97       	sbiw	r30, 0x01	; 1
 76e:	66 0f       	add	r22, r22
 770:	77 1f       	adc	r23, r23
 772:	88 1f       	adc	r24, r24
 774:	da f7       	brpl	.-10     	; 0x76c <fmod+0x22>
 776:	95 2f       	mov	r25, r21
 778:	55 27       	eor	r21, r21
 77a:	44 23       	and	r20, r20
 77c:	32 f0       	brmi	.+12     	; 0x78a <fmod+0x40>
 77e:	91 50       	subi	r25, 0x01	; 1
 780:	50 40       	sbci	r21, 0x00	; 0
 782:	22 0f       	add	r18, r18
 784:	33 1f       	adc	r19, r19
 786:	44 1f       	adc	r20, r20
 788:	d2 f7       	brpl	.-12     	; 0x77e <fmod+0x34>
 78a:	bb 27       	eor	r27, r27
 78c:	e9 1b       	sub	r30, r25
 78e:	f5 0b       	sbc	r31, r21
 790:	62 1b       	sub	r22, r18
 792:	73 0b       	sbc	r23, r19
 794:	84 0b       	sbc	r24, r20
 796:	b1 09       	sbc	r27, r1
 798:	b1 f2       	breq	.-84     	; 0x746 <__floatsisf+0x88>
 79a:	22 f4       	brpl	.+8      	; 0x7a4 <fmod+0x5a>
 79c:	62 0f       	add	r22, r18
 79e:	73 1f       	adc	r23, r19
 7a0:	84 1f       	adc	r24, r20
 7a2:	b1 1d       	adc	r27, r1
 7a4:	31 97       	sbiw	r30, 0x01	; 1
 7a6:	2a f0       	brmi	.+10     	; 0x7b2 <fmod+0x68>
 7a8:	66 0f       	add	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	bb 1f       	adc	r27, r27
 7b0:	ef cf       	rjmp	.-34     	; 0x790 <fmod+0x46>
 7b2:	91 50       	subi	r25, 0x01	; 1
 7b4:	50 40       	sbci	r21, 0x00	; 0
 7b6:	62 f0       	brmi	.+24     	; 0x7d0 <fmod+0x86>
 7b8:	41 f0       	breq	.+16     	; 0x7ca <fmod+0x80>
 7ba:	88 23       	and	r24, r24
 7bc:	32 f0       	brmi	.+12     	; 0x7ca <fmod+0x80>
 7be:	66 0f       	add	r22, r22
 7c0:	77 1f       	adc	r23, r23
 7c2:	88 1f       	adc	r24, r24
 7c4:	91 50       	subi	r25, 0x01	; 1
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	c1 f7       	brne	.-16     	; 0x7ba <fmod+0x70>
 7ca:	93 95       	inc	r25
 7cc:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_mpack>
 7d0:	86 95       	lsr	r24
 7d2:	77 95       	ror	r23
 7d4:	67 95       	ror	r22
 7d6:	9f 5f       	subi	r25, 0xFF	; 255
 7d8:	d9 f7       	brne	.-10     	; 0x7d0 <fmod+0x86>
 7da:	f7 cf       	rjmp	.-18     	; 0x7ca <fmod+0x80>

000007dc <__fp_inf>:
 7dc:	97 f9       	bld	r25, 7
 7de:	9f 67       	ori	r25, 0x7F	; 127
 7e0:	80 e8       	ldi	r24, 0x80	; 128
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	08 95       	ret

000007e8 <__fp_mpack>:
 7e8:	9f 3f       	cpi	r25, 0xFF	; 255
 7ea:	31 f0       	breq	.+12     	; 0x7f8 <__fp_mpack_finite+0xc>

000007ec <__fp_mpack_finite>:
 7ec:	91 50       	subi	r25, 0x01	; 1
 7ee:	20 f4       	brcc	.+8      	; 0x7f8 <__fp_mpack_finite+0xc>
 7f0:	87 95       	ror	r24
 7f2:	77 95       	ror	r23
 7f4:	67 95       	ror	r22
 7f6:	b7 95       	ror	r27
 7f8:	88 0f       	add	r24, r24
 7fa:	91 1d       	adc	r25, r1
 7fc:	96 95       	lsr	r25
 7fe:	87 95       	ror	r24
 800:	97 f9       	bld	r25, 7
 802:	08 95       	ret

00000804 <__fp_nan>:
 804:	9f ef       	ldi	r25, 0xFF	; 255
 806:	80 ec       	ldi	r24, 0xC0	; 192
 808:	08 95       	ret

0000080a <__fp_pscA>:
 80a:	00 24       	eor	r0, r0
 80c:	0a 94       	dec	r0
 80e:	16 16       	cp	r1, r22
 810:	17 06       	cpc	r1, r23
 812:	18 06       	cpc	r1, r24
 814:	09 06       	cpc	r0, r25
 816:	08 95       	ret

00000818 <__fp_pscB>:
 818:	00 24       	eor	r0, r0
 81a:	0a 94       	dec	r0
 81c:	12 16       	cp	r1, r18
 81e:	13 06       	cpc	r1, r19
 820:	14 06       	cpc	r1, r20
 822:	05 06       	cpc	r0, r21
 824:	08 95       	ret

00000826 <__fp_round>:
 826:	09 2e       	mov	r0, r25
 828:	03 94       	inc	r0
 82a:	00 0c       	add	r0, r0
 82c:	11 f4       	brne	.+4      	; 0x832 <__fp_round+0xc>
 82e:	88 23       	and	r24, r24
 830:	52 f0       	brmi	.+20     	; 0x846 <__fp_round+0x20>
 832:	bb 0f       	add	r27, r27
 834:	40 f4       	brcc	.+16     	; 0x846 <__fp_round+0x20>
 836:	bf 2b       	or	r27, r31
 838:	11 f4       	brne	.+4      	; 0x83e <__fp_round+0x18>
 83a:	60 ff       	sbrs	r22, 0
 83c:	04 c0       	rjmp	.+8      	; 0x846 <__fp_round+0x20>
 83e:	6f 5f       	subi	r22, 0xFF	; 255
 840:	7f 4f       	sbci	r23, 0xFF	; 255
 842:	8f 4f       	sbci	r24, 0xFF	; 255
 844:	9f 4f       	sbci	r25, 0xFF	; 255
 846:	08 95       	ret

00000848 <__fp_split3>:
 848:	57 fd       	sbrc	r21, 7
 84a:	90 58       	subi	r25, 0x80	; 128
 84c:	44 0f       	add	r20, r20
 84e:	55 1f       	adc	r21, r21
 850:	59 f0       	breq	.+22     	; 0x868 <__stack+0x9>
 852:	5f 3f       	cpi	r21, 0xFF	; 255
 854:	71 f0       	breq	.+28     	; 0x872 <__stack+0x13>
 856:	47 95       	ror	r20

00000858 <__fp_splitA>:
 858:	88 0f       	add	r24, r24
 85a:	97 fb       	bst	r25, 7
 85c:	99 1f       	adc	r25, r25
 85e:	61 f0       	breq	.+24     	; 0x878 <__stack+0x19>
 860:	9f 3f       	cpi	r25, 0xFF	; 255
 862:	79 f0       	breq	.+30     	; 0x882 <__stack+0x23>
 864:	87 95       	ror	r24
 866:	08 95       	ret
 868:	12 16       	cp	r1, r18
 86a:	13 06       	cpc	r1, r19
 86c:	14 06       	cpc	r1, r20
 86e:	55 1f       	adc	r21, r21
 870:	f2 cf       	rjmp	.-28     	; 0x856 <__fp_split3+0xe>
 872:	46 95       	lsr	r20
 874:	f1 df       	rcall	.-30     	; 0x858 <__fp_splitA>
 876:	08 c0       	rjmp	.+16     	; 0x888 <__stack+0x29>
 878:	16 16       	cp	r1, r22
 87a:	17 06       	cpc	r1, r23
 87c:	18 06       	cpc	r1, r24
 87e:	99 1f       	adc	r25, r25
 880:	f1 cf       	rjmp	.-30     	; 0x864 <__stack+0x5>
 882:	86 95       	lsr	r24
 884:	71 05       	cpc	r23, r1
 886:	61 05       	cpc	r22, r1
 888:	08 94       	sec
 88a:	08 95       	ret

0000088c <__fp_zero>:
 88c:	e8 94       	clt

0000088e <__fp_szero>:
 88e:	bb 27       	eor	r27, r27
 890:	66 27       	eor	r22, r22
 892:	77 27       	eor	r23, r23
 894:	cb 01       	movw	r24, r22
 896:	97 f9       	bld	r25, 7
 898:	08 95       	ret

0000089a <__mulsf3>:
 89a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__mulsf3x>
 89e:	0c 94 13 04 	jmp	0x826	; 0x826 <__fp_round>
 8a2:	0e 94 05 04 	call	0x80a	; 0x80a <__fp_pscA>
 8a6:	38 f0       	brcs	.+14     	; 0x8b6 <__mulsf3+0x1c>
 8a8:	0e 94 0c 04 	call	0x818	; 0x818 <__fp_pscB>
 8ac:	20 f0       	brcs	.+8      	; 0x8b6 <__mulsf3+0x1c>
 8ae:	95 23       	and	r25, r21
 8b0:	11 f0       	breq	.+4      	; 0x8b6 <__mulsf3+0x1c>
 8b2:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_inf>
 8b6:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_nan>
 8ba:	11 24       	eor	r1, r1
 8bc:	0c 94 47 04 	jmp	0x88e	; 0x88e <__fp_szero>

000008c0 <__mulsf3x>:
 8c0:	0e 94 24 04 	call	0x848	; 0x848 <__fp_split3>
 8c4:	70 f3       	brcs	.-36     	; 0x8a2 <__mulsf3+0x8>

000008c6 <__mulsf3_pse>:
 8c6:	95 9f       	mul	r25, r21
 8c8:	c1 f3       	breq	.-16     	; 0x8ba <__mulsf3+0x20>
 8ca:	95 0f       	add	r25, r21
 8cc:	50 e0       	ldi	r21, 0x00	; 0
 8ce:	55 1f       	adc	r21, r21
 8d0:	62 9f       	mul	r22, r18
 8d2:	f0 01       	movw	r30, r0
 8d4:	72 9f       	mul	r23, r18
 8d6:	bb 27       	eor	r27, r27
 8d8:	f0 0d       	add	r31, r0
 8da:	b1 1d       	adc	r27, r1
 8dc:	63 9f       	mul	r22, r19
 8de:	aa 27       	eor	r26, r26
 8e0:	f0 0d       	add	r31, r0
 8e2:	b1 1d       	adc	r27, r1
 8e4:	aa 1f       	adc	r26, r26
 8e6:	64 9f       	mul	r22, r20
 8e8:	66 27       	eor	r22, r22
 8ea:	b0 0d       	add	r27, r0
 8ec:	a1 1d       	adc	r26, r1
 8ee:	66 1f       	adc	r22, r22
 8f0:	82 9f       	mul	r24, r18
 8f2:	22 27       	eor	r18, r18
 8f4:	b0 0d       	add	r27, r0
 8f6:	a1 1d       	adc	r26, r1
 8f8:	62 1f       	adc	r22, r18
 8fa:	73 9f       	mul	r23, r19
 8fc:	b0 0d       	add	r27, r0
 8fe:	a1 1d       	adc	r26, r1
 900:	62 1f       	adc	r22, r18
 902:	83 9f       	mul	r24, r19
 904:	a0 0d       	add	r26, r0
 906:	61 1d       	adc	r22, r1
 908:	22 1f       	adc	r18, r18
 90a:	74 9f       	mul	r23, r20
 90c:	33 27       	eor	r19, r19
 90e:	a0 0d       	add	r26, r0
 910:	61 1d       	adc	r22, r1
 912:	23 1f       	adc	r18, r19
 914:	84 9f       	mul	r24, r20
 916:	60 0d       	add	r22, r0
 918:	21 1d       	adc	r18, r1
 91a:	82 2f       	mov	r24, r18
 91c:	76 2f       	mov	r23, r22
 91e:	6a 2f       	mov	r22, r26
 920:	11 24       	eor	r1, r1
 922:	9f 57       	subi	r25, 0x7F	; 127
 924:	50 40       	sbci	r21, 0x00	; 0
 926:	9a f0       	brmi	.+38     	; 0x94e <__mulsf3_pse+0x88>
 928:	f1 f0       	breq	.+60     	; 0x966 <__mulsf3_pse+0xa0>
 92a:	88 23       	and	r24, r24
 92c:	4a f0       	brmi	.+18     	; 0x940 <__mulsf3_pse+0x7a>
 92e:	ee 0f       	add	r30, r30
 930:	ff 1f       	adc	r31, r31
 932:	bb 1f       	adc	r27, r27
 934:	66 1f       	adc	r22, r22
 936:	77 1f       	adc	r23, r23
 938:	88 1f       	adc	r24, r24
 93a:	91 50       	subi	r25, 0x01	; 1
 93c:	50 40       	sbci	r21, 0x00	; 0
 93e:	a9 f7       	brne	.-22     	; 0x92a <__mulsf3_pse+0x64>
 940:	9e 3f       	cpi	r25, 0xFE	; 254
 942:	51 05       	cpc	r21, r1
 944:	80 f0       	brcs	.+32     	; 0x966 <__mulsf3_pse+0xa0>
 946:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_inf>
 94a:	0c 94 47 04 	jmp	0x88e	; 0x88e <__fp_szero>
 94e:	5f 3f       	cpi	r21, 0xFF	; 255
 950:	e4 f3       	brlt	.-8      	; 0x94a <__mulsf3_pse+0x84>
 952:	98 3e       	cpi	r25, 0xE8	; 232
 954:	d4 f3       	brlt	.-12     	; 0x94a <__mulsf3_pse+0x84>
 956:	86 95       	lsr	r24
 958:	77 95       	ror	r23
 95a:	67 95       	ror	r22
 95c:	b7 95       	ror	r27
 95e:	f7 95       	ror	r31
 960:	e7 95       	ror	r30
 962:	9f 5f       	subi	r25, 0xFF	; 255
 964:	c1 f7       	brne	.-16     	; 0x956 <__mulsf3_pse+0x90>
 966:	fe 2b       	or	r31, r30
 968:	88 0f       	add	r24, r24
 96a:	91 1d       	adc	r25, r1
 96c:	96 95       	lsr	r25
 96e:	87 95       	ror	r24
 970:	97 f9       	bld	r25, 7
 972:	08 95       	ret

00000974 <malloc>:
 974:	cf 93       	push	r28
 976:	df 93       	push	r29
 978:	82 30       	cpi	r24, 0x02	; 2
 97a:	91 05       	cpc	r25, r1
 97c:	10 f4       	brcc	.+4      	; 0x982 <malloc+0xe>
 97e:	82 e0       	ldi	r24, 0x02	; 2
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	e0 91 80 00 	lds	r30, 0x0080
 986:	f0 91 81 00 	lds	r31, 0x0081
 98a:	20 e0       	ldi	r18, 0x00	; 0
 98c:	30 e0       	ldi	r19, 0x00	; 0
 98e:	c0 e0       	ldi	r28, 0x00	; 0
 990:	d0 e0       	ldi	r29, 0x00	; 0
 992:	30 97       	sbiw	r30, 0x00	; 0
 994:	11 f1       	breq	.+68     	; 0x9da <malloc+0x66>
 996:	40 81       	ld	r20, Z
 998:	51 81       	ldd	r21, Z+1	; 0x01
 99a:	48 17       	cp	r20, r24
 99c:	59 07       	cpc	r21, r25
 99e:	c0 f0       	brcs	.+48     	; 0x9d0 <malloc+0x5c>
 9a0:	48 17       	cp	r20, r24
 9a2:	59 07       	cpc	r21, r25
 9a4:	61 f4       	brne	.+24     	; 0x9be <malloc+0x4a>
 9a6:	82 81       	ldd	r24, Z+2	; 0x02
 9a8:	93 81       	ldd	r25, Z+3	; 0x03
 9aa:	20 97       	sbiw	r28, 0x00	; 0
 9ac:	19 f0       	breq	.+6      	; 0x9b4 <malloc+0x40>
 9ae:	9b 83       	std	Y+3, r25	; 0x03
 9b0:	8a 83       	std	Y+2, r24	; 0x02
 9b2:	2b c0       	rjmp	.+86     	; 0xa0a <malloc+0x96>
 9b4:	90 93 81 00 	sts	0x0081, r25
 9b8:	80 93 80 00 	sts	0x0080, r24
 9bc:	26 c0       	rjmp	.+76     	; 0xa0a <malloc+0x96>
 9be:	21 15       	cp	r18, r1
 9c0:	31 05       	cpc	r19, r1
 9c2:	19 f0       	breq	.+6      	; 0x9ca <malloc+0x56>
 9c4:	42 17       	cp	r20, r18
 9c6:	53 07       	cpc	r21, r19
 9c8:	18 f4       	brcc	.+6      	; 0x9d0 <malloc+0x5c>
 9ca:	9a 01       	movw	r18, r20
 9cc:	be 01       	movw	r22, r28
 9ce:	df 01       	movw	r26, r30
 9d0:	ef 01       	movw	r28, r30
 9d2:	02 80       	ldd	r0, Z+2	; 0x02
 9d4:	f3 81       	ldd	r31, Z+3	; 0x03
 9d6:	e0 2d       	mov	r30, r0
 9d8:	dc cf       	rjmp	.-72     	; 0x992 <malloc+0x1e>
 9da:	21 15       	cp	r18, r1
 9dc:	31 05       	cpc	r19, r1
 9de:	09 f1       	breq	.+66     	; 0xa22 <malloc+0xae>
 9e0:	28 1b       	sub	r18, r24
 9e2:	39 0b       	sbc	r19, r25
 9e4:	24 30       	cpi	r18, 0x04	; 4
 9e6:	31 05       	cpc	r19, r1
 9e8:	90 f4       	brcc	.+36     	; 0xa0e <malloc+0x9a>
 9ea:	12 96       	adiw	r26, 0x02	; 2
 9ec:	8d 91       	ld	r24, X+
 9ee:	9c 91       	ld	r25, X
 9f0:	13 97       	sbiw	r26, 0x03	; 3
 9f2:	61 15       	cp	r22, r1
 9f4:	71 05       	cpc	r23, r1
 9f6:	21 f0       	breq	.+8      	; 0xa00 <malloc+0x8c>
 9f8:	fb 01       	movw	r30, r22
 9fa:	93 83       	std	Z+3, r25	; 0x03
 9fc:	82 83       	std	Z+2, r24	; 0x02
 9fe:	04 c0       	rjmp	.+8      	; 0xa08 <malloc+0x94>
 a00:	90 93 81 00 	sts	0x0081, r25
 a04:	80 93 80 00 	sts	0x0080, r24
 a08:	fd 01       	movw	r30, r26
 a0a:	32 96       	adiw	r30, 0x02	; 2
 a0c:	44 c0       	rjmp	.+136    	; 0xa96 <malloc+0x122>
 a0e:	fd 01       	movw	r30, r26
 a10:	e2 0f       	add	r30, r18
 a12:	f3 1f       	adc	r31, r19
 a14:	81 93       	st	Z+, r24
 a16:	91 93       	st	Z+, r25
 a18:	22 50       	subi	r18, 0x02	; 2
 a1a:	31 09       	sbc	r19, r1
 a1c:	2d 93       	st	X+, r18
 a1e:	3c 93       	st	X, r19
 a20:	3a c0       	rjmp	.+116    	; 0xa96 <malloc+0x122>
 a22:	20 91 7e 00 	lds	r18, 0x007E
 a26:	30 91 7f 00 	lds	r19, 0x007F
 a2a:	23 2b       	or	r18, r19
 a2c:	41 f4       	brne	.+16     	; 0xa3e <malloc+0xca>
 a2e:	20 91 7a 00 	lds	r18, 0x007A
 a32:	30 91 7b 00 	lds	r19, 0x007B
 a36:	30 93 7f 00 	sts	0x007F, r19
 a3a:	20 93 7e 00 	sts	0x007E, r18
 a3e:	20 91 78 00 	lds	r18, 0x0078
 a42:	30 91 79 00 	lds	r19, 0x0079
 a46:	21 15       	cp	r18, r1
 a48:	31 05       	cpc	r19, r1
 a4a:	41 f4       	brne	.+16     	; 0xa5c <malloc+0xe8>
 a4c:	2d b7       	in	r18, 0x3d	; 61
 a4e:	3e b7       	in	r19, 0x3e	; 62
 a50:	40 91 7c 00 	lds	r20, 0x007C
 a54:	50 91 7d 00 	lds	r21, 0x007D
 a58:	24 1b       	sub	r18, r20
 a5a:	35 0b       	sbc	r19, r21
 a5c:	e0 91 7e 00 	lds	r30, 0x007E
 a60:	f0 91 7f 00 	lds	r31, 0x007F
 a64:	e2 17       	cp	r30, r18
 a66:	f3 07       	cpc	r31, r19
 a68:	a0 f4       	brcc	.+40     	; 0xa92 <malloc+0x11e>
 a6a:	2e 1b       	sub	r18, r30
 a6c:	3f 0b       	sbc	r19, r31
 a6e:	28 17       	cp	r18, r24
 a70:	39 07       	cpc	r19, r25
 a72:	78 f0       	brcs	.+30     	; 0xa92 <malloc+0x11e>
 a74:	ac 01       	movw	r20, r24
 a76:	4e 5f       	subi	r20, 0xFE	; 254
 a78:	5f 4f       	sbci	r21, 0xFF	; 255
 a7a:	24 17       	cp	r18, r20
 a7c:	35 07       	cpc	r19, r21
 a7e:	48 f0       	brcs	.+18     	; 0xa92 <malloc+0x11e>
 a80:	4e 0f       	add	r20, r30
 a82:	5f 1f       	adc	r21, r31
 a84:	50 93 7f 00 	sts	0x007F, r21
 a88:	40 93 7e 00 	sts	0x007E, r20
 a8c:	81 93       	st	Z+, r24
 a8e:	91 93       	st	Z+, r25
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <malloc+0x122>
 a92:	e0 e0       	ldi	r30, 0x00	; 0
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	cf 01       	movw	r24, r30
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	08 95       	ret

00000a9e <free>:
 a9e:	0f 93       	push	r16
 aa0:	1f 93       	push	r17
 aa2:	cf 93       	push	r28
 aa4:	df 93       	push	r29
 aa6:	00 97       	sbiw	r24, 0x00	; 0
 aa8:	09 f4       	brne	.+2      	; 0xaac <free+0xe>
 aaa:	8c c0       	rjmp	.+280    	; 0xbc4 <free+0x126>
 aac:	fc 01       	movw	r30, r24
 aae:	32 97       	sbiw	r30, 0x02	; 2
 ab0:	13 82       	std	Z+3, r1	; 0x03
 ab2:	12 82       	std	Z+2, r1	; 0x02
 ab4:	00 91 80 00 	lds	r16, 0x0080
 ab8:	10 91 81 00 	lds	r17, 0x0081
 abc:	01 15       	cp	r16, r1
 abe:	11 05       	cpc	r17, r1
 ac0:	81 f4       	brne	.+32     	; 0xae2 <free+0x44>
 ac2:	20 81       	ld	r18, Z
 ac4:	31 81       	ldd	r19, Z+1	; 0x01
 ac6:	82 0f       	add	r24, r18
 ac8:	93 1f       	adc	r25, r19
 aca:	20 91 7e 00 	lds	r18, 0x007E
 ace:	30 91 7f 00 	lds	r19, 0x007F
 ad2:	28 17       	cp	r18, r24
 ad4:	39 07       	cpc	r19, r25
 ad6:	79 f5       	brne	.+94     	; 0xb36 <free+0x98>
 ad8:	f0 93 7f 00 	sts	0x007F, r31
 adc:	e0 93 7e 00 	sts	0x007E, r30
 ae0:	71 c0       	rjmp	.+226    	; 0xbc4 <free+0x126>
 ae2:	d8 01       	movw	r26, r16
 ae4:	40 e0       	ldi	r20, 0x00	; 0
 ae6:	50 e0       	ldi	r21, 0x00	; 0
 ae8:	ae 17       	cp	r26, r30
 aea:	bf 07       	cpc	r27, r31
 aec:	50 f4       	brcc	.+20     	; 0xb02 <free+0x64>
 aee:	12 96       	adiw	r26, 0x02	; 2
 af0:	2d 91       	ld	r18, X+
 af2:	3c 91       	ld	r19, X
 af4:	13 97       	sbiw	r26, 0x03	; 3
 af6:	ad 01       	movw	r20, r26
 af8:	21 15       	cp	r18, r1
 afa:	31 05       	cpc	r19, r1
 afc:	09 f1       	breq	.+66     	; 0xb40 <free+0xa2>
 afe:	d9 01       	movw	r26, r18
 b00:	f3 cf       	rjmp	.-26     	; 0xae8 <free+0x4a>
 b02:	9d 01       	movw	r18, r26
 b04:	da 01       	movw	r26, r20
 b06:	33 83       	std	Z+3, r19	; 0x03
 b08:	22 83       	std	Z+2, r18	; 0x02
 b0a:	60 81       	ld	r22, Z
 b0c:	71 81       	ldd	r23, Z+1	; 0x01
 b0e:	86 0f       	add	r24, r22
 b10:	97 1f       	adc	r25, r23
 b12:	82 17       	cp	r24, r18
 b14:	93 07       	cpc	r25, r19
 b16:	69 f4       	brne	.+26     	; 0xb32 <free+0x94>
 b18:	ec 01       	movw	r28, r24
 b1a:	28 81       	ld	r18, Y
 b1c:	39 81       	ldd	r19, Y+1	; 0x01
 b1e:	26 0f       	add	r18, r22
 b20:	37 1f       	adc	r19, r23
 b22:	2e 5f       	subi	r18, 0xFE	; 254
 b24:	3f 4f       	sbci	r19, 0xFF	; 255
 b26:	31 83       	std	Z+1, r19	; 0x01
 b28:	20 83       	st	Z, r18
 b2a:	8a 81       	ldd	r24, Y+2	; 0x02
 b2c:	9b 81       	ldd	r25, Y+3	; 0x03
 b2e:	93 83       	std	Z+3, r25	; 0x03
 b30:	82 83       	std	Z+2, r24	; 0x02
 b32:	45 2b       	or	r20, r21
 b34:	29 f4       	brne	.+10     	; 0xb40 <free+0xa2>
 b36:	f0 93 81 00 	sts	0x0081, r31
 b3a:	e0 93 80 00 	sts	0x0080, r30
 b3e:	42 c0       	rjmp	.+132    	; 0xbc4 <free+0x126>
 b40:	13 96       	adiw	r26, 0x03	; 3
 b42:	fc 93       	st	X, r31
 b44:	ee 93       	st	-X, r30
 b46:	12 97       	sbiw	r26, 0x02	; 2
 b48:	ed 01       	movw	r28, r26
 b4a:	49 91       	ld	r20, Y+
 b4c:	59 91       	ld	r21, Y+
 b4e:	9e 01       	movw	r18, r28
 b50:	24 0f       	add	r18, r20
 b52:	35 1f       	adc	r19, r21
 b54:	e2 17       	cp	r30, r18
 b56:	f3 07       	cpc	r31, r19
 b58:	71 f4       	brne	.+28     	; 0xb76 <free+0xd8>
 b5a:	80 81       	ld	r24, Z
 b5c:	91 81       	ldd	r25, Z+1	; 0x01
 b5e:	84 0f       	add	r24, r20
 b60:	95 1f       	adc	r25, r21
 b62:	02 96       	adiw	r24, 0x02	; 2
 b64:	11 96       	adiw	r26, 0x01	; 1
 b66:	9c 93       	st	X, r25
 b68:	8e 93       	st	-X, r24
 b6a:	82 81       	ldd	r24, Z+2	; 0x02
 b6c:	93 81       	ldd	r25, Z+3	; 0x03
 b6e:	13 96       	adiw	r26, 0x03	; 3
 b70:	9c 93       	st	X, r25
 b72:	8e 93       	st	-X, r24
 b74:	12 97       	sbiw	r26, 0x02	; 2
 b76:	e0 e0       	ldi	r30, 0x00	; 0
 b78:	f0 e0       	ldi	r31, 0x00	; 0
 b7a:	d8 01       	movw	r26, r16
 b7c:	12 96       	adiw	r26, 0x02	; 2
 b7e:	8d 91       	ld	r24, X+
 b80:	9c 91       	ld	r25, X
 b82:	13 97       	sbiw	r26, 0x03	; 3
 b84:	00 97       	sbiw	r24, 0x00	; 0
 b86:	19 f0       	breq	.+6      	; 0xb8e <free+0xf0>
 b88:	f8 01       	movw	r30, r16
 b8a:	8c 01       	movw	r16, r24
 b8c:	f6 cf       	rjmp	.-20     	; 0xb7a <free+0xdc>
 b8e:	8d 91       	ld	r24, X+
 b90:	9c 91       	ld	r25, X
 b92:	98 01       	movw	r18, r16
 b94:	2e 5f       	subi	r18, 0xFE	; 254
 b96:	3f 4f       	sbci	r19, 0xFF	; 255
 b98:	82 0f       	add	r24, r18
 b9a:	93 1f       	adc	r25, r19
 b9c:	20 91 7e 00 	lds	r18, 0x007E
 ba0:	30 91 7f 00 	lds	r19, 0x007F
 ba4:	28 17       	cp	r18, r24
 ba6:	39 07       	cpc	r19, r25
 ba8:	69 f4       	brne	.+26     	; 0xbc4 <free+0x126>
 baa:	30 97       	sbiw	r30, 0x00	; 0
 bac:	29 f4       	brne	.+10     	; 0xbb8 <free+0x11a>
 bae:	10 92 81 00 	sts	0x0081, r1
 bb2:	10 92 80 00 	sts	0x0080, r1
 bb6:	02 c0       	rjmp	.+4      	; 0xbbc <free+0x11e>
 bb8:	13 82       	std	Z+3, r1	; 0x03
 bba:	12 82       	std	Z+2, r1	; 0x02
 bbc:	10 93 7f 00 	sts	0x007F, r17
 bc0:	00 93 7e 00 	sts	0x007E, r16
 bc4:	df 91       	pop	r29
 bc6:	cf 91       	pop	r28
 bc8:	1f 91       	pop	r17
 bca:	0f 91       	pop	r16
 bcc:	08 95       	ret

00000bce <_exit>:
 bce:	f8 94       	cli

00000bd0 <__stop_program>:
 bd0:	ff cf       	rjmp	.-2      	; 0xbd0 <__stop_program>
