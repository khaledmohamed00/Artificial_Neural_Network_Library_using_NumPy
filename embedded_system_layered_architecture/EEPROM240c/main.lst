
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000216  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001098  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ce3  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002007  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002018  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  64:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <EEPROM_Init>:
#include <avr/io.h>
#include "IIC.h"

void EEPROM_Init(void)
{
  I2C_Init();
  6c:	0c 94 c1 00 	jmp	0x182	; 0x182 <I2C_Init>

00000070 <EEPROM_WriteByte>:
}

unsigned char EEPROM_WriteByte(unsigned int addr, unsigned char data)
{
  70:	1f 93       	push	r17
  72:	cf 93       	push	r28
  74:	df 93       	push	r29
  76:	ec 01       	movw	r28, r24
  78:	16 2f       	mov	r17, r22
  unsigned char state = 0;
  unsigned char _3MSBAddr = 0;

  // Start TWI
  TWIStart();
  7a:	0e 94 cc 00 	call	0x198	; 0x198 <TWIStart>
  // Get State
  state = TWIGetStatus();
  7e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <TWIGetStatus>
  // Check if TWI Start
  if (state != TW_START)
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	11 f0       	breq	.+4      	; 0x8a <EEPROM_WriteByte+0x1a>
  {
      PORTA |= 0x01;
  86:	d8 9a       	sbi	0x1b, 0	; 27
  88:	11 c0       	rjmp	.+34     	; 0xac <EEPROM_WriteByte+0x3c>
  // Send Slave Address -> For EEPROM 24cXX
  // The Slave Address of Chip is 0b1010, so have Three bits free
  // We can take a part from 11 bit address and send it with Device Add
  // Send 3 MSBs From Address "As Device Address"
  // Set Action To Write -> 0
  _3MSBAddr = ((unsigned char) ((addr & 0x0700) >> 7));
  8a:	9e 01       	movw	r18, r28
  8c:	22 27       	eor	r18, r18
  8e:	37 70       	andi	r19, 0x07	; 7
  90:	c9 01       	movw	r24, r18
  92:	88 0f       	add	r24, r24
  94:	89 2f       	mov	r24, r25
  96:	88 1f       	adc	r24, r24
  98:	99 0b       	sbc	r25, r25
  9a:	91 95       	neg	r25
   TWIWrite(0xA0|_3MSBAddr);
  9c:	80 6a       	ori	r24, 0xA0	; 160
  9e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <TWIWrite>
  //TWIWrite(0xA0);
  // Get Status
  state = TWIGetStatus();
  a2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <TWIGetStatus>
  // Check if it is TW_MT_SLA_ACK
  if (state != TW_MT_SLA_ACK)
  a6:	88 31       	cpi	r24, 0x18	; 24
  a8:	19 f0       	breq	.+6      	; 0xb0 <EEPROM_WriteByte+0x40>
  {
    PORTA |= 0x02;
  aa:	d9 9a       	sbi	0x1b, 1	; 27
    return 0;
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	13 c0       	rjmp	.+38     	; 0xd6 <EEPROM_WriteByte+0x66>
  }

  // Write the Rest of Location Address(8 Bits)
  TWIWrite((unsigned char) addr);
  b0:	8c 2f       	mov	r24, r28
  b2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <TWIWrite>

  // Get State
  state = TWIGetStatus();
  b6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <TWIGetStatus>

  // check if it is TW_MT_DATA_ACK
  if (state != TW_MT_DATA_ACK)
  ba:	88 32       	cpi	r24, 0x28	; 40
  bc:	11 f0       	breq	.+4      	; 0xc2 <EEPROM_WriteByte+0x52>
  {
   PORTA |= 0x04;
  be:	da 9a       	sbi	0x1b, 2	; 27
  c0:	f5 cf       	rjmp	.-22     	; 0xac <EEPROM_WriteByte+0x3c>
    return 0;
  }

  // Send Data
  TWIWrite(data);
  c2:	81 2f       	mov	r24, r17
  c4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <TWIWrite>

  // Get Status
  state = TWIGetStatus();
  c8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <TWIGetStatus>

  // Check if it is TW_MT_DATA_ACK
  if (state != TW_MT_DATA_ACK)
  cc:	88 32       	cpi	r24, 0x28	; 40
  ce:	69 f7       	brne	.-38     	; 0xaa <EEPROM_WriteByte+0x3a>
       PORTA |= 0x02;
    return 0;
  }

  // TWI Stop
  TWIStop();
  d0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <TWIStop>
  // Return Done
  return 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	08 95       	ret

000000de <EEPROM_ReadByte>:

unsigned char EEPROM_ReadByte(unsigned int addr, unsigned char *data)
{
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	8c 01       	movw	r16, r24
  ec:	7b 01       	movw	r14, r22
  unsigned char state = 0;
  unsigned char _3MSBAddr = 0;

  // Start TWI
  TWIStart();
  ee:	0e 94 cc 00 	call	0x198	; 0x198 <TWIStart>

  // Get State
  state = TWIGetStatus();
  f2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <TWIGetStatus>

  // Check if TWI Start
  if (state != TW_START)
  f6:	88 30       	cpi	r24, 0x08	; 8
  f8:	a1 f5       	brne	.+104    	; 0x162 <EEPROM_ReadByte+0x84>
  // Send Slave Address -> For EEPROM 24cXX
  // The Slave Address of Chip is 0b1010, so have Three bits free
  // We can take a part from 11 bit address and send it with Device Add
  // Send 3 MSBs From Address "As Device Address"
  // Set Action to write -> 0
  _3MSBAddr = ((unsigned char) ((addr & 0x0700) >> 7));
  fa:	e8 01       	movw	r28, r16
  fc:	cc 27       	eor	r28, r28
  fe:	d7 70       	andi	r29, 0x07	; 7
 100:	cc 0f       	add	r28, r28
 102:	cd 2f       	mov	r28, r29
 104:	cc 1f       	adc	r28, r28
 106:	dd 0b       	sbc	r29, r29
 108:	d1 95       	neg	r29
   TWIWrite(0xA0|_3MSBAddr);
 10a:	8c 2f       	mov	r24, r28
 10c:	80 6a       	ori	r24, 0xA0	; 160
 10e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <TWIWrite>
  //TWIWrite(0xA0);

  // Get Status
  state = TWIGetStatus();
 112:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <TWIGetStatus>

  // Check if it is TW_MT_SLA_ACK
  if (state != TW_MT_SLA_ACK)
 116:	88 31       	cpi	r24, 0x18	; 24
 118:	31 f5       	brne	.+76     	; 0x166 <EEPROM_ReadByte+0x88>
    return 2;

  // Write the Rest of Location Address(8 Bits)
  TWIWrite((unsigned char) addr);
 11a:	80 2f       	mov	r24, r16
 11c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <TWIWrite>

  // Get State
  state = TWIGetStatus();
 120:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <TWIGetStatus>

  // check if it is TW_MT_DATA_ACK
  if (state != TW_MT_DATA_ACK)
 124:	88 32       	cpi	r24, 0x28	; 40
 126:	09 f5       	brne	.+66     	; 0x16a <EEPROM_ReadByte+0x8c>

  // Now The Master Will Be Master Reciever

  // Now we need to Send Start Bit Again
  // Start TWI
  TWIStart();
 128:	0e 94 cc 00 	call	0x198	; 0x198 <TWIStart>

  // Get State
  state = TWIGetStatus();
 12c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <TWIGetStatus>

  // Check if TW_REP_START
  if (state != TW_REP_START)
 130:	80 31       	cpi	r24, 0x10	; 16
 132:	e9 f4       	brne	.+58     	; 0x16e <EEPROM_ReadByte+0x90>
  // The Slave Address of Chip is 0b1010, so have Three bits free
  // We can take a part from 11 bit address and send it with Device Add
  // Send 3 MSBs From Address "As Device Address"
  // Set Action to Read -> 1
  _3MSBAddr = ((unsigned char) ((addr & 0x0700) >> 7));
   TWIWrite(0xA0|_3MSBAddr|1);
 134:	8c 2f       	mov	r24, r28
 136:	81 6a       	ori	r24, 0xA1	; 161
 138:	0e 94 d5 00 	call	0x1aa	; 0x1aa <TWIWrite>
//  TWIWrite(0xA0 | 1);
  // Get Status
  state = TWIGetStatus();
 13c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <TWIGetStatus>

  // Check if it is TW_MR_SLA_ACK
  if (state != TW_MR_SLA_ACK)
 140:	80 34       	cpi	r24, 0x40	; 64
 142:	b9 f4       	brne	.+46     	; 0x172 <EEPROM_ReadByte+0x94>
    return 5;

  // Read Data
  // *data = TWIReadNACK();
  *data = TWIReadACK();
 144:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TWIReadACK>
 148:	f7 01       	movw	r30, r14
 14a:	80 83       	st	Z, r24

  // Get Status
  state = TWIGetStatus();
 14c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <TWIGetStatus>

  // Check if it is
  if (state != TW_MR_DATA_ACK)
 150:	80 35       	cpi	r24, 0x50	; 80
 152:	19 f0       	breq	.+6      	; 0x15a <EEPROM_ReadByte+0x7c>
  {
    PORTA |= 0x04;
 154:	da 9a       	sbi	0x1b, 2	; 27
    return 6;
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	0d c0       	rjmp	.+26     	; 0x174 <EEPROM_ReadByte+0x96>
  }
  // TWI Stop
  TWIStop();
 15a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <TWIStop>

  // Return Done
  return 1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	09 c0       	rjmp	.+18     	; 0x174 <EEPROM_ReadByte+0x96>
  // Get State
  state = TWIGetStatus();

  // Check if TWI Start
  if (state != TW_START)
    return 0;
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	07 c0       	rjmp	.+14     	; 0x174 <EEPROM_ReadByte+0x96>
  // Get Status
  state = TWIGetStatus();

  // Check if it is TW_MT_SLA_ACK
  if (state != TW_MT_SLA_ACK)
    return 2;
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	05 c0       	rjmp	.+10     	; 0x174 <EEPROM_ReadByte+0x96>
  // Get State
  state = TWIGetStatus();

  // check if it is TW_MT_DATA_ACK
  if (state != TW_MT_DATA_ACK)
    return 3;
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	03 c0       	rjmp	.+6      	; 0x174 <EEPROM_ReadByte+0x96>
  // Get State
  state = TWIGetStatus();

  // Check if TW_REP_START
  if (state != TW_REP_START)
    return 4;
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	01 c0       	rjmp	.+2      	; 0x174 <EEPROM_ReadByte+0x96>
  // Get Status
  state = TWIGetStatus();

  // Check if it is TW_MR_SLA_ACK
  if (state != TW_MR_SLA_ACK)
    return 5;
 172:	85 e0       	ldi	r24, 0x05	; 5
  // TWI Stop
  TWIStop();

  // Return Done
  return 1;
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	ff 90       	pop	r15
 17e:	ef 90       	pop	r14
 180:	08 95       	ret

00000182 <I2C_Init>:

void I2C_Init(void)
{
  // TWI initialization
  // Bit Rate: 400.000 kHz
  TWBR = 72;
 182:	88 e4       	ldi	r24, 0x48	; 72
 184:	80 b9       	out	0x00, r24	; 0
  // Two Wire Bus Slave Address: 0x1
  // General Call Recognition: Off
  TWAR = 0x02;
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	82 b9       	out	0x02, r24	; 2
  // Generate Acknowledge Pulse: On
  // TWI Interrupt: Off
  TWCR = 0x44;
 18a:	84 e4       	ldi	r24, 0x44	; 68
 18c:	86 bf       	out	0x36, r24	; 54
  TWSR = 0x00;
 18e:	11 b8       	out	0x01, r1	; 1
  TWSR &= (~((1 << TWPS1) | (1 << TWPS0)));
 190:	81 b1       	in	r24, 0x01	; 1
 192:	8c 7f       	andi	r24, 0xFC	; 252
 194:	81 b9       	out	0x01, r24	; 1
 196:	08 95       	ret

00000198 <TWIStart>:
}

void TWIStart(void)
{
  // Send Start Condition
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 198:	84 ea       	ldi	r24, 0xA4	; 164
 19a:	86 bf       	out	0x36, r24	; 54

  // Wait for TWINT flag set in TWCR Register
  while (!(TWCR & (1 << TWINT)))
 19c:	06 b6       	in	r0, 0x36	; 54
 19e:	07 fe       	sbrs	r0, 7
 1a0:	fd cf       	rjmp	.-6      	; 0x19c <TWIStart+0x4>
    ;
}
 1a2:	08 95       	ret

000001a4 <TWIStop>:

void TWIStop(void)
{
  // Send Stop Condition
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 1a4:	84 e9       	ldi	r24, 0x94	; 148
 1a6:	86 bf       	out	0x36, r24	; 54
 1a8:	08 95       	ret

000001aa <TWIWrite>:
}

void TWIWrite(unsigned char data)
{
  // Put data On TWI Register
  TWDR = data;
 1aa:	83 b9       	out	0x03, r24	; 3
  // Send Data
  TWCR = (1 << TWINT) | (1 << TWEN);
 1ac:	84 e8       	ldi	r24, 0x84	; 132
 1ae:	86 bf       	out	0x36, r24	; 54
  // Wait for TWINT flag set in TWCR Register
  while (!(TWCR & (1 << TWINT)))
 1b0:	06 b6       	in	r0, 0x36	; 54
 1b2:	07 fe       	sbrs	r0, 7
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <TWIWrite+0x6>
    ;
}
 1b6:	08 95       	ret

000001b8 <TWIReadACK>:

unsigned char TWIReadACK(void)
{
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);    //enable Ack
 1b8:	84 ec       	ldi	r24, 0xC4	; 196
 1ba:	86 bf       	out	0x36, r24	; 54
  // Wait for TWINT flag set in TWCR Register
  while (!(TWCR & (1 << TWINT)))
 1bc:	06 b6       	in	r0, 0x36	; 54
 1be:	07 fe       	sbrs	r0, 7
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <TWIReadACK+0x4>
    ;
  // Read Data
  return TWDR;
 1c2:	83 b1       	in	r24, 0x03	; 3
}
 1c4:	08 95       	ret

000001c6 <TWIReadNACK>:

unsigned char TWIReadNACK(void)
{
  TWCR = (1 << TWINT) | (1 << TWEN);
 1c6:	84 e8       	ldi	r24, 0x84	; 132
 1c8:	86 bf       	out	0x36, r24	; 54
  // Wait for TWINT flag set in TWCR Register
  while (!(TWCR & (1 << TWINT)))
 1ca:	06 b6       	in	r0, 0x36	; 54
 1cc:	07 fe       	sbrs	r0, 7
 1ce:	fd cf       	rjmp	.-6      	; 0x1ca <TWIReadNACK+0x4>
    ;
  // Read Data
  return TWDR;
 1d0:	83 b1       	in	r24, 0x03	; 3
}
 1d2:	08 95       	ret

000001d4 <TWIGetStatus>:
 1d4:	81 b1       	in	r24, 0x01	; 1
 1d6:	88 7f       	andi	r24, 0xF8	; 248
 1d8:	08 95       	ret

000001da <main>:
#include<avr/io.h>
#include"eeprom.h"
#include<util/delay.h>
int main(void){
unsigned char *data;
DDRA=0xff;
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	8a bb       	out	0x1a, r24	; 26
//PORTA=0xff;
EEPROM_Init();
 1de:	0e 94 36 00 	call	0x6c	; 0x6c <EEPROM_Init>
char flag_w=EEPROM_WriteByte(0x02,0x03);
 1e2:	63 e0       	ldi	r22, 0x03	; 3
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 38 00 	call	0x70	; 0x70 <EEPROM_WriteByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	80 e7       	ldi	r24, 0x70	; 112
 1f0:	92 e0       	ldi	r25, 0x02	; 2
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x18>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x22>
 1fc:	00 00       	nop
_delay_ms(100);
char flag_r=EEPROM_ReadByte(0x02,data);
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	be 01       	movw	r22, r28
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 6f 00 	call	0xde	; 0xde <EEPROM_ReadByte>
PORTA=*data;
 20c:	88 81       	ld	r24, Y
 20e:	8b bb       	out	0x1b, r24	; 27
//PORTA=0xff;
while(1){



}
 210:	ff cf       	rjmp	.-2      	; 0x210 <main+0x36>

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
