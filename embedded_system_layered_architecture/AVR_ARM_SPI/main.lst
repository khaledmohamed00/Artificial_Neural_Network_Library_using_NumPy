
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c4  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000009c0  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c49  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001741  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001754  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <spi_slave_init>:
#include<avr/interrupt.h>
#include"spi.h"


void spi_slave_init(void){
    DDRB &= ~((1<<5)|(1<<6)|(1<<7));   // SCK, MOSI and SS as inputs
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8f 71       	andi	r24, 0x1F	; 31
  70:	87 bb       	out	0x17, r24	; 23
    DDRB |= (1<<4);                    // MISO as output
  72:	bc 9a       	sbi	0x17, 4	; 23

    SPCR &= ~(1<<MSTR);                // Set as slave 
  74:	6c 98       	cbi	0x0d, 4	; 13

    SPCR |= (1<<SPE); 
  76:	6e 9a       	sbi	0x0d, 6	; 13
  78:	08 95       	ret

0000007a <spi_master_init>:

}

void spi_master_init(void){
DDRB |= (1<<2)|(1<<3)|(1<<5);    // SCK, MOSI and SS as outputs
  7a:	87 b3       	in	r24, 0x17	; 23
  7c:	8c 62       	ori	r24, 0x2C	; 44
  7e:	87 bb       	out	0x17, r24	; 23
    DDRB &= ~(1<<4);                 // MISO as input
  80:	bc 98       	cbi	0x17, 4	; 23

    SPCR |= (1<<MSTR);               // Set as Master
  82:	6c 9a       	sbi	0x0d, 4	; 13
    SPCR |= (1<<SPR0)|(1<<SPR1);     // divided clock by 128
  84:	8d b1       	in	r24, 0x0d	; 13
  86:	83 60       	ori	r24, 0x03	; 3
  88:	8d b9       	out	0x0d, r24	; 13
    SPCR |= (1<<SPE);                // Enable SPI
  8a:	6e 9a       	sbi	0x0d, 6	; 13
  8c:	08 95       	ret

0000008e <spi_send_receive>:
}

unsigned char spi_send_receive(unsigned char data){

SPDR = data;                 // send the data
  8e:	8f b9       	out	0x0f, r24	; 15
        while(!(SPSR & (1<<SPIF)));  // wait untiltransmission is complete
  90:	77 9b       	sbis	0x0e, 7	; 14
  92:	fe cf       	rjmp	.-4      	; 0x90 <spi_send_receive+0x2>
         return SPDR;
  94:	8f b1       	in	r24, 0x0f	; 15
} 
  96:	08 95       	ret

00000098 <SPI_SlaveReceive>:

unsigned char SPI_SlaveReceive(void)
{
	while(!(SPSR & (1<<SPIF)));// Wait for reception complete 
  98:	77 9b       	sbis	0x0e, 7	; 14
  9a:	fe cf       	rjmp	.-4      	; 0x98 <SPI_SlaveReceive>
	return SPDR;// Return data register 
  9c:	8f b1       	in	r24, 0x0f	; 15
}
  9e:	08 95       	ret

000000a0 <SPI_MasterTransmit>:
  a0:	8f b9       	out	0x0f, r24	; 15
  a2:	77 9b       	sbis	0x0e, 7	; 14
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <SPI_MasterTransmit+0x2>
  a6:	08 95       	ret

000000a8 <main>:
#include<util/delay.h>
#include"spi.h"


int main (void)
{DDRC=0xff;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
 char data;
 spi_slave_init();
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <spi_slave_init>
  
    while(1)
    {
       
     PORTC =SPI_SlaveReceive();
  b0:	0e 94 4c 00 	call	0x98	; 0x98 <SPI_SlaveReceive>
  b4:	85 bb       	out	0x15, r24	; 21
  PORTC= spi_send_receive(0b11110000);
  b6:	80 ef       	ldi	r24, 0xF0	; 240
  b8:	0e 94 47 00 	call	0x8e	; 0x8e <spi_send_receive>
  bc:	85 bb       	out	0x15, r24	; 21
  //PORTC= spi_send_receive(3<<1);
  //SPI_MasterTransmit(3<<1); 
 }
  be:	f8 cf       	rjmp	.-16     	; 0xb0 <main+0x8>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
