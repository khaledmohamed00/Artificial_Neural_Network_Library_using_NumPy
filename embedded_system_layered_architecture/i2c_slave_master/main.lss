
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000017e  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000ed0  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d91  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001e55  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e68  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  64:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TWI_init_slave>:
#include<avr/io.h>
#include"i2c.h"

void TWI_init_slave(void) // Function to initilaize slave
{
    TWAR=0x20;    // Fill slave address to TWAR
  6c:	80 e2       	ldi	r24, 0x20	; 32
  6e:	82 b9       	out	0x02, r24	; 2
  70:	08 95       	ret

00000072 <TWI_match_read_slave>:
void TWI_match_read_slave(void) //Function to match the slave address and slave dirction bit(read)
{
    while((TWSR & 0xF8)!= 0x60)  // Loop till correct acknoledgement have been received
    {
        // Get acknowlegement, Enable TWI, Clear TWI interrupt flag
        TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);    
  72:	94 ec       	ldi	r25, 0xC4	; 196
    TWAR=0x20;    // Fill slave address to TWAR
} 

void TWI_match_read_slave(void) //Function to match the slave address and slave dirction bit(read)
{
    while((TWSR & 0xF8)!= 0x60)  // Loop till correct acknoledgement have been received
  74:	81 b1       	in	r24, 0x01	; 1
  76:	88 7f       	andi	r24, 0xF8	; 248
  78:	80 36       	cpi	r24, 0x60	; 96
  7a:	29 f0       	breq	.+10     	; 0x86 <TWI_match_read_slave+0x14>
    {
        // Get acknowlegement, Enable TWI, Clear TWI interrupt flag
        TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);    
  7c:	96 bf       	out	0x36, r25	; 54
        while (!(TWCR & (1<<TWINT)));  // Wait for TWINT flag
  7e:	06 b6       	in	r0, 0x36	; 54
  80:	07 fe       	sbrs	r0, 7
  82:	fd cf       	rjmp	.-6      	; 0x7e <TWI_match_read_slave+0xc>
  84:	f7 cf       	rjmp	.-18     	; 0x74 <TWI_match_read_slave+0x2>
    }
    PORTA=0xff;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	8b bb       	out	0x1b, r24	; 27
  8a:	08 95       	ret

0000008c <TWI_read_slave>:
} 

void TWI_read_slave(void)
{
    // Clear TWI interrupt flag,Get acknowlegement, Enable TWI
    TWCR= (1<<TWINT)|(1<<TWEA)|(1<<TWEN);    
  8c:	84 ec       	ldi	r24, 0xC4	; 196
  8e:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1<<TWINT)));    // Wait for TWINT flag
  90:	06 b6       	in	r0, 0x36	; 54
  92:	07 fe       	sbrs	r0, 7
  94:	fd cf       	rjmp	.-6      	; 0x90 <TWI_read_slave+0x4>
    while((TWSR & 0xF8)!=0x80);        // Wait for acknowledgement
  96:	81 b1       	in	r24, 0x01	; 1
  98:	88 7f       	andi	r24, 0xF8	; 248
  9a:	80 38       	cpi	r24, 0x80	; 128
  9c:	e1 f7       	brne	.-8      	; 0x96 <TWI_read_slave+0xa>
    unsigned char recv_data=TWDR;                    // Get value from TWDR
  9e:	83 b1       	in	r24, 0x03	; 3
    PORTA=recv_data;                // send the receive value on PORTB
  a0:	8b bb       	out	0x1b, r24	; 27
  a2:	08 95       	ret

000000a4 <i2c_init_master>:
#include"i2c.h"


void i2c_init_master(void){

TWBR=BITRATE(TWSR=0x00);
  a4:	11 b8       	out	0x01, r1	; 1
  a6:	88 e4       	ldi	r24, 0x48	; 72
  a8:	80 b9       	out	0x00, r24	; 0
TWCR|=(1<<TWEN);
  aa:	86 b7       	in	r24, 0x36	; 54
  ac:	84 60       	ori	r24, 0x04	; 4
  ae:	86 bf       	out	0x36, r24	; 54
  b0:	08 95       	ret

000000b2 <i2c_start>:
//TWBR=0x47 ;
//TWCR=0x04 ;
}
void i2c_start(void){

TWCR =(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  b2:	84 ea       	ldi	r24, 0xA4	; 164
  b4:	86 bf       	out	0x36, r24	; 54
while((TWCR & (1<<TWINT))==0);
  b6:	06 b6       	in	r0, 0x36	; 54
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <i2c_start+0x4>

}
  bc:	08 95       	ret

000000be <i2c_stop>:

void i2c_stop(void){
TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  be:	84 e9       	ldi	r24, 0x94	; 148
  c0:	86 bf       	out	0x36, r24	; 54
  c2:	08 95       	ret

000000c4 <i2c_write_master_ack>:

}

void i2c_write_master_ack(unsigned char data){
TWDR=data;
  c4:	83 b9       	out	0x03, r24	; 3
TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
  c6:	84 ea       	ldi	r24, 0xA4	; 164
  c8:	86 bf       	out	0x36, r24	; 54
while((TWCR & (1<<TWINT))==0);
  ca:	06 b6       	in	r0, 0x36	; 54
  cc:	07 fe       	sbrs	r0, 7
  ce:	fd cf       	rjmp	.-6      	; 0xca <i2c_write_master_ack+0x6>
}
  d0:	08 95       	ret

000000d2 <i2c_read_master_ack>:


unsigned char i2c_read_master_ack(unsigned char isLast){
if(isLast==0)
  d2:	81 11       	cpse	r24, r1
  d4:	02 c0       	rjmp	.+4      	; 0xda <i2c_read_master_ack+0x8>
  TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  d6:	84 ec       	ldi	r24, 0xC4	; 196
  d8:	01 c0       	rjmp	.+2      	; 0xdc <i2c_read_master_ack+0xa>
else
  TWCR=(1<<TWINT)|(1<<TWEN);
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	86 bf       	out	0x36, r24	; 54

while((TWCR & (1<<TWINT))==0);
  de:	06 b6       	in	r0, 0x36	; 54
  e0:	07 fe       	sbrs	r0, 7
  e2:	fd cf       	rjmp	.-6      	; 0xde <i2c_read_master_ack+0xc>
return (TWDR);
  e4:	83 b1       	in	r24, 0x03	; 3

}
  e6:	08 95       	ret

000000e8 <i2c_init_slave>:

void i2c_init_slave(unsigned char slaveAddress){

TWCR=(1<<TWEN);
  e8:	94 e0       	ldi	r25, 0x04	; 4
  ea:	96 bf       	out	0x36, r25	; 54
TWAR=slaveAddress;
  ec:	82 b9       	out	0x02, r24	; 2
TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  ee:	84 ec       	ldi	r24, 0xC4	; 196
  f0:	86 bf       	out	0x36, r24	; 54
  f2:	08 95       	ret

000000f4 <i2c_send_slave_ack>:

}

void i2c_send_slave_ack(unsigned char data)
{
TWDR=data;
  f4:	83 b9       	out	0x03, r24	; 3
TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  f6:	84 ec       	ldi	r24, 0xC4	; 196
  f8:	86 bf       	out	0x36, r24	; 54
while((TWCR & (1<<TWINT))==0);
  fa:	06 b6       	in	r0, 0x36	; 54
  fc:	07 fe       	sbrs	r0, 7
  fe:	fd cf       	rjmp	.-6      	; 0xfa <i2c_send_slave_ack+0x6>

}
 100:	08 95       	ret

00000102 <i2c_receive_slave_ack>:

unsigned char i2c_receive_slave_ack(unsigned char isLast){
if(isLast==0)
 102:	81 11       	cpse	r24, r1
 104:	02 c0       	rjmp	.+4      	; 0x10a <i2c_receive_slave_ack+0x8>
  TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 106:	84 ec       	ldi	r24, 0xC4	; 196
 108:	01 c0       	rjmp	.+2      	; 0x10c <i2c_receive_slave_ack+0xa>
else
  TWCR=(1<<TWINT)|(1<<TWEN);
 10a:	84 e8       	ldi	r24, 0x84	; 132
 10c:	86 bf       	out	0x36, r24	; 54

while((TWCR & (1<<TWINT))==0);
 10e:	06 b6       	in	r0, 0x36	; 54
 110:	07 fe       	sbrs	r0, 7
 112:	fd cf       	rjmp	.-6      	; 0x10e <i2c_receive_slave_ack+0xc>
return (TWDR);
 114:	83 b1       	in	r24, 0x03	; 3

}
 116:	08 95       	ret

00000118 <i2c_listen_slave>:

void i2c_listen_slave(void){

while((TWCR & (1<<TWINT))==0);
 118:	06 b6       	in	r0, 0x36	; 54
 11a:	07 fe       	sbrs	r0, 7
 11c:	fd cf       	rjmp	.-6      	; 0x118 <i2c_listen_slave>

}
 11e:	08 95       	ret

00000120 <i2c_write_master_nack>:


void i2c_write_master_nack(unsigned char data){
TWDR=data;
 120:	83 b9       	out	0x03, r24	; 3
TWCR=(1<<TWINT)|(1<<TWEN);
 122:	84 e8       	ldi	r24, 0x84	; 132
 124:	86 bf       	out	0x36, r24	; 54
while((TWCR & (1<<TWINT))==0);
 126:	06 b6       	in	r0, 0x36	; 54
 128:	07 fe       	sbrs	r0, 7
 12a:	fd cf       	rjmp	.-6      	; 0x126 <i2c_write_master_nack+0x6>
}
 12c:	08 95       	ret

0000012e <i2c_read_master_nack>:


unsigned char i2c_read_master_nack(unsigned char isLast){
if(isLast==0)
 12e:	81 11       	cpse	r24, r1
 130:	02 c0       	rjmp	.+4      	; 0x136 <i2c_read_master_nack+0x8>
  TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 132:	84 ec       	ldi	r24, 0xC4	; 196
 134:	01 c0       	rjmp	.+2      	; 0x138 <i2c_read_master_nack+0xa>
else
  TWCR=(1<<TWINT)|(1<<TWEN);
 136:	84 e8       	ldi	r24, 0x84	; 132
 138:	86 bf       	out	0x36, r24	; 54

while((TWCR & (1<<TWINT))==0);
 13a:	06 b6       	in	r0, 0x36	; 54
 13c:	07 fe       	sbrs	r0, 7
 13e:	fd cf       	rjmp	.-6      	; 0x13a <i2c_read_master_nack+0xc>
return (TWDR);
 140:	83 b1       	in	r24, 0x03	; 3

}
 142:	08 95       	ret

00000144 <i2c_send_slave_nack>:

void i2c_send_slave_nack(unsigned char data)
{
TWDR=data;
 144:	83 b9       	out	0x03, r24	; 3
TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 146:	84 ec       	ldi	r24, 0xC4	; 196
 148:	86 bf       	out	0x36, r24	; 54
while((TWCR & (1<<TWINT))==0);
 14a:	06 b6       	in	r0, 0x36	; 54
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <i2c_send_slave_nack+0x6>

}
 150:	08 95       	ret

00000152 <i2c_receive_slave_nack>:
 152:	81 11       	cpse	r24, r1
 154:	02 c0       	rjmp	.+4      	; 0x15a <i2c_receive_slave_nack+0x8>
 156:	84 ec       	ldi	r24, 0xC4	; 196
 158:	01 c0       	rjmp	.+2      	; 0x15c <i2c_receive_slave_nack+0xa>
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	86 bf       	out	0x36, r24	; 54
 15e:	06 b6       	in	r0, 0x36	; 54
 160:	07 fe       	sbrs	r0, 7
 162:	fd cf       	rjmp	.-6      	; 0x15e <i2c_receive_slave_nack+0xc>
 164:	83 b1       	in	r24, 0x03	; 3
 166:	08 95       	ret

00000168 <main>:

i2c_listen_slave();
PORTD=0xf0;
PORTD=i2c_receive_slave_ack(0);
PORTD=i2c_receive_slave_ack(1);*/
DDRA=0xff;
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	8a bb       	out	0x1a, r24	; 26
#include<avr/io.h>
#include"i2c.h"

void TWI_init_slave(void) // Function to initilaize slave
{
    TWAR=0x20;    // Fill slave address to TWAR
 16c:	80 e2       	ldi	r24, 0x20	; 32
 16e:	82 b9       	out	0x02, r24	; 2
PORTD=0xf0;
PORTD=i2c_receive_slave_ack(0);
PORTD=i2c_receive_slave_ack(1);*/
DDRA=0xff;
TWI_init_slave();
TWI_match_read_slave();
 170:	0e 94 39 00 	call	0x72	; 0x72 <TWI_match_read_slave>
TWI_read_slave();
 174:	0e 94 46 00 	call	0x8c	; 0x8c <TWI_read_slave>

while(1){}
 178:	ff cf       	rjmp	.-2      	; 0x178 <main+0x10>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
