Archive member included to satisfy reference by file (symbol)

/usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/crtatmega32.o (exit)
/usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_copy_data.o)
                              tasks.o (__do_copy_data)
/usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_clear_bss.o)
                              main.o (__do_clear_bss)
/usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(memcpy.o)
                              queue.o (memcpy)
/usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(memset.o)
                              tasks.o (memset)
/usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(strncpy.o)
                              tasks.o (strncpy)

Allocating common symbols
Common symbol       size              file

Push_Semaphore      0x2               main.o
xQueue              0x2               main.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
user_signatures  0x0000000000850000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/crtatmega32.o
LOAD main.o
LOAD croutine.o
LOAD heap_1.o
LOAD list.o
LOAD port.o
LOAD queue.o
LOAD tasks.o
LOAD timers.o
LOAD UART_prog.o
START GROUP
LOAD /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libm.a
LOAD /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libatmega32.a
END GROUP

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000     0x177c
 *(.vectors)
 .vectors       0x0000000000000000       0x54 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/crtatmega32.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
                0x0000000000000054                . = ALIGN (0x2)
                0x0000000000000054                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000054        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000054                __trampolines_end = .
 *(.progmem*)
                0x0000000000000054                . = ALIGN (0x2)
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000054                __ctors_start = .
 *(.ctors)
                0x0000000000000054                __ctors_end = .
                0x0000000000000054                __dtors_start = .
 *(.dtors)
                0x0000000000000054                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000054        0x0 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/crtatmega32.o
                0x0000000000000054                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000054        0xc /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/crtatmega32.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000060       0x16 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_copy_data.o)
                0x0000000000000060                __do_copy_data
 .init4         0x0000000000000076       0x10 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_clear_bss.o)
                0x0000000000000076                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000000000000086        0x8 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/crtatmega32.o
 *(.init9)
 *(.text)
 .text          0x000000000000008e        0x4 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/crtatmega32.o
                0x000000000000008e                __vector_1
                0x000000000000008e                __vector_12
                0x000000000000008e                __bad_interrupt
                0x000000000000008e                __vector_6
                0x000000000000008e                __vector_3
                0x000000000000008e                __vector_11
                0x000000000000008e                __vector_13
                0x000000000000008e                __vector_17
                0x000000000000008e                __vector_19
                0x000000000000008e                __vector_5
                0x000000000000008e                __vector_4
                0x000000000000008e                __vector_9
                0x000000000000008e                __vector_2
                0x000000000000008e                __vector_15
                0x000000000000008e                __vector_8
                0x000000000000008e                __vector_14
                0x000000000000008e                __vector_10
                0x000000000000008e                __vector_16
                0x000000000000008e                __vector_18
                0x000000000000008e                __vector_20
 .text          0x0000000000000092       0x78 main.o
                0x0000000000000092                Blink_1500ms_task
                0x00000000000000d0                Blink_2000ms_task
 .text          0x000000000000010a      0x38c croutine.o
                0x000000000000010a                xCoRoutineCreate
                0x00000000000001ee                vCoRoutineAddToDelayedList
                0x0000000000000272                vCoRoutineSchedule
                0x000000000000044c                xCoRoutineRemoveFromEventList
 .text          0x0000000000000496       0x6a heap_1.o
                0x0000000000000496                pvPortMalloc
                0x00000000000004e2                vPortFree
                0x00000000000004e4                vPortInitialiseBlocks
                0x00000000000004ee                xPortGetFreeHeapSize
 .text          0x0000000000000500      0x120 list.o
                0x0000000000000500                vListInitialise
                0x000000000000051c                vListInitialiseItem
                0x0000000000000524                vListInsertEnd
                0x000000000000056a                vListInsert
                0x00000000000005d8                vListRemove
 .text          0x0000000000000620      0x2b2 port.o
                0x0000000000000620                pxPortInitialiseStack
                0x00000000000006f8                xPortStartScheduler
                0x0000000000000762                vPortEndScheduler
                0x0000000000000764                vPortYield
                0x0000000000000816                vPortYieldFromTick
                0x00000000000008cc                __vector_7
 .text          0x00000000000008d2      0x520 queue.o
                0x0000000000000a02                xQueueCreate
                0x0000000000000a98                xQueueGenericSend
                0x0000000000000bc0                xQueueGenericSendFromISR
                0x0000000000000c10                xQueueGenericReceive
                0x0000000000000d58                xQueueReceiveFromISR
                0x0000000000000daa                uxQueueMessagesWaiting
                0x0000000000000dba                uxQueueMessagesWaitingFromISR
                0x0000000000000dc0                vQueueDelete
                0x0000000000000dd8                xQueueIsQueueEmptyFromISR
                0x0000000000000de4                xQueueIsQueueFullFromISR
 .text          0x0000000000000df2      0x894 tasks.o
                0x0000000000000e62                xTaskGenericCreate
                0x000000000000104e                vTaskDelete
                0x00000000000010e4                vTaskStartScheduler
                0x0000000000001148                vTaskEndScheduler
                0x0000000000001152                vTaskSuspendAll
                0x000000000000115e                xTaskGetTickCount
                0x0000000000001172                xTaskGetTickCountFromISR
                0x000000000000117c                uxTaskGetNumberOfTasks
                0x0000000000001182                vTaskIncrementTick
                0x00000000000012c0                xTaskResumeAll
                0x000000000000139e                vTaskDelayUntil
                0x000000000000141e                vTaskDelay
                0x00000000000014ba                vTaskSwitchContext
                0x000000000000154e                vTaskPlaceOnEventList
                0x0000000000001588                xTaskRemoveFromEventList
                0x0000000000001602                vTaskSetTimeOutState
                0x0000000000001618                xTaskCheckForTimeOut
                0x000000000000167e                vTaskMissedYield
 .text          0x0000000000001686        0x0 timers.o
 .text          0x0000000000001686       0x24 UART_prog.o
                0x0000000000001686                uart_init
                0x000000000000169a                uart_send_char
                0x00000000000016a2                uart_receive_char
 .text          0x00000000000016aa        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_exit.o)
 .text          0x00000000000016aa        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_copy_data.o)
 .text          0x00000000000016aa        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_clear_bss.o)
 .text          0x00000000000016aa        0x0 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(memcpy.o)
 .text          0x00000000000016aa        0x0 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(memset.o)
 .text          0x00000000000016aa        0x0 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(strncpy.o)
                0x00000000000016aa                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x00000000000016aa       0x90 main.o
                0x00000000000016aa                main
 .text.libgcc.mul
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.div
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fixed
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.mul
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc   0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fixed
                0x000000000000173a        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_clear_bss.o)
 .text.avr-libc
                0x000000000000173a       0x12 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(memcpy.o)
                0x000000000000173a                memcpy
 .text.avr-libc
                0x000000000000174c        0xe /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(memset.o)
                0x000000000000174c                memset
 .text.avr-libc
                0x000000000000175a       0x1e /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(strncpy.o)
                0x000000000000175a                strncpy
                0x0000000000001778                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000000000001778        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_exit.o)
                0x0000000000001778                exit
                0x0000000000001778                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000000000001778        0x4 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x000000000000177c                _etext = .

.data           0x0000000000800060        0x8 load address 0x000000000000177c
                0x0000000000800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/crtatmega32.o
 .data          0x0000000000800060        0x0 main.o
 .data          0x0000000000800060        0x0 croutine.o
 .data          0x0000000000800060        0x0 heap_1.o
 .data          0x0000000000800060        0x0 list.o
 .data          0x0000000000800060        0x0 port.o
 .data          0x0000000000800060        0x0 queue.o
 .data          0x0000000000800060        0x2 tasks.o
 .data          0x0000000000800062        0x0 timers.o
 .data          0x0000000000800062        0x0 UART_prog.o
 .data          0x0000000000800062        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_exit.o)
 .data          0x0000000000800062        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_copy_data.o)
 .data          0x0000000000800062        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_clear_bss.o)
 .data          0x0000000000800062        0x0 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(memcpy.o)
 .data          0x0000000000800062        0x0 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(memset.o)
 .data          0x0000000000800062        0x0 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(strncpy.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 .rodata.str1.1
                0x0000000000800062        0x5 tasks.o
 *(.gnu.linkonce.d*)
                0x0000000000800068                . = ALIGN (0x2)
 *fill*         0x0000000000800067        0x1 
                0x0000000000800068                _edata = .
                0x0000000000800068                PROVIDE (__data_end, .)

.bss            0x0000000000800068      0x2e9
                0x0000000000800068                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800068        0x0 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/crtatmega32.o
 .bss           0x0000000000800068        0x0 main.o
 .bss           0x0000000000800068       0x3a croutine.o
                0x0000000000800068                pxCurrentCoRoutine
 .bss           0x00000000008000a2      0x25a heap_1.o
 .bss           0x00000000008002fc        0x0 list.o
 .bss           0x00000000008002fc        0x0 port.o
 .bss           0x00000000008002fc        0x0 queue.o
 .bss           0x00000000008002fc       0x51 tasks.o
                0x00000000008002fc                pxCurrentTCB
 .bss           0x000000000080034d        0x0 timers.o
 .bss           0x000000000080034d        0x0 UART_prog.o
 .bss           0x000000000080034d        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_exit.o)
 .bss           0x000000000080034d        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_copy_data.o)
 .bss           0x000000000080034d        0x0 /usr/lib/gcc/avr/4.9.2/avr5/libgcc.a(_clear_bss.o)
 .bss           0x000000000080034d        0x0 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(memcpy.o)
 .bss           0x000000000080034d        0x0 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(memset.o)
 .bss           0x000000000080034d        0x0 /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/libc.a(strncpy.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x000000000080034d        0x4 main.o
                0x000000000080034d                Push_Semaphore
                0x000000000080034f                xQueue
                0x0000000000800351                PROVIDE (__bss_end, .)
                0x000000000000177c                __data_load_start = LOADADDR (.data)
                0x0000000000001784                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800351        0x0
                0x0000000000800351                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800351                PROVIDE (__noinit_end, .)
                0x0000000000800351                _end = .
                0x0000000000800351                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.user_signatures
 *(.user_signatures*)

.stab           0x0000000000000000     0x5658
 *(.stab)
 .stab          0x0000000000000000      0x8f4 main.o
 .stab          0x00000000000008f4      0xa80 croutine.o
                                        0xccc (size before relaxing)
 .stab          0x0000000000001374      0x564 heap_1.o
                                        0x840 (size before relaxing)
 .stab          0x00000000000018d8      0x6c0 list.o
                                        0x9a8 (size before relaxing)
 .stab          0x0000000000001f98      0x798 port.o
                                        0xad4 (size before relaxing)
 .stab          0x0000000000002730     0x10b0 queue.o
                                       0x13f8 (size before relaxing)
 .stab          0x00000000000037e0     0x171c tasks.o
                                       0x1980 (size before relaxing)
 .stab          0x0000000000004efc      0x360 timers.o
                                        0x66c (size before relaxing)
 .stab          0x000000000000525c      0x3fc UART_prog.o
                                        0x630 (size before relaxing)

.stabstr        0x0000000000000000     0x323c
 *(.stabstr)
 .stabstr       0x0000000000000000     0x323c main.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 main.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000011       0x12 croutine.o
 .comment       0x0000000000000011       0x12 heap_1.o
 .comment       0x0000000000000011       0x12 list.o
 .comment       0x0000000000000011       0x12 port.o
 .comment       0x0000000000000011       0x12 queue.o
 .comment       0x0000000000000011       0x12 tasks.o
 .comment       0x0000000000000011       0x12 timers.o
 .comment       0x0000000000000011       0x12 UART_prog.o

.note.gnu.avr.deviceinfo
                0x0000000000000000       0x3c
 .note.gnu.avr.deviceinfo
                0x0000000000000000       0x3c /usr/lib/gcc/avr/4.9.2/../../../avr/lib/avr5/crtatmega32.o

.note.gnu.build-id
 *(.note.gnu.build-id)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info .gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line .debug_line.* .debug_line_end)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)
OUTPUT(main.elf elf32-avr)
LOAD linker stubs
