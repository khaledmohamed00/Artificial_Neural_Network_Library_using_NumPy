
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000c30  00000cc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007e  0080007e  00000ce2  2**0
                  ALLOC
  3 .stab         00001944  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010ef  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003717  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003728  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0e 02 	call	0x41c	; 0x41c <main>
  8a:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
#include "ADC_register.h"

void ADC_Init (void)
{
	// ADC Enable
	SET_BIT(ADCSRA_Reg,7);
  92:	37 9a       	sbi	0x06, 7	; 6

	// Prescaler Configuration as 128
	SET_BIT(ADCSRA_Reg,2);
  94:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA_Reg,1);
  96:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA_Reg,0);
  98:	30 9a       	sbi	0x06, 0	; 6


	// Referance Voltage as AVCC with external capacitor
	CLR_BIT(ADMUX_Reg,7);
  9a:	3f 98       	cbi	0x07, 7	; 7
	SET_BIT(ADMUX_Reg,6);
  9c:	3e 9a       	sbi	0x07, 6	; 7

	// ADC Data Rgith Adjustment
	CLR_BIT(ADMUX_Reg,5);
  9e:	3d 98       	cbi	0x07, 5	; 7
  a0:	08 95       	ret

000000a2 <ADCu16_Read>:

u16 ADCu16_Read (u8 channel)
{
	// ADC Channel Selection
	channel &= 0x07;
	ADMUX_Reg &= 0xE0;
  a2:	97 b1       	in	r25, 0x07	; 7
  a4:	90 7e       	andi	r25, 0xE0	; 224
  a6:	97 b9       	out	0x07, r25	; 7
	ADMUX_Reg |= channel;
  a8:	97 b1       	in	r25, 0x07	; 7
}

u16 ADCu16_Read (u8 channel)
{
	// ADC Channel Selection
	channel &= 0x07;
  aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX_Reg &= 0xE0;
	ADMUX_Reg |= channel;
  ac:	98 2b       	or	r25, r24
  ae:	97 b9       	out	0x07, r25	; 7

	// Start Single Convertion
	SET_BIT(ADCSRA_Reg,6);
  b0:	36 9a       	sbi	0x06, 6	; 6

	//wait for the conversion
	while(!(ADCSRA_Reg & (1<<4)));
  b2:	34 9b       	sbis	0x06, 4	; 6
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <ADCu16_Read+0x10>

	//ADC Flag Clear
	SET_BIT(ADCSRA_Reg,4);
  b6:	34 9a       	sbi	0x06, 4	; 6

	return ADC;
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	95 b1       	in	r25, 0x05	; 5
}
  bc:	08 95       	ret

000000be <LCD_cmd>:

void LCD_cmd(u8 cmd)
{


DIO_u8SetPortValue(LCD_DATA,cmd);
  be:	68 2f       	mov	r22, r24
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_u8SetPortValue>
DIO_u8SetPortValue(LCD_ctrl,(0<<rs)|(0<<rw)|(1<<en));
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_u8SetPortValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_cmd+0x14>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_cmd+0x1a>
  d8:	00 00       	nop
_delay_ms(1);
DIO_u8SetPortValue(LCD_ctrl,(0<<rs)|(0<<rw)|(0<<en));
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_u8SetPortValue>
  e2:	9f e7       	ldi	r25, 0x7F	; 127
  e4:	28 e3       	ldi	r18, 0x38	; 56
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	91 50       	subi	r25, 0x01	; 1
  ea:	20 40       	sbci	r18, 0x00	; 0
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <LCD_cmd+0x2a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <LCD_cmd+0x34>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <init_LCD>:
#include "DIO_int.h"
#include "LCD_int.h"
#include "LCD_config.h"
void init_LCD(void)
{
DIO_u8SetPortDirection(LCD_DATA,0xff);
  f6:	6f ef       	ldi	r22, 0xFF	; 255
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 ee 01 	call	0x3dc	; 0x3dc <DIO_u8SetPortDirection>
DIO_u8SetPortDirection(LCD_ctrl,0x07);
  fe:	67 e0       	ldi	r22, 0x07	; 7
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 ee 01 	call	0x3dc	; 0x3dc <DIO_u8SetPortDirection>

LCD_cmd(0x38);                            // initialization of 16X2 LCD in 8bit mode
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_cmd>
 10c:	8f ec       	ldi	r24, 0xCF	; 207
 10e:	97 e0       	ldi	r25, 0x07	; 7
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <init_LCD+0x1a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <init_LCD+0x20>
 116:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x01);                                 // clear LCD
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_cmd>
 11e:	8f ec       	ldi	r24, 0xCF	; 207
 120:	97 e0       	ldi	r25, 0x07	; 7
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <init_LCD+0x2c>
 126:	00 c0       	rjmp	.+0      	; 0x128 <init_LCD+0x32>
 128:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x0E);                        // cursor ON
 12a:	8e e0       	ldi	r24, 0x0E	; 14
 12c:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_cmd>
 130:	8f ec       	ldi	r24, 0xCF	; 207
 132:	97 e0       	ldi	r25, 0x07	; 7
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <init_LCD+0x3e>
 138:	00 c0       	rjmp	.+0      	; 0x13a <init_LCD+0x44>
 13a:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x80);                     // —8 go to first line and –0 is for 0th position
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_cmd>
 142:	8f ec       	ldi	r24, 0xCF	; 207
 144:	97 e0       	ldi	r25, 0x07	; 7
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <init_LCD+0x50>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <init_LCD+0x56>
 14c:	00 00       	nop
 14e:	08 95       	ret

00000150 <LCD_write>:
}

void LCD_write(u8 data)
{

DIO_u8SetPortValue(LCD_DATA,data);
 150:	68 2f       	mov	r22, r24
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_u8SetPortValue>
DIO_u8SetPortValue(LCD_ctrl,(1<<rs)|(0<<rw)|(1<<en));
 158:	65 e0       	ldi	r22, 0x05	; 5
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_u8SetPortValue>
 160:	8f ec       	ldi	r24, 0xCF	; 207
 162:	97 e0       	ldi	r25, 0x07	; 7
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_write+0x14>
 168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_write+0x1a>
 16a:	00 00       	nop
_delay_ms(1);

DIO_u8SetPortValue(LCD_ctrl, (1<<rs)|(0<<rw)|(0<<en));
 16c:	64 e0       	ldi	r22, 0x04	; 4
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_u8SetPortValue>
 174:	9f e7       	ldi	r25, 0x7F	; 127
 176:	28 e3       	ldi	r18, 0x38	; 56
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	91 50       	subi	r25, 0x01	; 1
 17c:	20 40       	sbci	r18, 0x00	; 0
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <LCD_write+0x2a>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_write+0x34>
 184:	00 00       	nop
 186:	08 95       	ret

00000188 <LCD_write_string>:
return ;

}

void LCD_write_string(u8 *str)             //store address value of the string in pointer *str
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ec 01       	movw	r28, r24
int i=0;
while(str[i]!='\0')                               // loop will go on till the NULL character in the string
 18e:	89 91       	ld	r24, Y+
 190:	88 23       	and	r24, r24
 192:	19 f0       	breq	.+6      	; 0x19a <LCD_write_string+0x12>
{
LCD_write(str[i]);                            // sending data on LCD byte by byte
 194:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_write>
 198:	fa cf       	rjmp	.-12     	; 0x18e <LCD_write_string+0x6>
i++;
}
return;
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <LCD_write_int>:

void LCD_write_int(u16 number){
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	18 2f       	mov	r17, r24
 1ae:	09 2f       	mov	r16, r25

s16 num=number;
 1b0:	68 2f       	mov	r22, r24
 1b2:	79 2f       	mov	r23, r25
s16 digits=0;
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
s16 index;
while(num>0){
digits++;
num/=10;
 1b8:	ea e0       	ldi	r30, 0x0A	; 10
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
void LCD_write_int(u16 number){

s16 num=number;
s16 digits=0;
s16 index;
while(num>0){
 1c0:	16 16       	cp	r1, r22
 1c2:	17 06       	cpc	r1, r23
 1c4:	34 f4       	brge	.+12     	; 0x1d2 <LCD_write_int+0x32>
 1c6:	ec 01       	movw	r28, r24
digits++;
num/=10;
 1c8:	cb 01       	movw	r24, r22
 1ca:	bf 01       	movw	r22, r30
 1cc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__divmodhi4>
 1d0:	f5 cf       	rjmp	.-22     	; 0x1bc <LCD_write_int+0x1c>
}
index=digits-1;
u8 * arr=malloc((digits+1)* sizeof(u8));
 1d2:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <malloc>
 1d6:	fc 01       	movw	r30, r24
while(index>=0){
 1d8:	9e 01       	movw	r18, r28
s16 rem=number%10;
 1da:	8a e0       	ldi	r24, 0x0A	; 10
 1dc:	e8 2e       	mov	r14, r24
 1de:	f1 2c       	mov	r15, r1
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	31 09       	sbc	r19, r1
digits++;
num/=10;
}
index=digits-1;
u8 * arr=malloc((digits+1)* sizeof(u8));
while(index>=0){
 1e4:	37 fd       	sbrc	r19, 7
 1e6:	0d c0       	rjmp	.+26     	; 0x202 <LCD_write_int+0x62>
s16 rem=number%10;
number=number/10;
 1e8:	81 2f       	mov	r24, r17
 1ea:	90 2f       	mov	r25, r16
 1ec:	b7 01       	movw	r22, r14
 1ee:	0e 94 4f 02 	call	0x49e	; 0x49e <__udivmodhi4>
 1f2:	16 2f       	mov	r17, r22
 1f4:	07 2f       	mov	r16, r23
 1f6:	df 01       	movw	r26, r30
 1f8:	a2 0f       	add	r26, r18
 1fa:	b3 1f       	adc	r27, r19
arr[index--]=rem+'0';
 1fc:	80 5d       	subi	r24, 0xD0	; 208
 1fe:	8c 93       	st	X, r24
 200:	ef cf       	rjmp	.-34     	; 0x1e0 <LCD_write_int+0x40>
}
arr[digits]='\0';
 202:	ce 0f       	add	r28, r30
 204:	df 1f       	adc	r29, r31
 206:	18 82       	st	Y, r1
LCD_write_string(arr);
 208:	cf 01       	movw	r24, r30

}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
s16 rem=number%10;
number=number/10;
arr[index--]=rem+'0';
}
arr[digits]='\0';
LCD_write_string(arr);
 216:	0c 94 c4 00 	jmp	0x188	; 0x188 <LCD_write_string>

0000021a <LCD_write_double>:

}

void LCD_write_double(f64 number){
 21a:	cf 92       	push	r12
 21c:	df 92       	push	r13
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	6b 01       	movw	r12, r22
 224:	7c 01       	movw	r14, r24

s16 num=(s16)number;
 226:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fixsfsi>

LCD_write_int(num);
 22a:	cb 01       	movw	r24, r22
 22c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_write_int>
LCD_write('.');
 230:	8e e2       	ldi	r24, 0x2E	; 46
 232:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_write>
s16 factor=(s16)(fmod( number, 1.0 )*100);
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	40 e8       	ldi	r20, 0x80	; 128
 23c:	5f e3       	ldi	r21, 0x3F	; 63
 23e:	c7 01       	movw	r24, r14
 240:	b6 01       	movw	r22, r12
 242:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <fmod>
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	48 ec       	ldi	r20, 0xC8	; 200
 24c:	52 e4       	ldi	r21, 0x42	; 66
 24e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__mulsf3>
 252:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fixsfsi>
LCD_write_int(factor);
 256:	cb 01       	movw	r24, r22

}
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	df 90       	pop	r13
 25e:	cf 90       	pop	r12
s16 num=(s16)number;

LCD_write_int(num);
LCD_write('.');
s16 factor=(s16)(fmod( number, 1.0 )*100);
LCD_write_int(factor);
 260:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <LCD_write_int>

00000264 <LCD_build_special_char>:

}

void LCD_build_special_char(u8 location,u8 *ptr){
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29

if(location<8){
 26c:	88 30       	cpi	r24, 0x08	; 8
 26e:	80 f4       	brcc	.+32     	; 0x290 <LCD_build_special_char+0x2c>
 270:	8b 01       	movw	r16, r22

LCD_cmd(0x40+location*8);
 272:	88 0f       	add	r24, r24
 274:	88 0f       	add	r24, r24
 276:	88 0f       	add	r24, r24
 278:	80 5c       	subi	r24, 0xC0	; 192
 27a:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_cmd>
 27e:	e8 01       	movw	r28, r16
 280:	08 5f       	subi	r16, 0xF8	; 248
 282:	1f 4f       	sbci	r17, 0xFF	; 255
u8 i=0;
for(i=0;i<8;i++){
LCD_write(ptr[i]);
 284:	89 91       	ld	r24, Y+
 286:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_write>

if(location<8){

LCD_cmd(0x40+location*8);
u8 i=0;
for(i=0;i<8;i++){
 28a:	c0 17       	cp	r28, r16
 28c:	d1 07       	cpc	r29, r17
 28e:	d1 f7       	brne	.-12     	; 0x284 <LCD_build_special_char+0x20>

}

}

}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	08 95       	ret

0000029a <LCD_goto>:

void LCD_goto(u8 x,u8 y){

if(x<16){
 29a:	80 31       	cpi	r24, 0x10	; 16
 29c:	48 f4       	brcc	.+18     	; 0x2b0 <LCD_goto+0x16>

if(y==0){
 29e:	61 11       	cpse	r22, r1
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <LCD_goto+0xc>
LCD_cmd(0x80+x);
 2a2:	80 58       	subi	r24, 0x80	; 128
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <LCD_goto+0x12>
}else if(y==1){
 2a6:	61 30       	cpi	r22, 0x01	; 1
 2a8:	19 f4       	brne	.+6      	; 0x2b0 <LCD_goto+0x16>
LCD_cmd(0xBF+x);
 2aa:	81 54       	subi	r24, 0x41	; 65
 2ac:	0c 94 5f 00 	jmp	0xbe	; 0xbe <LCD_cmd>
 2b0:	08 95       	ret

000002b2 <LCD_vidWriteU16>:
}

}

void LCD_vidWriteU16 (u16 u16ValCpy)
{
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <LCD_vidWriteU16+0xa>
 2bc:	00 d0       	rcall	.+0      	; 0x2be <LCD_vidWriteU16+0xc>
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <LCD_vidWriteU16+0xe>
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
		u8 u8Iteration = 0;
		u8 u8DigitNumLoc = 0;
 2c4:	10 e0       	ldi	r17, 0x00	; 0
		u8 u8aNumber[6];

		while(u16ValCpy != 0)
		{

			u8aNumber[u8DigitNumLoc++] = ((u16ValCpy % 10) + '0');
 2c6:	2a e0       	ldi	r18, 0x0A	; 10
 2c8:	30 e0       	ldi	r19, 0x00	; 0
{
		u8 u8Iteration = 0;
		u8 u8DigitNumLoc = 0;
		u8 u8aNumber[6];

		while(u16ValCpy != 0)
 2ca:	00 97       	sbiw	r24, 0x00	; 0
 2cc:	71 f0       	breq	.+28     	; 0x2ea <LCD_vidWriteU16+0x38>
		{

			u8aNumber[u8DigitNumLoc++] = ((u16ValCpy % 10) + '0');
 2ce:	e1 e0       	ldi	r30, 0x01	; 1
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	ec 0f       	add	r30, r28
 2d4:	fd 1f       	adc	r31, r29
 2d6:	e1 0f       	add	r30, r17
 2d8:	f1 1d       	adc	r31, r1
 2da:	b9 01       	movw	r22, r18
 2dc:	0e 94 4f 02 	call	0x49e	; 0x49e <__udivmodhi4>
 2e0:	80 5d       	subi	r24, 0xD0	; 208
 2e2:	80 83       	st	Z, r24
			u16ValCpy = u16ValCpy / 10;
 2e4:	cb 01       	movw	r24, r22
		u8 u8aNumber[6];

		while(u16ValCpy != 0)
		{

			u8aNumber[u8DigitNumLoc++] = ((u16ValCpy % 10) + '0');
 2e6:	1f 5f       	subi	r17, 0xFF	; 255
 2e8:	f0 cf       	rjmp	.-32     	; 0x2ca <LCD_vidWriteU16+0x18>
			u16ValCpy = u16ValCpy / 10;
		}

		u8Iteration = (u8DigitNumLoc-1);
 2ea:	0f ef       	ldi	r16, 0xFF	; 255
 2ec:	01 0f       	add	r16, r17
		while(u8Iteration >= 0 && u8Iteration < u8DigitNumLoc)
 2ee:	01 17       	cp	r16, r17
 2f0:	88 f4       	brcc	.+34     	; 0x314 <LCD_vidWriteU16+0x62>
		{
			/* Write Character on LCD */
			LCD_write(u8aNumber[u8Iteration]);
 2f2:	e1 e0       	ldi	r30, 0x01	; 1
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	ec 0f       	add	r30, r28
 2f8:	fd 1f       	adc	r31, r29
 2fa:	e0 0f       	add	r30, r16
 2fc:	f1 1d       	adc	r31, r1
 2fe:	80 81       	ld	r24, Z
 300:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_write>
 304:	8f e9       	ldi	r24, 0x9F	; 159
 306:	9f e0       	ldi	r25, 0x0F	; 15
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_vidWriteU16+0x56>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_vidWriteU16+0x5c>
 30e:	00 00       	nop
			/* Delay to let the LCD show the character */
			_delay_ms(2);
			u8Iteration = u8Iteration -1;
 310:	01 50       	subi	r16, 0x01	; 1
 312:	ed cf       	rjmp	.-38     	; 0x2ee <LCD_vidWriteU16+0x3c>
		}
 314:	26 96       	adiw	r28, 0x06	; 6
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	08 95       	ret

0000032a <DIO_u8SetPinValue>:
/**************************************************DIO_u8SetPinValue*******************************************************************************/
/**********************************************************************************************************************************/
/**********************************************************************************************************************************/
u8 DIO_u8SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy){

if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){
 32a:	84 30       	cpi	r24, 0x04	; 4
 32c:	d8 f4       	brcc	.+54     	; 0x364 <DIO_u8SetPinValue+0x3a>
 32e:	68 30       	cpi	r22, 0x08	; 8
 330:	c8 f4       	brcc	.+50     	; 0x364 <DIO_u8SetPinValue+0x3a>
 332:	90 e0       	ldi	r25, 0x00	; 0

if(u8PinValCopy==HIGH){
SET_BIT(*PORT_Output[u8PortIdCopy],u8PinIdCopy);
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	fc 01       	movw	r30, r24
 33a:	e0 5a       	subi	r30, 0xA0	; 160
 33c:	ff 4f       	sbci	r31, 0xFF	; 255
 33e:	01 90       	ld	r0, Z+
 340:	f0 81       	ld	r31, Z
 342:	e0 2d       	mov	r30, r0
 344:	20 81       	ld	r18, Z
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	01 c0       	rjmp	.+2      	; 0x34e <DIO_u8SetPinValue+0x24>
 34c:	88 0f       	add	r24, r24
 34e:	6a 95       	dec	r22
 350:	ea f7       	brpl	.-6      	; 0x34c <DIO_u8SetPinValue+0x22>
/**********************************************************************************************************************************/
u8 DIO_u8SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy){

if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){

if(u8PinValCopy==HIGH){
 352:	41 30       	cpi	r20, 0x01	; 1
 354:	11 f4       	brne	.+4      	; 0x35a <DIO_u8SetPinValue+0x30>
SET_BIT(*PORT_Output[u8PortIdCopy],u8PinIdCopy);
 356:	82 2b       	or	r24, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_u8SetPinValue+0x34>

}
else
{
CLR_BIT(*PORT_Output[u8PortIdCopy],u8PinIdCopy);
 35a:	80 95       	com	r24
 35c:	82 23       	and	r24, r18
 35e:	80 83       	st	Z, r24
}

return SUCCESS;
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret
}

else{

return ERROR;
 364:	8f ef       	ldi	r24, 0xFF	; 255

}



}
 366:	08 95       	ret

00000368 <DIO_u8GetPinValue>:
/**********************************************************************************************************************************/

u8 DIO_u8GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy,u8* u8ptrPinValCopy){


if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){
 368:	84 30       	cpi	r24, 0x04	; 4
 36a:	b8 f4       	brcc	.+46     	; 0x39a <DIO_u8GetPinValue+0x32>
 36c:	68 30       	cpi	r22, 0x08	; 8
 36e:	a8 f4       	brcc	.+42     	; 0x39a <DIO_u8GetPinValue+0x32>
*u8ptrPinValCopy=GET_BIT(*PORT_Input[u8PortIdCopy],u8PinIdCopy);
 370:	e8 2f       	mov	r30, r24
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	e8 59       	subi	r30, 0x98	; 152
 37a:	ff 4f       	sbci	r31, 0xFF	; 255
 37c:	01 90       	ld	r0, Z+
 37e:	f0 81       	ld	r31, Z
 380:	e0 2d       	mov	r30, r0
 382:	80 81       	ld	r24, Z
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_u8GetPinValue+0x24>
 388:	95 95       	asr	r25
 38a:	87 95       	ror	r24
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_u8GetPinValue+0x20>
 390:	81 70       	andi	r24, 0x01	; 1
 392:	fa 01       	movw	r30, r20
 394:	80 83       	st	Z, r24
return SUCCESS;
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	08 95       	ret
}

else{

return ERROR;
 39a:	8f ef       	ldi	r24, 0xFF	; 255

}


}
 39c:	08 95       	ret

0000039e <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){


if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){
 39e:	84 30       	cpi	r24, 0x04	; 4
 3a0:	d8 f4       	brcc	.+54     	; 0x3d8 <DIO_u8SetPinDirection+0x3a>
 3a2:	68 30       	cpi	r22, 0x08	; 8
 3a4:	c8 f4       	brcc	.+50     	; 0x3d8 <DIO_u8SetPinDirection+0x3a>
 3a6:	90 e0       	ldi	r25, 0x00	; 0

if(u8PinDirCopy==HIGH)
{SET_BIT(*PORT_Direction[u8PortIdCopy],u8PinIdCopy);
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	fc 01       	movw	r30, r24
 3ae:	e0 59       	subi	r30, 0x90	; 144
 3b0:	ff 4f       	sbci	r31, 0xFF	; 255
 3b2:	01 90       	ld	r0, Z+
 3b4:	f0 81       	ld	r31, Z
 3b6:	e0 2d       	mov	r30, r0
 3b8:	20 81       	ld	r18, Z
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <DIO_u8SetPinDirection+0x24>
 3c0:	88 0f       	add	r24, r24
 3c2:	6a 95       	dec	r22
 3c4:	ea f7       	brpl	.-6      	; 0x3c0 <DIO_u8SetPinDirection+0x22>
u8 DIO_u8SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){


if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){

if(u8PinDirCopy==HIGH)
 3c6:	41 30       	cpi	r20, 0x01	; 1
 3c8:	11 f4       	brne	.+4      	; 0x3ce <DIO_u8SetPinDirection+0x30>
{SET_BIT(*PORT_Direction[u8PortIdCopy],u8PinIdCopy);
 3ca:	82 2b       	or	r24, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_u8SetPinDirection+0x34>
}
else
{
CLR_BIT(*PORT_Direction[u8PortIdCopy],u8PinIdCopy);
 3ce:	80 95       	com	r24
 3d0:	82 23       	and	r24, r18
 3d2:	80 83       	st	Z, r24
}

return SUCCESS;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	08 95       	ret

}

else{

return ERROR;
 3d8:	8f ef       	ldi	r24, 0xFF	; 255

}


}
 3da:	08 95       	ret

000003dc <DIO_u8SetPortDirection>:



u8 DIO_u8SetPortDirection (u8 u8PortIdCopy, u8 u8PortDirCopy){

if(u8PortIdCopy<=PORTD){
 3dc:	84 30       	cpi	r24, 0x04	; 4
 3de:	60 f4       	brcc	.+24     	; 0x3f8 <DIO_u8SetPortDirection+0x1c>

*PORT_Direction[u8PortIdCopy]=u8PortDirCopy;
 3e0:	e8 2f       	mov	r30, r24
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	ee 0f       	add	r30, r30
 3e6:	ff 1f       	adc	r31, r31
 3e8:	e0 59       	subi	r30, 0x90	; 144
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	01 90       	ld	r0, Z+
 3ee:	f0 81       	ld	r31, Z
 3f0:	e0 2d       	mov	r30, r0
 3f2:	60 83       	st	Z, r22


return SUCCESS;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	08 95       	ret

}

else{

return ERROR;
 3f8:	8f ef       	ldi	r24, 0xFF	; 255

}

}
 3fa:	08 95       	ret

000003fc <DIO_u8SetPortValue>:
 3fc:	84 30       	cpi	r24, 0x04	; 4
 3fe:	60 f4       	brcc	.+24     	; 0x418 <DIO_u8SetPortValue+0x1c>
 400:	e8 2f       	mov	r30, r24
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	ee 0f       	add	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	e0 5a       	subi	r30, 0xA0	; 160
 40a:	ff 4f       	sbci	r31, 0xFF	; 255
 40c:	01 90       	ld	r0, Z+
 40e:	f0 81       	ld	r31, Z
 410:	e0 2d       	mov	r30, r0
 412:	60 83       	st	Z, r22
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret
 418:	8f ef       	ldi	r24, 0xFF	; 255
 41a:	08 95       	ret

0000041c <main>:
#include "LCD_int.h"


int main(void)
{
	ADC_Init();		/* Initialize ADC */
 41c:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	init_LCD();
 420:	0e 94 7b 00 	call	0xf6	; 0xf6 <init_LCD>
	DDRD |= (1<<PD5);	/* Make OC1A pin as output */ 
 424:	8d 9a       	sbi	0x11, 5	; 17
	TCNT1 = 0;		/* Set timer1 count zero */
 426:	1d bc       	out	0x2d, r1	; 45
 428:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;		/* Set TOP count for timer1 in ICR1 register */
 42a:	83 ec       	ldi	r24, 0xC3	; 195
 42c:	99 e0       	ldi	r25, 0x09	; 9
 42e:	97 bd       	out	0x27, r25	; 39
 430:	86 bd       	out	0x26, r24	; 38

	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
 432:	82 e8       	ldi	r24, 0x82	; 130
 434:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
 436:	8b e1       	ldi	r24, 0x1B	; 27
 438:	8e bd       	out	0x2e, r24	; 46
	while(1)
	{
	   OCR1A = 65 + (ADCu16_Read(3)/4.35);
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	0e 94 51 00 	call	0xa2	; 0xa2 <ADCu16_Read>
 440:	bc 01       	movw	r22, r24
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 8c 03 	call	0x718	; 0x718 <__floatunsisf>
 44a:	23 e3       	ldi	r18, 0x33	; 51
 44c:	33 e3       	ldi	r19, 0x33	; 51
 44e:	4b e8       	ldi	r20, 0x8B	; 139
 450:	50 e4       	ldi	r21, 0x40	; 64
 452:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__divsf3>
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	42 e8       	ldi	r20, 0x82	; 130
 45c:	52 e4       	ldi	r21, 0x42	; 66
 45e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__addsf3>
 462:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fixunssfsi>
 466:	7b bd       	out	0x2b, r23	; 43
 468:	6a bd       	out	0x2a, r22	; 42
	   LCD_write_int(65 + (ADCu16_Read(3)/4.35));
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	0e 94 51 00 	call	0xa2	; 0xa2 <ADCu16_Read>
 470:	bc 01       	movw	r22, r24
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 8c 03 	call	0x718	; 0x718 <__floatunsisf>
 47a:	23 e3       	ldi	r18, 0x33	; 51
 47c:	33 e3       	ldi	r19, 0x33	; 51
 47e:	4b e8       	ldi	r20, 0x8B	; 139
 480:	50 e4       	ldi	r21, 0x40	; 64
 482:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__divsf3>
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	42 e8       	ldi	r20, 0x82	; 130
 48c:	52 e4       	ldi	r21, 0x42	; 66
 48e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__addsf3>
 492:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fixunssfsi>
 496:	cb 01       	movw	r24, r22
 498:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_write_int>
	   /* Read ADC channel 0 and make count in between 65-300 i.e. 0.5-2.4 mSec duty cycle variation */
	}
 49c:	ce cf       	rjmp	.-100    	; 0x43a <main+0x1e>

0000049e <__udivmodhi4>:
 49e:	aa 1b       	sub	r26, r26
 4a0:	bb 1b       	sub	r27, r27
 4a2:	51 e1       	ldi	r21, 0x11	; 17
 4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <__udivmodhi4_ep>

000004a6 <__udivmodhi4_loop>:
 4a6:	aa 1f       	adc	r26, r26
 4a8:	bb 1f       	adc	r27, r27
 4aa:	a6 17       	cp	r26, r22
 4ac:	b7 07       	cpc	r27, r23
 4ae:	10 f0       	brcs	.+4      	; 0x4b4 <__udivmodhi4_ep>
 4b0:	a6 1b       	sub	r26, r22
 4b2:	b7 0b       	sbc	r27, r23

000004b4 <__udivmodhi4_ep>:
 4b4:	88 1f       	adc	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	5a 95       	dec	r21
 4ba:	a9 f7       	brne	.-22     	; 0x4a6 <__udivmodhi4_loop>
 4bc:	80 95       	com	r24
 4be:	90 95       	com	r25
 4c0:	bc 01       	movw	r22, r24
 4c2:	cd 01       	movw	r24, r26
 4c4:	08 95       	ret

000004c6 <__divmodhi4>:
 4c6:	97 fb       	bst	r25, 7
 4c8:	07 2e       	mov	r0, r23
 4ca:	16 f4       	brtc	.+4      	; 0x4d0 <__divmodhi4+0xa>
 4cc:	00 94       	com	r0
 4ce:	07 d0       	rcall	.+14     	; 0x4de <__divmodhi4_neg1>
 4d0:	77 fd       	sbrc	r23, 7
 4d2:	09 d0       	rcall	.+18     	; 0x4e6 <__divmodhi4_neg2>
 4d4:	0e 94 4f 02 	call	0x49e	; 0x49e <__udivmodhi4>
 4d8:	07 fc       	sbrc	r0, 7
 4da:	05 d0       	rcall	.+10     	; 0x4e6 <__divmodhi4_neg2>
 4dc:	3e f4       	brtc	.+14     	; 0x4ec <__divmodhi4_exit>

000004de <__divmodhi4_neg1>:
 4de:	90 95       	com	r25
 4e0:	81 95       	neg	r24
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	08 95       	ret

000004e6 <__divmodhi4_neg2>:
 4e6:	70 95       	com	r23
 4e8:	61 95       	neg	r22
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255

000004ec <__divmodhi4_exit>:
 4ec:	08 95       	ret

000004ee <__subsf3>:
 4ee:	50 58       	subi	r21, 0x80	; 128

000004f0 <__addsf3>:
 4f0:	bb 27       	eor	r27, r27
 4f2:	aa 27       	eor	r26, r26
 4f4:	0e 94 8f 02 	call	0x51e	; 0x51e <__addsf3x>
 4f8:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_round>
 4fc:	0e 94 34 04 	call	0x868	; 0x868 <__fp_pscA>
 500:	38 f0       	brcs	.+14     	; 0x510 <__addsf3+0x20>
 502:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_pscB>
 506:	20 f0       	brcs	.+8      	; 0x510 <__addsf3+0x20>
 508:	39 f4       	brne	.+14     	; 0x518 <__addsf3+0x28>
 50a:	9f 3f       	cpi	r25, 0xFF	; 255
 50c:	19 f4       	brne	.+6      	; 0x514 <__addsf3+0x24>
 50e:	26 f4       	brtc	.+8      	; 0x518 <__addsf3+0x28>
 510:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_nan>
 514:	0e f4       	brtc	.+2      	; 0x518 <__addsf3+0x28>
 516:	e0 95       	com	r30
 518:	e7 fb       	bst	r30, 7
 51a:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>

0000051e <__addsf3x>:
 51e:	e9 2f       	mov	r30, r25
 520:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_split3>
 524:	58 f3       	brcs	.-42     	; 0x4fc <__addsf3+0xc>
 526:	ba 17       	cp	r27, r26
 528:	62 07       	cpc	r22, r18
 52a:	73 07       	cpc	r23, r19
 52c:	84 07       	cpc	r24, r20
 52e:	95 07       	cpc	r25, r21
 530:	20 f0       	brcs	.+8      	; 0x53a <__addsf3x+0x1c>
 532:	79 f4       	brne	.+30     	; 0x552 <__addsf3x+0x34>
 534:	a6 f5       	brtc	.+104    	; 0x59e <__addsf3x+0x80>
 536:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__fp_zero>
 53a:	0e f4       	brtc	.+2      	; 0x53e <__addsf3x+0x20>
 53c:	e0 95       	com	r30
 53e:	0b 2e       	mov	r0, r27
 540:	ba 2f       	mov	r27, r26
 542:	a0 2d       	mov	r26, r0
 544:	0b 01       	movw	r0, r22
 546:	b9 01       	movw	r22, r18
 548:	90 01       	movw	r18, r0
 54a:	0c 01       	movw	r0, r24
 54c:	ca 01       	movw	r24, r20
 54e:	a0 01       	movw	r20, r0
 550:	11 24       	eor	r1, r1
 552:	ff 27       	eor	r31, r31
 554:	59 1b       	sub	r21, r25
 556:	99 f0       	breq	.+38     	; 0x57e <__addsf3x+0x60>
 558:	59 3f       	cpi	r21, 0xF9	; 249
 55a:	50 f4       	brcc	.+20     	; 0x570 <__addsf3x+0x52>
 55c:	50 3e       	cpi	r21, 0xE0	; 224
 55e:	68 f1       	brcs	.+90     	; 0x5ba <__addsf3x+0x9c>
 560:	1a 16       	cp	r1, r26
 562:	f0 40       	sbci	r31, 0x00	; 0
 564:	a2 2f       	mov	r26, r18
 566:	23 2f       	mov	r18, r19
 568:	34 2f       	mov	r19, r20
 56a:	44 27       	eor	r20, r20
 56c:	58 5f       	subi	r21, 0xF8	; 248
 56e:	f3 cf       	rjmp	.-26     	; 0x556 <__addsf3x+0x38>
 570:	46 95       	lsr	r20
 572:	37 95       	ror	r19
 574:	27 95       	ror	r18
 576:	a7 95       	ror	r26
 578:	f0 40       	sbci	r31, 0x00	; 0
 57a:	53 95       	inc	r21
 57c:	c9 f7       	brne	.-14     	; 0x570 <__addsf3x+0x52>
 57e:	7e f4       	brtc	.+30     	; 0x59e <__addsf3x+0x80>
 580:	1f 16       	cp	r1, r31
 582:	ba 0b       	sbc	r27, r26
 584:	62 0b       	sbc	r22, r18
 586:	73 0b       	sbc	r23, r19
 588:	84 0b       	sbc	r24, r20
 58a:	ba f0       	brmi	.+46     	; 0x5ba <__addsf3x+0x9c>
 58c:	91 50       	subi	r25, 0x01	; 1
 58e:	a1 f0       	breq	.+40     	; 0x5b8 <__addsf3x+0x9a>
 590:	ff 0f       	add	r31, r31
 592:	bb 1f       	adc	r27, r27
 594:	66 1f       	adc	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	88 1f       	adc	r24, r24
 59a:	c2 f7       	brpl	.-16     	; 0x58c <__addsf3x+0x6e>
 59c:	0e c0       	rjmp	.+28     	; 0x5ba <__addsf3x+0x9c>
 59e:	ba 0f       	add	r27, r26
 5a0:	62 1f       	adc	r22, r18
 5a2:	73 1f       	adc	r23, r19
 5a4:	84 1f       	adc	r24, r20
 5a6:	48 f4       	brcc	.+18     	; 0x5ba <__addsf3x+0x9c>
 5a8:	87 95       	ror	r24
 5aa:	77 95       	ror	r23
 5ac:	67 95       	ror	r22
 5ae:	b7 95       	ror	r27
 5b0:	f7 95       	ror	r31
 5b2:	9e 3f       	cpi	r25, 0xFE	; 254
 5b4:	08 f0       	brcs	.+2      	; 0x5b8 <__addsf3x+0x9a>
 5b6:	b0 cf       	rjmp	.-160    	; 0x518 <__addsf3+0x28>
 5b8:	93 95       	inc	r25
 5ba:	88 0f       	add	r24, r24
 5bc:	08 f0       	brcs	.+2      	; 0x5c0 <__addsf3x+0xa2>
 5be:	99 27       	eor	r25, r25
 5c0:	ee 0f       	add	r30, r30
 5c2:	97 95       	ror	r25
 5c4:	87 95       	ror	r24
 5c6:	08 95       	ret

000005c8 <__divsf3>:
 5c8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__divsf3x>
 5cc:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_round>
 5d0:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_pscB>
 5d4:	58 f0       	brcs	.+22     	; 0x5ec <__divsf3+0x24>
 5d6:	0e 94 34 04 	call	0x868	; 0x868 <__fp_pscA>
 5da:	40 f0       	brcs	.+16     	; 0x5ec <__divsf3+0x24>
 5dc:	29 f4       	brne	.+10     	; 0x5e8 <__divsf3+0x20>
 5de:	5f 3f       	cpi	r21, 0xFF	; 255
 5e0:	29 f0       	breq	.+10     	; 0x5ec <__divsf3+0x24>
 5e2:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>
 5e6:	51 11       	cpse	r21, r1
 5e8:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_szero>
 5ec:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_nan>

000005f0 <__divsf3x>:
 5f0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_split3>
 5f4:	68 f3       	brcs	.-38     	; 0x5d0 <__divsf3+0x8>

000005f6 <__divsf3_pse>:
 5f6:	99 23       	and	r25, r25
 5f8:	b1 f3       	breq	.-20     	; 0x5e6 <__divsf3+0x1e>
 5fa:	55 23       	and	r21, r21
 5fc:	91 f3       	breq	.-28     	; 0x5e2 <__divsf3+0x1a>
 5fe:	95 1b       	sub	r25, r21
 600:	55 0b       	sbc	r21, r21
 602:	bb 27       	eor	r27, r27
 604:	aa 27       	eor	r26, r26
 606:	62 17       	cp	r22, r18
 608:	73 07       	cpc	r23, r19
 60a:	84 07       	cpc	r24, r20
 60c:	38 f0       	brcs	.+14     	; 0x61c <__divsf3_pse+0x26>
 60e:	9f 5f       	subi	r25, 0xFF	; 255
 610:	5f 4f       	sbci	r21, 0xFF	; 255
 612:	22 0f       	add	r18, r18
 614:	33 1f       	adc	r19, r19
 616:	44 1f       	adc	r20, r20
 618:	aa 1f       	adc	r26, r26
 61a:	a9 f3       	breq	.-22     	; 0x606 <__divsf3_pse+0x10>
 61c:	35 d0       	rcall	.+106    	; 0x688 <__divsf3_pse+0x92>
 61e:	0e 2e       	mov	r0, r30
 620:	3a f0       	brmi	.+14     	; 0x630 <__divsf3_pse+0x3a>
 622:	e0 e8       	ldi	r30, 0x80	; 128
 624:	32 d0       	rcall	.+100    	; 0x68a <__divsf3_pse+0x94>
 626:	91 50       	subi	r25, 0x01	; 1
 628:	50 40       	sbci	r21, 0x00	; 0
 62a:	e6 95       	lsr	r30
 62c:	00 1c       	adc	r0, r0
 62e:	ca f7       	brpl	.-14     	; 0x622 <__divsf3_pse+0x2c>
 630:	2b d0       	rcall	.+86     	; 0x688 <__divsf3_pse+0x92>
 632:	fe 2f       	mov	r31, r30
 634:	29 d0       	rcall	.+82     	; 0x688 <__divsf3_pse+0x92>
 636:	66 0f       	add	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24
 63c:	bb 1f       	adc	r27, r27
 63e:	26 17       	cp	r18, r22
 640:	37 07       	cpc	r19, r23
 642:	48 07       	cpc	r20, r24
 644:	ab 07       	cpc	r26, r27
 646:	b0 e8       	ldi	r27, 0x80	; 128
 648:	09 f0       	breq	.+2      	; 0x64c <__divsf3_pse+0x56>
 64a:	bb 0b       	sbc	r27, r27
 64c:	80 2d       	mov	r24, r0
 64e:	bf 01       	movw	r22, r30
 650:	ff 27       	eor	r31, r31
 652:	93 58       	subi	r25, 0x83	; 131
 654:	5f 4f       	sbci	r21, 0xFF	; 255
 656:	3a f0       	brmi	.+14     	; 0x666 <__divsf3_pse+0x70>
 658:	9e 3f       	cpi	r25, 0xFE	; 254
 65a:	51 05       	cpc	r21, r1
 65c:	78 f0       	brcs	.+30     	; 0x67c <__divsf3_pse+0x86>
 65e:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>
 662:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_szero>
 666:	5f 3f       	cpi	r21, 0xFF	; 255
 668:	e4 f3       	brlt	.-8      	; 0x662 <__divsf3_pse+0x6c>
 66a:	98 3e       	cpi	r25, 0xE8	; 232
 66c:	d4 f3       	brlt	.-12     	; 0x662 <__divsf3_pse+0x6c>
 66e:	86 95       	lsr	r24
 670:	77 95       	ror	r23
 672:	67 95       	ror	r22
 674:	b7 95       	ror	r27
 676:	f7 95       	ror	r31
 678:	9f 5f       	subi	r25, 0xFF	; 255
 67a:	c9 f7       	brne	.-14     	; 0x66e <__divsf3_pse+0x78>
 67c:	88 0f       	add	r24, r24
 67e:	91 1d       	adc	r25, r1
 680:	96 95       	lsr	r25
 682:	87 95       	ror	r24
 684:	97 f9       	bld	r25, 7
 686:	08 95       	ret
 688:	e1 e0       	ldi	r30, 0x01	; 1
 68a:	66 0f       	add	r22, r22
 68c:	77 1f       	adc	r23, r23
 68e:	88 1f       	adc	r24, r24
 690:	bb 1f       	adc	r27, r27
 692:	62 17       	cp	r22, r18
 694:	73 07       	cpc	r23, r19
 696:	84 07       	cpc	r24, r20
 698:	ba 07       	cpc	r27, r26
 69a:	20 f0       	brcs	.+8      	; 0x6a4 <__divsf3_pse+0xae>
 69c:	62 1b       	sub	r22, r18
 69e:	73 0b       	sbc	r23, r19
 6a0:	84 0b       	sbc	r24, r20
 6a2:	ba 0b       	sbc	r27, r26
 6a4:	ee 1f       	adc	r30, r30
 6a6:	88 f7       	brcc	.-30     	; 0x68a <__divsf3_pse+0x94>
 6a8:	e0 95       	com	r30
 6aa:	08 95       	ret

000006ac <__fixsfsi>:
 6ac:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fixunssfsi>
 6b0:	68 94       	set
 6b2:	b1 11       	cpse	r27, r1
 6b4:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_szero>
 6b8:	08 95       	ret

000006ba <__fixunssfsi>:
 6ba:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fp_splitA>
 6be:	88 f0       	brcs	.+34     	; 0x6e2 <__fixunssfsi+0x28>
 6c0:	9f 57       	subi	r25, 0x7F	; 127
 6c2:	98 f0       	brcs	.+38     	; 0x6ea <__fixunssfsi+0x30>
 6c4:	b9 2f       	mov	r27, r25
 6c6:	99 27       	eor	r25, r25
 6c8:	b7 51       	subi	r27, 0x17	; 23
 6ca:	b0 f0       	brcs	.+44     	; 0x6f8 <__fixunssfsi+0x3e>
 6cc:	e1 f0       	breq	.+56     	; 0x706 <__fixunssfsi+0x4c>
 6ce:	66 0f       	add	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	88 1f       	adc	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	1a f0       	brmi	.+6      	; 0x6de <__fixunssfsi+0x24>
 6d8:	ba 95       	dec	r27
 6da:	c9 f7       	brne	.-14     	; 0x6ce <__fixunssfsi+0x14>
 6dc:	14 c0       	rjmp	.+40     	; 0x706 <__fixunssfsi+0x4c>
 6de:	b1 30       	cpi	r27, 0x01	; 1
 6e0:	91 f0       	breq	.+36     	; 0x706 <__fixunssfsi+0x4c>
 6e2:	0e 94 75 04 	call	0x8ea	; 0x8ea <__fp_zero>
 6e6:	b1 e0       	ldi	r27, 0x01	; 1
 6e8:	08 95       	ret
 6ea:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__fp_zero>
 6ee:	67 2f       	mov	r22, r23
 6f0:	78 2f       	mov	r23, r24
 6f2:	88 27       	eor	r24, r24
 6f4:	b8 5f       	subi	r27, 0xF8	; 248
 6f6:	39 f0       	breq	.+14     	; 0x706 <__fixunssfsi+0x4c>
 6f8:	b9 3f       	cpi	r27, 0xF9	; 249
 6fa:	cc f3       	brlt	.-14     	; 0x6ee <__fixunssfsi+0x34>
 6fc:	86 95       	lsr	r24
 6fe:	77 95       	ror	r23
 700:	67 95       	ror	r22
 702:	b3 95       	inc	r27
 704:	d9 f7       	brne	.-10     	; 0x6fc <__fixunssfsi+0x42>
 706:	3e f4       	brtc	.+14     	; 0x716 <__fixunssfsi+0x5c>
 708:	90 95       	com	r25
 70a:	80 95       	com	r24
 70c:	70 95       	com	r23
 70e:	61 95       	neg	r22
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	8f 4f       	sbci	r24, 0xFF	; 255
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	08 95       	ret

00000718 <__floatunsisf>:
 718:	e8 94       	clt
 71a:	09 c0       	rjmp	.+18     	; 0x72e <__floatsisf+0x12>

0000071c <__floatsisf>:
 71c:	97 fb       	bst	r25, 7
 71e:	3e f4       	brtc	.+14     	; 0x72e <__floatsisf+0x12>
 720:	90 95       	com	r25
 722:	80 95       	com	r24
 724:	70 95       	com	r23
 726:	61 95       	neg	r22
 728:	7f 4f       	sbci	r23, 0xFF	; 255
 72a:	8f 4f       	sbci	r24, 0xFF	; 255
 72c:	9f 4f       	sbci	r25, 0xFF	; 255
 72e:	99 23       	and	r25, r25
 730:	a9 f0       	breq	.+42     	; 0x75c <__floatsisf+0x40>
 732:	f9 2f       	mov	r31, r25
 734:	96 e9       	ldi	r25, 0x96	; 150
 736:	bb 27       	eor	r27, r27
 738:	93 95       	inc	r25
 73a:	f6 95       	lsr	r31
 73c:	87 95       	ror	r24
 73e:	77 95       	ror	r23
 740:	67 95       	ror	r22
 742:	b7 95       	ror	r27
 744:	f1 11       	cpse	r31, r1
 746:	f8 cf       	rjmp	.-16     	; 0x738 <__floatsisf+0x1c>
 748:	fa f4       	brpl	.+62     	; 0x788 <__floatsisf+0x6c>
 74a:	bb 0f       	add	r27, r27
 74c:	11 f4       	brne	.+4      	; 0x752 <__floatsisf+0x36>
 74e:	60 ff       	sbrs	r22, 0
 750:	1b c0       	rjmp	.+54     	; 0x788 <__floatsisf+0x6c>
 752:	6f 5f       	subi	r22, 0xFF	; 255
 754:	7f 4f       	sbci	r23, 0xFF	; 255
 756:	8f 4f       	sbci	r24, 0xFF	; 255
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	16 c0       	rjmp	.+44     	; 0x788 <__floatsisf+0x6c>
 75c:	88 23       	and	r24, r24
 75e:	11 f0       	breq	.+4      	; 0x764 <__floatsisf+0x48>
 760:	96 e9       	ldi	r25, 0x96	; 150
 762:	11 c0       	rjmp	.+34     	; 0x786 <__floatsisf+0x6a>
 764:	77 23       	and	r23, r23
 766:	21 f0       	breq	.+8      	; 0x770 <__floatsisf+0x54>
 768:	9e e8       	ldi	r25, 0x8E	; 142
 76a:	87 2f       	mov	r24, r23
 76c:	76 2f       	mov	r23, r22
 76e:	05 c0       	rjmp	.+10     	; 0x77a <__floatsisf+0x5e>
 770:	66 23       	and	r22, r22
 772:	71 f0       	breq	.+28     	; 0x790 <__floatsisf+0x74>
 774:	96 e8       	ldi	r25, 0x86	; 134
 776:	86 2f       	mov	r24, r22
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	60 e0       	ldi	r22, 0x00	; 0
 77c:	2a f0       	brmi	.+10     	; 0x788 <__floatsisf+0x6c>
 77e:	9a 95       	dec	r25
 780:	66 0f       	add	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	88 1f       	adc	r24, r24
 786:	da f7       	brpl	.-10     	; 0x77e <__floatsisf+0x62>
 788:	88 0f       	add	r24, r24
 78a:	96 95       	lsr	r25
 78c:	87 95       	ror	r24
 78e:	97 f9       	bld	r25, 7
 790:	08 95       	ret
 792:	0e 94 34 04 	call	0x868	; 0x868 <__fp_pscA>
 796:	20 f0       	brcs	.+8      	; 0x7a0 <__floatsisf+0x84>
 798:	19 f0       	breq	.+6      	; 0x7a0 <__floatsisf+0x84>
 79a:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_pscB>
 79e:	50 f4       	brcc	.+20     	; 0x7b4 <fmod+0xc>
 7a0:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_nan>
 7a4:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_szero>

000007a8 <fmod>:
 7a8:	e9 2f       	mov	r30, r25
 7aa:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_split3>
 7ae:	88 f3       	brcs	.-30     	; 0x792 <__floatsisf+0x76>
 7b0:	55 23       	and	r21, r21
 7b2:	b1 f3       	breq	.-20     	; 0x7a0 <__floatsisf+0x84>
 7b4:	e7 fb       	bst	r30, 7
 7b6:	62 17       	cp	r22, r18
 7b8:	73 07       	cpc	r23, r19
 7ba:	84 07       	cpc	r24, r20
 7bc:	95 07       	cpc	r25, r21
 7be:	a8 f1       	brcs	.+106    	; 0x82a <fmod+0x82>
 7c0:	89 f3       	breq	.-30     	; 0x7a4 <__floatsisf+0x88>
 7c2:	e9 2f       	mov	r30, r25
 7c4:	ff 27       	eor	r31, r31
 7c6:	88 23       	and	r24, r24
 7c8:	2a f0       	brmi	.+10     	; 0x7d4 <fmod+0x2c>
 7ca:	31 97       	sbiw	r30, 0x01	; 1
 7cc:	66 0f       	add	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	da f7       	brpl	.-10     	; 0x7ca <fmod+0x22>
 7d4:	95 2f       	mov	r25, r21
 7d6:	55 27       	eor	r21, r21
 7d8:	44 23       	and	r20, r20
 7da:	32 f0       	brmi	.+12     	; 0x7e8 <fmod+0x40>
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	50 40       	sbci	r21, 0x00	; 0
 7e0:	22 0f       	add	r18, r18
 7e2:	33 1f       	adc	r19, r19
 7e4:	44 1f       	adc	r20, r20
 7e6:	d2 f7       	brpl	.-12     	; 0x7dc <fmod+0x34>
 7e8:	bb 27       	eor	r27, r27
 7ea:	e9 1b       	sub	r30, r25
 7ec:	f5 0b       	sbc	r31, r21
 7ee:	62 1b       	sub	r22, r18
 7f0:	73 0b       	sbc	r23, r19
 7f2:	84 0b       	sbc	r24, r20
 7f4:	b1 09       	sbc	r27, r1
 7f6:	b1 f2       	breq	.-84     	; 0x7a4 <__floatsisf+0x88>
 7f8:	22 f4       	brpl	.+8      	; 0x802 <fmod+0x5a>
 7fa:	62 0f       	add	r22, r18
 7fc:	73 1f       	adc	r23, r19
 7fe:	84 1f       	adc	r24, r20
 800:	b1 1d       	adc	r27, r1
 802:	31 97       	sbiw	r30, 0x01	; 1
 804:	2a f0       	brmi	.+10     	; 0x810 <fmod+0x68>
 806:	66 0f       	add	r22, r22
 808:	77 1f       	adc	r23, r23
 80a:	88 1f       	adc	r24, r24
 80c:	bb 1f       	adc	r27, r27
 80e:	ef cf       	rjmp	.-34     	; 0x7ee <fmod+0x46>
 810:	91 50       	subi	r25, 0x01	; 1
 812:	50 40       	sbci	r21, 0x00	; 0
 814:	62 f0       	brmi	.+24     	; 0x82e <fmod+0x86>
 816:	41 f0       	breq	.+16     	; 0x828 <fmod+0x80>
 818:	88 23       	and	r24, r24
 81a:	32 f0       	brmi	.+12     	; 0x828 <fmod+0x80>
 81c:	66 0f       	add	r22, r22
 81e:	77 1f       	adc	r23, r23
 820:	88 1f       	adc	r24, r24
 822:	91 50       	subi	r25, 0x01	; 1
 824:	50 40       	sbci	r21, 0x00	; 0
 826:	c1 f7       	brne	.-16     	; 0x818 <fmod+0x70>
 828:	93 95       	inc	r25
 82a:	0c 94 23 04 	jmp	0x846	; 0x846 <__fp_mpack>
 82e:	86 95       	lsr	r24
 830:	77 95       	ror	r23
 832:	67 95       	ror	r22
 834:	9f 5f       	subi	r25, 0xFF	; 255
 836:	d9 f7       	brne	.-10     	; 0x82e <fmod+0x86>
 838:	f7 cf       	rjmp	.-18     	; 0x828 <fmod+0x80>

0000083a <__fp_inf>:
 83a:	97 f9       	bld	r25, 7
 83c:	9f 67       	ori	r25, 0x7F	; 127
 83e:	80 e8       	ldi	r24, 0x80	; 128
 840:	70 e0       	ldi	r23, 0x00	; 0
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	08 95       	ret

00000846 <__fp_mpack>:
 846:	9f 3f       	cpi	r25, 0xFF	; 255
 848:	31 f0       	breq	.+12     	; 0x856 <__fp_mpack_finite+0xc>

0000084a <__fp_mpack_finite>:
 84a:	91 50       	subi	r25, 0x01	; 1
 84c:	20 f4       	brcc	.+8      	; 0x856 <__fp_mpack_finite+0xc>
 84e:	87 95       	ror	r24
 850:	77 95       	ror	r23
 852:	67 95       	ror	r22
 854:	b7 95       	ror	r27
 856:	88 0f       	add	r24, r24
 858:	91 1d       	adc	r25, r1
 85a:	96 95       	lsr	r25
 85c:	87 95       	ror	r24
 85e:	97 f9       	bld	r25, 7
 860:	08 95       	ret

00000862 <__fp_nan>:
 862:	9f ef       	ldi	r25, 0xFF	; 255
 864:	80 ec       	ldi	r24, 0xC0	; 192
 866:	08 95       	ret

00000868 <__fp_pscA>:
 868:	00 24       	eor	r0, r0
 86a:	0a 94       	dec	r0
 86c:	16 16       	cp	r1, r22
 86e:	17 06       	cpc	r1, r23
 870:	18 06       	cpc	r1, r24
 872:	09 06       	cpc	r0, r25
 874:	08 95       	ret

00000876 <__fp_pscB>:
 876:	00 24       	eor	r0, r0
 878:	0a 94       	dec	r0
 87a:	12 16       	cp	r1, r18
 87c:	13 06       	cpc	r1, r19
 87e:	14 06       	cpc	r1, r20
 880:	05 06       	cpc	r0, r21
 882:	08 95       	ret

00000884 <__fp_round>:
 884:	09 2e       	mov	r0, r25
 886:	03 94       	inc	r0
 888:	00 0c       	add	r0, r0
 88a:	11 f4       	brne	.+4      	; 0x890 <__fp_round+0xc>
 88c:	88 23       	and	r24, r24
 88e:	52 f0       	brmi	.+20     	; 0x8a4 <__fp_round+0x20>
 890:	bb 0f       	add	r27, r27
 892:	40 f4       	brcc	.+16     	; 0x8a4 <__fp_round+0x20>
 894:	bf 2b       	or	r27, r31
 896:	11 f4       	brne	.+4      	; 0x89c <__fp_round+0x18>
 898:	60 ff       	sbrs	r22, 0
 89a:	04 c0       	rjmp	.+8      	; 0x8a4 <__fp_round+0x20>
 89c:	6f 5f       	subi	r22, 0xFF	; 255
 89e:	7f 4f       	sbci	r23, 0xFF	; 255
 8a0:	8f 4f       	sbci	r24, 0xFF	; 255
 8a2:	9f 4f       	sbci	r25, 0xFF	; 255
 8a4:	08 95       	ret

000008a6 <__fp_split3>:
 8a6:	57 fd       	sbrc	r21, 7
 8a8:	90 58       	subi	r25, 0x80	; 128
 8aa:	44 0f       	add	r20, r20
 8ac:	55 1f       	adc	r21, r21
 8ae:	59 f0       	breq	.+22     	; 0x8c6 <__fp_splitA+0x10>
 8b0:	5f 3f       	cpi	r21, 0xFF	; 255
 8b2:	71 f0       	breq	.+28     	; 0x8d0 <__fp_splitA+0x1a>
 8b4:	47 95       	ror	r20

000008b6 <__fp_splitA>:
 8b6:	88 0f       	add	r24, r24
 8b8:	97 fb       	bst	r25, 7
 8ba:	99 1f       	adc	r25, r25
 8bc:	61 f0       	breq	.+24     	; 0x8d6 <__fp_splitA+0x20>
 8be:	9f 3f       	cpi	r25, 0xFF	; 255
 8c0:	79 f0       	breq	.+30     	; 0x8e0 <__fp_splitA+0x2a>
 8c2:	87 95       	ror	r24
 8c4:	08 95       	ret
 8c6:	12 16       	cp	r1, r18
 8c8:	13 06       	cpc	r1, r19
 8ca:	14 06       	cpc	r1, r20
 8cc:	55 1f       	adc	r21, r21
 8ce:	f2 cf       	rjmp	.-28     	; 0x8b4 <__fp_split3+0xe>
 8d0:	46 95       	lsr	r20
 8d2:	f1 df       	rcall	.-30     	; 0x8b6 <__fp_splitA>
 8d4:	08 c0       	rjmp	.+16     	; 0x8e6 <__fp_splitA+0x30>
 8d6:	16 16       	cp	r1, r22
 8d8:	17 06       	cpc	r1, r23
 8da:	18 06       	cpc	r1, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	f1 cf       	rjmp	.-30     	; 0x8c2 <__fp_splitA+0xc>
 8e0:	86 95       	lsr	r24
 8e2:	71 05       	cpc	r23, r1
 8e4:	61 05       	cpc	r22, r1
 8e6:	08 94       	sec
 8e8:	08 95       	ret

000008ea <__fp_zero>:
 8ea:	e8 94       	clt

000008ec <__fp_szero>:
 8ec:	bb 27       	eor	r27, r27
 8ee:	66 27       	eor	r22, r22
 8f0:	77 27       	eor	r23, r23
 8f2:	cb 01       	movw	r24, r22
 8f4:	97 f9       	bld	r25, 7
 8f6:	08 95       	ret

000008f8 <__mulsf3>:
 8f8:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3x>
 8fc:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_round>
 900:	0e 94 34 04 	call	0x868	; 0x868 <__fp_pscA>
 904:	38 f0       	brcs	.+14     	; 0x914 <__mulsf3+0x1c>
 906:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_pscB>
 90a:	20 f0       	brcs	.+8      	; 0x914 <__mulsf3+0x1c>
 90c:	95 23       	and	r25, r21
 90e:	11 f0       	breq	.+4      	; 0x914 <__mulsf3+0x1c>
 910:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>
 914:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_nan>
 918:	11 24       	eor	r1, r1
 91a:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_szero>

0000091e <__mulsf3x>:
 91e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_split3>
 922:	70 f3       	brcs	.-36     	; 0x900 <__mulsf3+0x8>

00000924 <__mulsf3_pse>:
 924:	95 9f       	mul	r25, r21
 926:	c1 f3       	breq	.-16     	; 0x918 <__mulsf3+0x20>
 928:	95 0f       	add	r25, r21
 92a:	50 e0       	ldi	r21, 0x00	; 0
 92c:	55 1f       	adc	r21, r21
 92e:	62 9f       	mul	r22, r18
 930:	f0 01       	movw	r30, r0
 932:	72 9f       	mul	r23, r18
 934:	bb 27       	eor	r27, r27
 936:	f0 0d       	add	r31, r0
 938:	b1 1d       	adc	r27, r1
 93a:	63 9f       	mul	r22, r19
 93c:	aa 27       	eor	r26, r26
 93e:	f0 0d       	add	r31, r0
 940:	b1 1d       	adc	r27, r1
 942:	aa 1f       	adc	r26, r26
 944:	64 9f       	mul	r22, r20
 946:	66 27       	eor	r22, r22
 948:	b0 0d       	add	r27, r0
 94a:	a1 1d       	adc	r26, r1
 94c:	66 1f       	adc	r22, r22
 94e:	82 9f       	mul	r24, r18
 950:	22 27       	eor	r18, r18
 952:	b0 0d       	add	r27, r0
 954:	a1 1d       	adc	r26, r1
 956:	62 1f       	adc	r22, r18
 958:	73 9f       	mul	r23, r19
 95a:	b0 0d       	add	r27, r0
 95c:	a1 1d       	adc	r26, r1
 95e:	62 1f       	adc	r22, r18
 960:	83 9f       	mul	r24, r19
 962:	a0 0d       	add	r26, r0
 964:	61 1d       	adc	r22, r1
 966:	22 1f       	adc	r18, r18
 968:	74 9f       	mul	r23, r20
 96a:	33 27       	eor	r19, r19
 96c:	a0 0d       	add	r26, r0
 96e:	61 1d       	adc	r22, r1
 970:	23 1f       	adc	r18, r19
 972:	84 9f       	mul	r24, r20
 974:	60 0d       	add	r22, r0
 976:	21 1d       	adc	r18, r1
 978:	82 2f       	mov	r24, r18
 97a:	76 2f       	mov	r23, r22
 97c:	6a 2f       	mov	r22, r26
 97e:	11 24       	eor	r1, r1
 980:	9f 57       	subi	r25, 0x7F	; 127
 982:	50 40       	sbci	r21, 0x00	; 0
 984:	9a f0       	brmi	.+38     	; 0x9ac <__mulsf3_pse+0x88>
 986:	f1 f0       	breq	.+60     	; 0x9c4 <__mulsf3_pse+0xa0>
 988:	88 23       	and	r24, r24
 98a:	4a f0       	brmi	.+18     	; 0x99e <__mulsf3_pse+0x7a>
 98c:	ee 0f       	add	r30, r30
 98e:	ff 1f       	adc	r31, r31
 990:	bb 1f       	adc	r27, r27
 992:	66 1f       	adc	r22, r22
 994:	77 1f       	adc	r23, r23
 996:	88 1f       	adc	r24, r24
 998:	91 50       	subi	r25, 0x01	; 1
 99a:	50 40       	sbci	r21, 0x00	; 0
 99c:	a9 f7       	brne	.-22     	; 0x988 <__mulsf3_pse+0x64>
 99e:	9e 3f       	cpi	r25, 0xFE	; 254
 9a0:	51 05       	cpc	r21, r1
 9a2:	80 f0       	brcs	.+32     	; 0x9c4 <__mulsf3_pse+0xa0>
 9a4:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_inf>
 9a8:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_szero>
 9ac:	5f 3f       	cpi	r21, 0xFF	; 255
 9ae:	e4 f3       	brlt	.-8      	; 0x9a8 <__mulsf3_pse+0x84>
 9b0:	98 3e       	cpi	r25, 0xE8	; 232
 9b2:	d4 f3       	brlt	.-12     	; 0x9a8 <__mulsf3_pse+0x84>
 9b4:	86 95       	lsr	r24
 9b6:	77 95       	ror	r23
 9b8:	67 95       	ror	r22
 9ba:	b7 95       	ror	r27
 9bc:	f7 95       	ror	r31
 9be:	e7 95       	ror	r30
 9c0:	9f 5f       	subi	r25, 0xFF	; 255
 9c2:	c1 f7       	brne	.-16     	; 0x9b4 <__mulsf3_pse+0x90>
 9c4:	fe 2b       	or	r31, r30
 9c6:	88 0f       	add	r24, r24
 9c8:	91 1d       	adc	r25, r1
 9ca:	96 95       	lsr	r25
 9cc:	87 95       	ror	r24
 9ce:	97 f9       	bld	r25, 7
 9d0:	08 95       	ret

000009d2 <malloc>:
 9d2:	cf 93       	push	r28
 9d4:	df 93       	push	r29
 9d6:	82 30       	cpi	r24, 0x02	; 2
 9d8:	91 05       	cpc	r25, r1
 9da:	10 f4       	brcc	.+4      	; 0x9e0 <malloc+0xe>
 9dc:	82 e0       	ldi	r24, 0x02	; 2
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	e0 91 80 00 	lds	r30, 0x0080
 9e4:	f0 91 81 00 	lds	r31, 0x0081
 9e8:	20 e0       	ldi	r18, 0x00	; 0
 9ea:	30 e0       	ldi	r19, 0x00	; 0
 9ec:	c0 e0       	ldi	r28, 0x00	; 0
 9ee:	d0 e0       	ldi	r29, 0x00	; 0
 9f0:	30 97       	sbiw	r30, 0x00	; 0
 9f2:	11 f1       	breq	.+68     	; 0xa38 <malloc+0x66>
 9f4:	40 81       	ld	r20, Z
 9f6:	51 81       	ldd	r21, Z+1	; 0x01
 9f8:	48 17       	cp	r20, r24
 9fa:	59 07       	cpc	r21, r25
 9fc:	c0 f0       	brcs	.+48     	; 0xa2e <malloc+0x5c>
 9fe:	48 17       	cp	r20, r24
 a00:	59 07       	cpc	r21, r25
 a02:	61 f4       	brne	.+24     	; 0xa1c <malloc+0x4a>
 a04:	82 81       	ldd	r24, Z+2	; 0x02
 a06:	93 81       	ldd	r25, Z+3	; 0x03
 a08:	20 97       	sbiw	r28, 0x00	; 0
 a0a:	19 f0       	breq	.+6      	; 0xa12 <malloc+0x40>
 a0c:	9b 83       	std	Y+3, r25	; 0x03
 a0e:	8a 83       	std	Y+2, r24	; 0x02
 a10:	2b c0       	rjmp	.+86     	; 0xa68 <malloc+0x96>
 a12:	90 93 81 00 	sts	0x0081, r25
 a16:	80 93 80 00 	sts	0x0080, r24
 a1a:	26 c0       	rjmp	.+76     	; 0xa68 <malloc+0x96>
 a1c:	21 15       	cp	r18, r1
 a1e:	31 05       	cpc	r19, r1
 a20:	19 f0       	breq	.+6      	; 0xa28 <malloc+0x56>
 a22:	42 17       	cp	r20, r18
 a24:	53 07       	cpc	r21, r19
 a26:	18 f4       	brcc	.+6      	; 0xa2e <malloc+0x5c>
 a28:	9a 01       	movw	r18, r20
 a2a:	be 01       	movw	r22, r28
 a2c:	df 01       	movw	r26, r30
 a2e:	ef 01       	movw	r28, r30
 a30:	02 80       	ldd	r0, Z+2	; 0x02
 a32:	f3 81       	ldd	r31, Z+3	; 0x03
 a34:	e0 2d       	mov	r30, r0
 a36:	dc cf       	rjmp	.-72     	; 0x9f0 <malloc+0x1e>
 a38:	21 15       	cp	r18, r1
 a3a:	31 05       	cpc	r19, r1
 a3c:	09 f1       	breq	.+66     	; 0xa80 <malloc+0xae>
 a3e:	28 1b       	sub	r18, r24
 a40:	39 0b       	sbc	r19, r25
 a42:	24 30       	cpi	r18, 0x04	; 4
 a44:	31 05       	cpc	r19, r1
 a46:	90 f4       	brcc	.+36     	; 0xa6c <malloc+0x9a>
 a48:	12 96       	adiw	r26, 0x02	; 2
 a4a:	8d 91       	ld	r24, X+
 a4c:	9c 91       	ld	r25, X
 a4e:	13 97       	sbiw	r26, 0x03	; 3
 a50:	61 15       	cp	r22, r1
 a52:	71 05       	cpc	r23, r1
 a54:	21 f0       	breq	.+8      	; 0xa5e <malloc+0x8c>
 a56:	fb 01       	movw	r30, r22
 a58:	93 83       	std	Z+3, r25	; 0x03
 a5a:	82 83       	std	Z+2, r24	; 0x02
 a5c:	04 c0       	rjmp	.+8      	; 0xa66 <malloc+0x94>
 a5e:	90 93 81 00 	sts	0x0081, r25
 a62:	80 93 80 00 	sts	0x0080, r24
 a66:	fd 01       	movw	r30, r26
 a68:	32 96       	adiw	r30, 0x02	; 2
 a6a:	44 c0       	rjmp	.+136    	; 0xaf4 <malloc+0x122>
 a6c:	fd 01       	movw	r30, r26
 a6e:	e2 0f       	add	r30, r18
 a70:	f3 1f       	adc	r31, r19
 a72:	81 93       	st	Z+, r24
 a74:	91 93       	st	Z+, r25
 a76:	22 50       	subi	r18, 0x02	; 2
 a78:	31 09       	sbc	r19, r1
 a7a:	2d 93       	st	X+, r18
 a7c:	3c 93       	st	X, r19
 a7e:	3a c0       	rjmp	.+116    	; 0xaf4 <malloc+0x122>
 a80:	20 91 7e 00 	lds	r18, 0x007E
 a84:	30 91 7f 00 	lds	r19, 0x007F
 a88:	23 2b       	or	r18, r19
 a8a:	41 f4       	brne	.+16     	; 0xa9c <malloc+0xca>
 a8c:	20 91 7a 00 	lds	r18, 0x007A
 a90:	30 91 7b 00 	lds	r19, 0x007B
 a94:	30 93 7f 00 	sts	0x007F, r19
 a98:	20 93 7e 00 	sts	0x007E, r18
 a9c:	20 91 78 00 	lds	r18, 0x0078
 aa0:	30 91 79 00 	lds	r19, 0x0079
 aa4:	21 15       	cp	r18, r1
 aa6:	31 05       	cpc	r19, r1
 aa8:	41 f4       	brne	.+16     	; 0xaba <malloc+0xe8>
 aaa:	2d b7       	in	r18, 0x3d	; 61
 aac:	3e b7       	in	r19, 0x3e	; 62
 aae:	40 91 7c 00 	lds	r20, 0x007C
 ab2:	50 91 7d 00 	lds	r21, 0x007D
 ab6:	24 1b       	sub	r18, r20
 ab8:	35 0b       	sbc	r19, r21
 aba:	e0 91 7e 00 	lds	r30, 0x007E
 abe:	f0 91 7f 00 	lds	r31, 0x007F
 ac2:	e2 17       	cp	r30, r18
 ac4:	f3 07       	cpc	r31, r19
 ac6:	a0 f4       	brcc	.+40     	; 0xaf0 <malloc+0x11e>
 ac8:	2e 1b       	sub	r18, r30
 aca:	3f 0b       	sbc	r19, r31
 acc:	28 17       	cp	r18, r24
 ace:	39 07       	cpc	r19, r25
 ad0:	78 f0       	brcs	.+30     	; 0xaf0 <malloc+0x11e>
 ad2:	ac 01       	movw	r20, r24
 ad4:	4e 5f       	subi	r20, 0xFE	; 254
 ad6:	5f 4f       	sbci	r21, 0xFF	; 255
 ad8:	24 17       	cp	r18, r20
 ada:	35 07       	cpc	r19, r21
 adc:	48 f0       	brcs	.+18     	; 0xaf0 <malloc+0x11e>
 ade:	4e 0f       	add	r20, r30
 ae0:	5f 1f       	adc	r21, r31
 ae2:	50 93 7f 00 	sts	0x007F, r21
 ae6:	40 93 7e 00 	sts	0x007E, r20
 aea:	81 93       	st	Z+, r24
 aec:	91 93       	st	Z+, r25
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <malloc+0x122>
 af0:	e0 e0       	ldi	r30, 0x00	; 0
 af2:	f0 e0       	ldi	r31, 0x00	; 0
 af4:	cf 01       	movw	r24, r30
 af6:	df 91       	pop	r29
 af8:	cf 91       	pop	r28
 afa:	08 95       	ret

00000afc <free>:
 afc:	0f 93       	push	r16
 afe:	1f 93       	push	r17
 b00:	cf 93       	push	r28
 b02:	df 93       	push	r29
 b04:	00 97       	sbiw	r24, 0x00	; 0
 b06:	09 f4       	brne	.+2      	; 0xb0a <free+0xe>
 b08:	8c c0       	rjmp	.+280    	; 0xc22 <free+0x126>
 b0a:	fc 01       	movw	r30, r24
 b0c:	32 97       	sbiw	r30, 0x02	; 2
 b0e:	13 82       	std	Z+3, r1	; 0x03
 b10:	12 82       	std	Z+2, r1	; 0x02
 b12:	00 91 80 00 	lds	r16, 0x0080
 b16:	10 91 81 00 	lds	r17, 0x0081
 b1a:	01 15       	cp	r16, r1
 b1c:	11 05       	cpc	r17, r1
 b1e:	81 f4       	brne	.+32     	; 0xb40 <free+0x44>
 b20:	20 81       	ld	r18, Z
 b22:	31 81       	ldd	r19, Z+1	; 0x01
 b24:	82 0f       	add	r24, r18
 b26:	93 1f       	adc	r25, r19
 b28:	20 91 7e 00 	lds	r18, 0x007E
 b2c:	30 91 7f 00 	lds	r19, 0x007F
 b30:	28 17       	cp	r18, r24
 b32:	39 07       	cpc	r19, r25
 b34:	79 f5       	brne	.+94     	; 0xb94 <free+0x98>
 b36:	f0 93 7f 00 	sts	0x007F, r31
 b3a:	e0 93 7e 00 	sts	0x007E, r30
 b3e:	71 c0       	rjmp	.+226    	; 0xc22 <free+0x126>
 b40:	d8 01       	movw	r26, r16
 b42:	40 e0       	ldi	r20, 0x00	; 0
 b44:	50 e0       	ldi	r21, 0x00	; 0
 b46:	ae 17       	cp	r26, r30
 b48:	bf 07       	cpc	r27, r31
 b4a:	50 f4       	brcc	.+20     	; 0xb60 <free+0x64>
 b4c:	12 96       	adiw	r26, 0x02	; 2
 b4e:	2d 91       	ld	r18, X+
 b50:	3c 91       	ld	r19, X
 b52:	13 97       	sbiw	r26, 0x03	; 3
 b54:	ad 01       	movw	r20, r26
 b56:	21 15       	cp	r18, r1
 b58:	31 05       	cpc	r19, r1
 b5a:	09 f1       	breq	.+66     	; 0xb9e <free+0xa2>
 b5c:	d9 01       	movw	r26, r18
 b5e:	f3 cf       	rjmp	.-26     	; 0xb46 <free+0x4a>
 b60:	9d 01       	movw	r18, r26
 b62:	da 01       	movw	r26, r20
 b64:	33 83       	std	Z+3, r19	; 0x03
 b66:	22 83       	std	Z+2, r18	; 0x02
 b68:	60 81       	ld	r22, Z
 b6a:	71 81       	ldd	r23, Z+1	; 0x01
 b6c:	86 0f       	add	r24, r22
 b6e:	97 1f       	adc	r25, r23
 b70:	82 17       	cp	r24, r18
 b72:	93 07       	cpc	r25, r19
 b74:	69 f4       	brne	.+26     	; 0xb90 <free+0x94>
 b76:	ec 01       	movw	r28, r24
 b78:	28 81       	ld	r18, Y
 b7a:	39 81       	ldd	r19, Y+1	; 0x01
 b7c:	26 0f       	add	r18, r22
 b7e:	37 1f       	adc	r19, r23
 b80:	2e 5f       	subi	r18, 0xFE	; 254
 b82:	3f 4f       	sbci	r19, 0xFF	; 255
 b84:	31 83       	std	Z+1, r19	; 0x01
 b86:	20 83       	st	Z, r18
 b88:	8a 81       	ldd	r24, Y+2	; 0x02
 b8a:	9b 81       	ldd	r25, Y+3	; 0x03
 b8c:	93 83       	std	Z+3, r25	; 0x03
 b8e:	82 83       	std	Z+2, r24	; 0x02
 b90:	45 2b       	or	r20, r21
 b92:	29 f4       	brne	.+10     	; 0xb9e <free+0xa2>
 b94:	f0 93 81 00 	sts	0x0081, r31
 b98:	e0 93 80 00 	sts	0x0080, r30
 b9c:	42 c0       	rjmp	.+132    	; 0xc22 <free+0x126>
 b9e:	13 96       	adiw	r26, 0x03	; 3
 ba0:	fc 93       	st	X, r31
 ba2:	ee 93       	st	-X, r30
 ba4:	12 97       	sbiw	r26, 0x02	; 2
 ba6:	ed 01       	movw	r28, r26
 ba8:	49 91       	ld	r20, Y+
 baa:	59 91       	ld	r21, Y+
 bac:	9e 01       	movw	r18, r28
 bae:	24 0f       	add	r18, r20
 bb0:	35 1f       	adc	r19, r21
 bb2:	e2 17       	cp	r30, r18
 bb4:	f3 07       	cpc	r31, r19
 bb6:	71 f4       	brne	.+28     	; 0xbd4 <free+0xd8>
 bb8:	80 81       	ld	r24, Z
 bba:	91 81       	ldd	r25, Z+1	; 0x01
 bbc:	84 0f       	add	r24, r20
 bbe:	95 1f       	adc	r25, r21
 bc0:	02 96       	adiw	r24, 0x02	; 2
 bc2:	11 96       	adiw	r26, 0x01	; 1
 bc4:	9c 93       	st	X, r25
 bc6:	8e 93       	st	-X, r24
 bc8:	82 81       	ldd	r24, Z+2	; 0x02
 bca:	93 81       	ldd	r25, Z+3	; 0x03
 bcc:	13 96       	adiw	r26, 0x03	; 3
 bce:	9c 93       	st	X, r25
 bd0:	8e 93       	st	-X, r24
 bd2:	12 97       	sbiw	r26, 0x02	; 2
 bd4:	e0 e0       	ldi	r30, 0x00	; 0
 bd6:	f0 e0       	ldi	r31, 0x00	; 0
 bd8:	d8 01       	movw	r26, r16
 bda:	12 96       	adiw	r26, 0x02	; 2
 bdc:	8d 91       	ld	r24, X+
 bde:	9c 91       	ld	r25, X
 be0:	13 97       	sbiw	r26, 0x03	; 3
 be2:	00 97       	sbiw	r24, 0x00	; 0
 be4:	19 f0       	breq	.+6      	; 0xbec <free+0xf0>
 be6:	f8 01       	movw	r30, r16
 be8:	8c 01       	movw	r16, r24
 bea:	f6 cf       	rjmp	.-20     	; 0xbd8 <free+0xdc>
 bec:	8d 91       	ld	r24, X+
 bee:	9c 91       	ld	r25, X
 bf0:	98 01       	movw	r18, r16
 bf2:	2e 5f       	subi	r18, 0xFE	; 254
 bf4:	3f 4f       	sbci	r19, 0xFF	; 255
 bf6:	82 0f       	add	r24, r18
 bf8:	93 1f       	adc	r25, r19
 bfa:	20 91 7e 00 	lds	r18, 0x007E
 bfe:	30 91 7f 00 	lds	r19, 0x007F
 c02:	28 17       	cp	r18, r24
 c04:	39 07       	cpc	r19, r25
 c06:	69 f4       	brne	.+26     	; 0xc22 <free+0x126>
 c08:	30 97       	sbiw	r30, 0x00	; 0
 c0a:	29 f4       	brne	.+10     	; 0xc16 <free+0x11a>
 c0c:	10 92 81 00 	sts	0x0081, r1
 c10:	10 92 80 00 	sts	0x0080, r1
 c14:	02 c0       	rjmp	.+4      	; 0xc1a <free+0x11e>
 c16:	13 82       	std	Z+3, r1	; 0x03
 c18:	12 82       	std	Z+2, r1	; 0x02
 c1a:	10 93 7f 00 	sts	0x007F, r17
 c1e:	00 93 7e 00 	sts	0x007E, r16
 c22:	df 91       	pop	r29
 c24:	cf 91       	pop	r28
 c26:	1f 91       	pop	r17
 c28:	0f 91       	pop	r16
 c2a:	08 95       	ret

00000c2c <_exit>:
 c2c:	f8 94       	cli

00000c2e <__stop_program>:
 c2e:	ff cf       	rjmp	.-2      	; 0xc2e <__stop_program>
