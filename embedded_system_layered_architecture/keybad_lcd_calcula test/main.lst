
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001102  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00001102  00001196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800096  00800096  000011cc  2**0
                  ALLOC
  3 .stab         00001bf0  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001142  00000000  00000000  00002dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003efe  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003f10  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__fixunssfsi+0x32>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e2 e0       	ldi	r30, 0x02	; 2
      ea:	f1 e1       	ldi	r31, 0x11	; 17
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a6 39       	cpi	r26, 0x96	; 150
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	a6 e9       	ldi	r26, 0x96	; 150
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	aa 39       	cpi	r26, 0x9A	; 154
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 3e 03 	call	0x67c	; 0x67c <main>
     10c:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <KPD_u8GetPressedKey>:
/*              pressed at the same time                               	     		   */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
u8 KPD_u8GetPressedKey(void)
{
     114:	df 92       	push	r13
     116:	ef 92       	push	r14
     118:	ff 92       	push	r15
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	96 e8       	ldi	r25, 0x86	; 134
     124:	e9 2e       	mov	r14, r25
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	f9 2e       	mov	r15, r25

  u8 LOC_u8Row;
  u8 LOC_u8Retrun = NOT_PRESSED;
  do{
  /* Initialize the switch status to NOT Pressed                                                                     */
   LOC_u8Retrun = NOT_PRESSED;
     12a:	de e4       	ldi	r29, 0x4E	; 78

  /* Looping on columns of the Key Pad                                                                               */
  for (LOC_u8Column = 0 + COL_INIT; LOC_u8Column < COL_FIN; LOC_u8Column++)
     12c:	c0 e0       	ldi	r28, 0x00	; 0
  {
    /* Activate the Column                                                                                           */
    DIO_SetPinValue(PORT, LOC_u8Column, LOW);
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	6c 2f       	mov	r22, r28
     132:	83 e0       	ldi	r24, 0x03	; 3
     134:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_SetPinValue>
     138:	00 e0       	ldi	r16, 0x00	; 0
     13a:	10 e0       	ldi	r17, 0x00	; 0
     13c:	84 e0       	ldi	r24, 0x04	; 4
     13e:	d8 2e       	mov	r13, r24
     140:	d0 0e       	add	r13, r16

    /* Loop on the rows of the Key Pad                                                                               */
    for (LOC_u8Row = 0 + ROW_INIT; LOC_u8Row < ROW_FIN; LOC_u8Row++)
    {
      /* Check the status of the switch                                                                              */
      if (!DIO_GetPinValue(PORT, LOC_u8Row))
     142:	6d 2d       	mov	r22, r13
     144:	83 e0       	ldi	r24, 0x03	; 3
     146:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_GetPinValue>
     14a:	81 11       	cpse	r24, r1
     14c:	10 c0       	rjmp	.+32     	; 0x16e <KPD_u8GetPressedKey+0x5a>
     14e:	f7 01       	movw	r30, r14
     150:	e0 0f       	add	r30, r16
     152:	f1 1f       	adc	r31, r17
      {
        /* Get the value of the currently pressed switch                                                             */
        LOC_u8Retrun = KPD_au8SwitchVal[LOC_u8Column - COL_INIT][LOC_u8Row - ROW_INIT];
     154:	d0 81       	ld	r29, Z

        /* Wait until the switch is released (Single Press)                                                          */
        while (!DIO_GetPinValue(PORT, LOC_u8Row))
     156:	6d 2d       	mov	r22, r13
     158:	83 e0       	ldi	r24, 0x03	; 3
     15a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_GetPinValue>
     15e:	88 23       	and	r24, r24
     160:	d1 f3       	breq	.-12     	; 0x156 <KPD_u8GetPressedKey+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     162:	8f e1       	ldi	r24, 0x1F	; 31
     164:	9e e4       	ldi	r25, 0x4E	; 78
     166:	01 97       	sbiw	r24, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <KPD_u8GetPressedKey+0x52>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <KPD_u8GetPressedKey+0x58>
     16c:	00 00       	nop
     16e:	0f 5f       	subi	r16, 0xFF	; 255
     170:	1f 4f       	sbci	r17, 0xFF	; 255
  {
    /* Activate the Column                                                                                           */
    DIO_SetPinValue(PORT, LOC_u8Column, LOW);

    /* Loop on the rows of the Key Pad                                                                               */
    for (LOC_u8Row = 0 + ROW_INIT; LOC_u8Row < ROW_FIN; LOC_u8Row++)
     172:	04 30       	cpi	r16, 0x04	; 4
     174:	11 05       	cpc	r17, r1
     176:	11 f7       	brne	.-60     	; 0x13c <KPD_u8GetPressedKey+0x28>

      }
    }

    /* Deactivate the Column                                                                                         */
    DIO_SetPinValue(PORT, LOC_u8Column, HIGH);
     178:	41 e0       	ldi	r20, 0x01	; 1
     17a:	6c 2f       	mov	r22, r28
     17c:	83 e0       	ldi	r24, 0x03	; 3
     17e:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_SetPinValue>
  do{
  /* Initialize the switch status to NOT Pressed                                                                     */
   LOC_u8Retrun = NOT_PRESSED;

  /* Looping on columns of the Key Pad                                                                               */
  for (LOC_u8Column = 0 + COL_INIT; LOC_u8Column < COL_FIN; LOC_u8Column++)
     182:	cf 5f       	subi	r28, 0xFF	; 255
     184:	94 e0       	ldi	r25, 0x04	; 4
     186:	e9 0e       	add	r14, r25
     188:	f1 1c       	adc	r15, r1
     18a:	c4 30       	cpi	r28, 0x04	; 4
     18c:	81 f6       	brne	.-96     	; 0x12e <KPD_u8GetPressedKey+0x1a>
    }

    /* Deactivate the Column                                                                                         */
    DIO_SetPinValue(PORT, LOC_u8Column, HIGH);
  }
  }while(LOC_u8Retrun == NOT_PRESSED);
     18e:	de 34       	cpi	r29, 0x4E	; 78
     190:	41 f2       	breq	.-112    	; 0x122 <KPD_u8GetPressedKey+0xe>
  return LOC_u8Retrun;
}
     192:	8d 2f       	mov	r24, r29
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	df 90       	pop	r13
     1a2:	08 95       	ret

000001a4 <LCD_cmd>:

void LCD_cmd(u8 cmd)
{


DIO_SetPortValue(LCD_DATA,cmd);
     1a4:	68 2f       	mov	r22, r24
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 4d 02 	call	0x49a	; 0x49a <DIO_SetPortValue>
DIO_SetPortValue(ctrl,(0<<rs)|(0<<rw)|(1<<en));
     1ac:	64 e0       	ldi	r22, 0x04	; 4
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	0e 94 4d 02 	call	0x49a	; 0x49a <DIO_SetPortValue>
     1b4:	8f ec       	ldi	r24, 0xCF	; 207
     1b6:	97 e0       	ldi	r25, 0x07	; 7
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_cmd+0x14>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_cmd+0x1a>
     1be:	00 00       	nop
_delay_ms(1);
DIO_SetPortValue(ctrl,(0<<rs)|(0<<rw)|(0<<en));
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	0e 94 4d 02 	call	0x49a	; 0x49a <DIO_SetPortValue>
     1c8:	9f e7       	ldi	r25, 0x7F	; 127
     1ca:	28 e3       	ldi	r18, 0x38	; 56
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	91 50       	subi	r25, 0x01	; 1
     1d0:	20 40       	sbci	r18, 0x00	; 0
     1d2:	80 40       	sbci	r24, 0x00	; 0
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <LCD_cmd+0x2a>
     1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_cmd+0x34>
     1d8:	00 00       	nop
     1da:	08 95       	ret

000001dc <init_LCD>:
#include "DIO_int.h"
#include "lcd_int.h"

void init_LCD(void)
{
DIO_SetPortDirection(LCD_DDR,0xff);
     1dc:	6f ef       	ldi	r22, 0xFF	; 255
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	0e 94 40 02 	call	0x480	; 0x480 <DIO_SetPortDirection>
DIO_SetPortDirection(ctrl_DDR,0x07);
     1e4:	67 e0       	ldi	r22, 0x07	; 7
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	0e 94 40 02 	call	0x480	; 0x480 <DIO_SetPortDirection>
LCD_cmd(0x38);                            // initialization of 16X2 LCD in 8bit mode
     1ec:	88 e3       	ldi	r24, 0x38	; 56
     1ee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     1f2:	8f ec       	ldi	r24, 0xCF	; 207
     1f4:	97 e0       	ldi	r25, 0x07	; 7
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <init_LCD+0x1a>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <init_LCD+0x20>
     1fc:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x01);                                 // clear LCD
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     204:	8f ec       	ldi	r24, 0xCF	; 207
     206:	97 e0       	ldi	r25, 0x07	; 7
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <init_LCD+0x2c>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <init_LCD+0x32>
     20e:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x0E);                        // cursor ON
     210:	8e e0       	ldi	r24, 0x0E	; 14
     212:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     216:	8f ec       	ldi	r24, 0xCF	; 207
     218:	97 e0       	ldi	r25, 0x07	; 7
     21a:	01 97       	sbiw	r24, 0x01	; 1
     21c:	f1 f7       	brne	.-4      	; 0x21a <init_LCD+0x3e>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <init_LCD+0x44>
     220:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x80);                     // —8 go to first line and –0 is for 0th position
     222:	80 e8       	ldi	r24, 0x80	; 128
     224:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     228:	8f ec       	ldi	r24, 0xCF	; 207
     22a:	97 e0       	ldi	r25, 0x07	; 7
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <init_LCD+0x50>
     230:	00 c0       	rjmp	.+0      	; 0x232 <init_LCD+0x56>
     232:	00 00       	nop
     234:	08 95       	ret

00000236 <LCD_write>:
}

void LCD_write(u8 data)
{

DIO_SetPortValue(LCD_DATA,data);
     236:	68 2f       	mov	r22, r24
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 4d 02 	call	0x49a	; 0x49a <DIO_SetPortValue>
DIO_SetPortValue(ctrl,(1<<rs)|(0<<rw)|(1<<en));
     23e:	65 e0       	ldi	r22, 0x05	; 5
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 4d 02 	call	0x49a	; 0x49a <DIO_SetPortValue>
     246:	8f ec       	ldi	r24, 0xCF	; 207
     248:	97 e0       	ldi	r25, 0x07	; 7
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_write+0x14>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_write+0x1a>
     250:	00 00       	nop
_delay_ms(1);
DIO_SetPortValue(ctrl, (1<<rs)|(0<<rw)|(0<<en));
     252:	61 e0       	ldi	r22, 0x01	; 1
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 4d 02 	call	0x49a	; 0x49a <DIO_SetPortValue>
     25a:	9f e7       	ldi	r25, 0x7F	; 127
     25c:	28 e3       	ldi	r18, 0x38	; 56
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	91 50       	subi	r25, 0x01	; 1
     262:	20 40       	sbci	r18, 0x00	; 0
     264:	80 40       	sbci	r24, 0x00	; 0
     266:	e1 f7       	brne	.-8      	; 0x260 <LCD_write+0x2a>
     268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_write+0x34>
     26a:	00 00       	nop
     26c:	08 95       	ret

0000026e <LCD_write_string>:
return ;

}

void LCD_write_string(u8 *str)             //store address value of the string in pointer *str
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
int i=0;
while(str[i]!='\0')                               // loop will go on till the NULL character in the string
     274:	89 91       	ld	r24, Y+
     276:	88 23       	and	r24, r24
     278:	19 f0       	breq	.+6      	; 0x280 <LCD_write_string+0x12>
{
LCD_write(str[i]);                            // sending data on LCD byte by byte
     27a:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_write>
     27e:	fa cf       	rjmp	.-12     	; 0x274 <LCD_write_string+0x6>
i++;
}
return;
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <LCD_write_int>:

void LCD_write_int(s16 number){
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	18 2f       	mov	r17, r24
     294:	09 2f       	mov	r16, r25

s16 num=number;
     296:	68 2f       	mov	r22, r24
     298:	79 2f       	mov	r23, r25
s16 digits=0;
     29a:	c0 e0       	ldi	r28, 0x00	; 0
     29c:	d0 e0       	ldi	r29, 0x00	; 0
s16 index;
while(num>0){
digits++;
num/=10;
     29e:	ea e0       	ldi	r30, 0x0A	; 10
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	ce 01       	movw	r24, r28
     2a4:	01 96       	adiw	r24, 0x01	; 1
void LCD_write_int(s16 number){

s16 num=number;
s16 digits=0;
s16 index;
while(num>0){
     2a6:	16 16       	cp	r1, r22
     2a8:	17 06       	cpc	r1, r23
     2aa:	34 f4       	brge	.+12     	; 0x2b8 <LCD_write_int+0x32>
     2ac:	ec 01       	movw	r28, r24
digits++;
num/=10;
     2ae:	cb 01       	movw	r24, r22
     2b0:	bf 01       	movw	r22, r30
     2b2:	0e 94 41 03 	call	0x682	; 0x682 <__divmodhi4>
     2b6:	f5 cf       	rjmp	.-22     	; 0x2a2 <LCD_write_int+0x1c>
}
index=digits-1;
u8 * arr=malloc((digits+1)* sizeof(u8));
     2b8:	0e 94 52 07 	call	0xea4	; 0xea4 <malloc>
     2bc:	fc 01       	movw	r30, r24
while(index>=0){
     2be:	9e 01       	movw	r18, r28
s16 rem=number%10;
     2c0:	8a e0       	ldi	r24, 0x0A	; 10
     2c2:	e8 2e       	mov	r14, r24
     2c4:	f1 2c       	mov	r15, r1
     2c6:	21 50       	subi	r18, 0x01	; 1
     2c8:	31 09       	sbc	r19, r1
digits++;
num/=10;
}
index=digits-1;
u8 * arr=malloc((digits+1)* sizeof(u8));
while(index>=0){
     2ca:	37 fd       	sbrc	r19, 7
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <LCD_write_int+0x62>
s16 rem=number%10;
number=number/10;
     2ce:	81 2f       	mov	r24, r17
     2d0:	90 2f       	mov	r25, r16
     2d2:	b7 01       	movw	r22, r14
     2d4:	0e 94 41 03 	call	0x682	; 0x682 <__divmodhi4>
     2d8:	16 2f       	mov	r17, r22
     2da:	07 2f       	mov	r16, r23
     2dc:	df 01       	movw	r26, r30
     2de:	a2 0f       	add	r26, r18
     2e0:	b3 1f       	adc	r27, r19
arr[index--]=rem+'0';
     2e2:	80 5d       	subi	r24, 0xD0	; 208
     2e4:	8c 93       	st	X, r24
     2e6:	ef cf       	rjmp	.-34     	; 0x2c6 <LCD_write_int+0x40>
}
arr[digits]='\0';
     2e8:	ce 0f       	add	r28, r30
     2ea:	df 1f       	adc	r29, r31
     2ec:	18 82       	st	Y, r1
LCD_write_string(arr);
     2ee:	cf 01       	movw	r24, r30

}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
s16 rem=number%10;
number=number/10;
arr[index--]=rem+'0';
}
arr[digits]='\0';
LCD_write_string(arr);
     2fc:	0c 94 37 01 	jmp	0x26e	; 0x26e <LCD_write_string>

00000300 <LCD_write_double>:

}

void LCD_write_double(f64 number){
     300:	cf 92       	push	r12
     302:	df 92       	push	r13
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	6b 01       	movw	r12, r22
     30a:	7c 01       	movw	r14, r24

s16 num=(s16)number;
     30c:	0e 94 48 04 	call	0x890	; 0x890 <__fixsfsi>

LCD_write_int(num);
     310:	cb 01       	movw	r24, r22
     312:	0e 94 43 01 	call	0x286	; 0x286 <LCD_write_int>
LCD_write('.');
     316:	8e e2       	ldi	r24, 0x2E	; 46
     318:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_write>
s16 factor=(s16)(fmod( number, 1.0 )*100);
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	40 e8       	ldi	r20, 0x80	; 128
     322:	5f e3       	ldi	r21, 0x3F	; 63
     324:	c7 01       	movw	r24, r14
     326:	b6 01       	movw	r22, r12
     328:	0e 94 c6 04 	call	0x98c	; 0x98c <fmod>
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	48 ec       	ldi	r20, 0xC8	; 200
     332:	52 e4       	ldi	r21, 0x42	; 66
     334:	0e 94 6e 05 	call	0xadc	; 0xadc <__mulsf3>
     338:	0e 94 48 04 	call	0x890	; 0x890 <__fixsfsi>
LCD_write_int(factor);
     33c:	cb 01       	movw	r24, r22

}
     33e:	ff 90       	pop	r15
     340:	ef 90       	pop	r14
     342:	df 90       	pop	r13
     344:	cf 90       	pop	r12
s16 num=(s16)number;

LCD_write_int(num);
LCD_write('.');
s16 factor=(s16)(fmod( number, 1.0 )*100);
LCD_write_int(factor);
     346:	0c 94 43 01 	jmp	0x286	; 0x286 <LCD_write_int>

0000034a <LCD_build_special_char>:

}

void LCD_build_special_char(u8 location,u8 *ptr){
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29

if(location<8){
     352:	88 30       	cpi	r24, 0x08	; 8
     354:	80 f4       	brcc	.+32     	; 0x376 <LCD_build_special_char+0x2c>
     356:	8b 01       	movw	r16, r22

LCD_cmd(0x40+location*8);
     358:	88 0f       	add	r24, r24
     35a:	88 0f       	add	r24, r24
     35c:	88 0f       	add	r24, r24
     35e:	80 5c       	subi	r24, 0xC0	; 192
     360:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     364:	e8 01       	movw	r28, r16
     366:	08 5f       	subi	r16, 0xF8	; 248
     368:	1f 4f       	sbci	r17, 0xFF	; 255
u8 i=0;
for(i=0;i<8;i++){
LCD_write(ptr[i]);
     36a:	89 91       	ld	r24, Y+
     36c:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_write>

if(location<8){

LCD_cmd(0x40+location*8);
u8 i=0;
for(i=0;i<8;i++){
     370:	c0 17       	cp	r28, r16
     372:	d1 07       	cpc	r29, r17
     374:	d1 f7       	brne	.-12     	; 0x36a <LCD_build_special_char+0x20>

}

}

}
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	0f 91       	pop	r16
     37e:	08 95       	ret

00000380 <LCD_goto>:

void LCD_goto(u8 x,u8 y){

if(x<16){
     380:	80 31       	cpi	r24, 0x10	; 16
     382:	48 f4       	brcc	.+18     	; 0x396 <LCD_goto+0x16>

if(y==0){
     384:	61 11       	cpse	r22, r1
     386:	02 c0       	rjmp	.+4      	; 0x38c <LCD_goto+0xc>
LCD_cmd(0x80+x);
     388:	80 58       	subi	r24, 0x80	; 128
     38a:	03 c0       	rjmp	.+6      	; 0x392 <LCD_goto+0x12>
}else if(y==1){
     38c:	61 30       	cpi	r22, 0x01	; 1
     38e:	19 f4       	brne	.+6      	; 0x396 <LCD_goto+0x16>
LCD_cmd(0xBF+x);
     390:	81 54       	subi	r24, 0x41	; 65
     392:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <LCD_cmd>
     396:	08 95       	ret

00000398 <DIO_SetPinValue>:

/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     398:	84 30       	cpi	r24, 0x04	; 4
     39a:	58 f5       	brcc	.+86     	; 0x3f2 <DIO_SetPinValue+0x5a>
     39c:	68 30       	cpi	r22, 0x08	; 8
     39e:	48 f5       	brcc	.+82     	; 0x3f2 <DIO_SetPinValue+0x5a>
	{
		if (u8PinValCopy == HIGH)
     3a0:	41 30       	cpi	r20, 0x01	; 1
     3a2:	91 f4       	brne	.+36     	; 0x3c8 <DIO_SetPinValue+0x30>
		{
			SET_BIT(*DIO_OutRegisters[u8PortIdCopy],u8PinIdCopy);
     3a4:	e8 2f       	mov	r30, r24
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	e0 59       	subi	r30, 0x90	; 144
     3ae:	ff 4f       	sbci	r31, 0xFF	; 255
     3b0:	01 90       	ld	r0, Z+
     3b2:	f0 81       	ld	r31, Z
     3b4:	e0 2d       	mov	r30, r0
     3b6:	20 81       	ld	r18, Z
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <DIO_SetPinValue+0x28>
     3be:	88 0f       	add	r24, r24
     3c0:	6a 95       	dec	r22
     3c2:	ea f7       	brpl	.-6      	; 0x3be <DIO_SetPinValue+0x26>
     3c4:	82 2b       	or	r24, r18
     3c6:	14 c0       	rjmp	.+40     	; 0x3f0 <DIO_SetPinValue+0x58>
		}
		
		else if (u8PinValCopy == LOW)
     3c8:	41 11       	cpse	r20, r1
     3ca:	13 c0       	rjmp	.+38     	; 0x3f2 <DIO_SetPinValue+0x5a>
		{
			CLR_BIT(*DIO_OutRegisters[u8PortIdCopy],u8PinIdCopy);	
     3cc:	e8 2f       	mov	r30, r24
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	ee 0f       	add	r30, r30
     3d2:	ff 1f       	adc	r31, r31
     3d4:	e0 59       	subi	r30, 0x90	; 144
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	01 90       	ld	r0, Z+
     3da:	f0 81       	ld	r31, Z
     3dc:	e0 2d       	mov	r30, r0
     3de:	20 81       	ld	r18, Z
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <DIO_SetPinValue+0x50>
     3e6:	88 0f       	add	r24, r24
     3e8:	6a 95       	dec	r22
     3ea:	ea f7       	brpl	.-6      	; 0x3e6 <DIO_SetPinValue+0x4e>
     3ec:	80 95       	com	r24
     3ee:	82 23       	and	r24, r18
     3f0:	80 83       	st	Z, r24
     3f2:	08 95       	ret

000003f4 <DIO_GetPinValue>:
u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     3f4:	84 30       	cpi	r24, 0x04	; 4
     3f6:	a0 f4       	brcc	.+40     	; 0x420 <DIO_GetPinValue+0x2c>
     3f8:	68 30       	cpi	r22, 0x08	; 8
     3fa:	90 f4       	brcc	.+36     	; 0x420 <DIO_GetPinValue+0x2c>
	{
		u8ResultLocal= GET_BIT(*DIO_InRegisters[u8PortIdCopy],u8PinIdCopy);
     3fc:	e8 2f       	mov	r30, r24
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	ee 0f       	add	r30, r30
     402:	ff 1f       	adc	r31, r31
     404:	e8 59       	subi	r30, 0x98	; 152
     406:	ff 4f       	sbci	r31, 0xFF	; 255
     408:	01 90       	ld	r0, Z+
     40a:	f0 81       	ld	r31, Z
     40c:	e0 2d       	mov	r30, r0
     40e:	80 81       	ld	r24, Z
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_GetPinValue+0x24>
     414:	95 95       	asr	r25
     416:	87 95       	ror	r24
     418:	6a 95       	dec	r22
     41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_GetPinValue+0x20>
     41c:	81 70       	andi	r24, 0x01	; 1
     41e:	08 95       	ret
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
     420:	8f ef       	ldi	r24, 0xFF	; 255
	}
	
	return u8ResultLocal;
}
     422:	08 95       	ret

00000424 <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     424:	84 30       	cpi	r24, 0x04	; 4
     426:	58 f5       	brcc	.+86     	; 0x47e <DIO_SetPinDirection+0x5a>
     428:	68 30       	cpi	r22, 0x08	; 8
     42a:	48 f5       	brcc	.+82     	; 0x47e <DIO_SetPinDirection+0x5a>
	{
		if ( u8PinDirCopy == OUTPUT )
     42c:	41 30       	cpi	r20, 0x01	; 1
     42e:	91 f4       	brne	.+36     	; 0x454 <DIO_SetPinDirection+0x30>
		{
			SET_BIT(*DIO_DirRegisters[u8PortIdCopy],u8PinIdCopy);		
     430:	e8 2f       	mov	r30, r24
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	ee 0f       	add	r30, r30
     436:	ff 1f       	adc	r31, r31
     438:	e0 5a       	subi	r30, 0xA0	; 160
     43a:	ff 4f       	sbci	r31, 0xFF	; 255
     43c:	01 90       	ld	r0, Z+
     43e:	f0 81       	ld	r31, Z
     440:	e0 2d       	mov	r30, r0
     442:	20 81       	ld	r18, Z
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	01 c0       	rjmp	.+2      	; 0x44c <DIO_SetPinDirection+0x28>
     44a:	88 0f       	add	r24, r24
     44c:	6a 95       	dec	r22
     44e:	ea f7       	brpl	.-6      	; 0x44a <DIO_SetPinDirection+0x26>
     450:	82 2b       	or	r24, r18
     452:	14 c0       	rjmp	.+40     	; 0x47c <DIO_SetPinDirection+0x58>
		}
		
		else if ( u8PinDirCopy == INPUT )
     454:	41 11       	cpse	r20, r1
     456:	13 c0       	rjmp	.+38     	; 0x47e <DIO_SetPinDirection+0x5a>
		{
			CLR_BIT(*DIO_DirRegisters[u8PortIdCopy],u8PinIdCopy);
     458:	e8 2f       	mov	r30, r24
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	ee 0f       	add	r30, r30
     45e:	ff 1f       	adc	r31, r31
     460:	e0 5a       	subi	r30, 0xA0	; 160
     462:	ff 4f       	sbci	r31, 0xFF	; 255
     464:	01 90       	ld	r0, Z+
     466:	f0 81       	ld	r31, Z
     468:	e0 2d       	mov	r30, r0
     46a:	20 81       	ld	r18, Z
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	01 c0       	rjmp	.+2      	; 0x474 <DIO_SetPinDirection+0x50>
     472:	88 0f       	add	r24, r24
     474:	6a 95       	dec	r22
     476:	ea f7       	brpl	.-6      	; 0x472 <DIO_SetPinDirection+0x4e>
     478:	80 95       	com	r24
     47a:	82 23       	and	r24, r18
     47c:	80 83       	st	Z, r24
     47e:	08 95       	ret

00000480 <DIO_SetPortDirection>:

/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
	/* Check on the Required PORT Number */
	if (u8PortId <= PORTD)
     480:	84 30       	cpi	r24, 0x04	; 4
     482:	50 f4       	brcc	.+20     	; 0x498 <DIO_SetPortDirection+0x18>
	{
		*DIO_DirRegisters[u8PortId] = u8PortDir;
     484:	e8 2f       	mov	r30, r24
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	ee 0f       	add	r30, r30
     48a:	ff 1f       	adc	r31, r31
     48c:	e0 5a       	subi	r30, 0xA0	; 160
     48e:	ff 4f       	sbci	r31, 0xFF	; 255
     490:	01 90       	ld	r0, Z+
     492:	f0 81       	ld	r31, Z
     494:	e0 2d       	mov	r30, r0
     496:	60 83       	st	Z, r22
     498:	08 95       	ret

0000049a <DIO_SetPortValue>:
}

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
	/* Check on the Required PORT Number */
	if (u8PortId <= PORTD)
     49a:	84 30       	cpi	r24, 0x04	; 4
     49c:	50 f4       	brcc	.+20     	; 0x4b2 <DIO_SetPortValue+0x18>
	{
		*DIO_OutRegisters[u8PortId] = u8PortVal;
     49e:	e8 2f       	mov	r30, r24
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	ee 0f       	add	r30, r30
     4a4:	ff 1f       	adc	r31, r31
     4a6:	e0 59       	subi	r30, 0x90	; 144
     4a8:	ff 4f       	sbci	r31, 0xFF	; 255
     4aa:	01 90       	ld	r0, Z+
     4ac:	f0 81       	ld	r31, Z
     4ae:	e0 2d       	mov	r30, r0
     4b0:	60 83       	st	Z, r22
     4b2:	08 95       	ret

000004b4 <arr_char_to_int>:
/* this fuction transfers array of char to integer
   input:array of u8
   output:s16

*/
s16 arr_char_to_int(u8 * arr){
     4b4:	8f 92       	push	r8
     4b6:	9f 92       	push	r9
     4b8:	af 92       	push	r10
     4ba:	bf 92       	push	r11
     4bc:	df 92       	push	r13
     4be:	ef 92       	push	r14
     4c0:	ff 92       	push	r15
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <arr_char_to_int+0x18>
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <arr_char_to_int+0x1a>
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	7c 01       	movw	r14, r24
s16 index=0;

s16 rank;
while(arr[index]!='\0')
     4d4:	fc 01       	movw	r30, r24
     4d6:	8f 01       	movw	r16, r30
     4d8:	0e 19       	sub	r16, r14
     4da:	1f 09       	sbc	r17, r15
     4dc:	81 91       	ld	r24, Z+
     4de:	81 11       	cpse	r24, r1
     4e0:	fa cf       	rjmp	.-12     	; 0x4d6 <arr_char_to_int+0x22>
}

rank=index;
index=0;
s16 number;
s16 sum=0;
     4e2:	a1 2c       	mov	r10, r1
     4e4:	b1 2c       	mov	r11, r1
while(arr[index]!='\0')
     4e6:	f7 01       	movw	r30, r14
     4e8:	d1 90       	ld	r13, Z+
     4ea:	7f 01       	movw	r14, r30
     4ec:	dd 20       	and	r13, r13
     4ee:	c9 f1       	breq	.+114    	; 0x562 <arr_char_to_int+0xae>
{number=arr[index]-'0';
sum+=number*(pow(10,rank-1));
     4f0:	01 50       	subi	r16, 0x01	; 1
     4f2:	11 09       	sbc	r17, r1
     4f4:	b8 01       	movw	r22, r16
     4f6:	01 2e       	mov	r0, r17
     4f8:	00 0c       	add	r0, r0
     4fa:	88 0b       	sbc	r24, r24
     4fc:	99 0b       	sbc	r25, r25
     4fe:	0e 94 80 04 	call	0x900	; 0x900 <__floatsisf>
     502:	9b 01       	movw	r18, r22
     504:	ac 01       	movw	r20, r24
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	80 e2       	ldi	r24, 0x20	; 32
     50c:	91 e4       	ldi	r25, 0x41	; 65
     50e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <pow>
     512:	9b 01       	movw	r18, r22
     514:	ac 01       	movw	r20, r24
     516:	b5 01       	movw	r22, r10
     518:	bb 0c       	add	r11, r11
     51a:	88 0b       	sbc	r24, r24
     51c:	99 0b       	sbc	r25, r25
     51e:	29 83       	std	Y+1, r18	; 0x01
     520:	3a 83       	std	Y+2, r19	; 0x02
     522:	4b 83       	std	Y+3, r20	; 0x03
     524:	5c 83       	std	Y+4, r21	; 0x04
     526:	0e 94 80 04 	call	0x900	; 0x900 <__floatsisf>
     52a:	4b 01       	movw	r8, r22
     52c:	5c 01       	movw	r10, r24
rank=index;
index=0;
s16 number;
s16 sum=0;
while(arr[index]!='\0')
{number=arr[index]-'0';
     52e:	6d 2d       	mov	r22, r13
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	60 53       	subi	r22, 0x30	; 48
     534:	71 09       	sbc	r23, r1
sum+=number*(pow(10,rank-1));
     536:	07 2e       	mov	r0, r23
     538:	00 0c       	add	r0, r0
     53a:	88 0b       	sbc	r24, r24
     53c:	99 0b       	sbc	r25, r25
     53e:	0e 94 80 04 	call	0x900	; 0x900 <__floatsisf>
     542:	29 81       	ldd	r18, Y+1	; 0x01
     544:	3a 81       	ldd	r19, Y+2	; 0x02
     546:	4b 81       	ldd	r20, Y+3	; 0x03
     548:	5c 81       	ldd	r21, Y+4	; 0x04
     54a:	0e 94 6e 05 	call	0xadc	; 0xadc <__mulsf3>
     54e:	9b 01       	movw	r18, r22
     550:	ac 01       	movw	r20, r24
     552:	c5 01       	movw	r24, r10
     554:	b4 01       	movw	r22, r8
     556:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__addsf3>
     55a:	0e 94 48 04 	call	0x890	; 0x890 <__fixsfsi>
     55e:	5b 01       	movw	r10, r22
     560:	c2 cf       	rjmp	.-124    	; 0x4e6 <arr_char_to_int+0x32>
index++;
rank--;
}
return sum;
}
     562:	c5 01       	movw	r24, r10
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	ef 90       	pop	r14
     578:	df 90       	pop	r13
     57a:	bf 90       	pop	r11
     57c:	af 90       	pop	r10
     57e:	9f 90       	pop	r9
     580:	8f 90       	pop	r8
     582:	08 95       	ret

00000584 <calculate>:
  input:two array of u8 (argument),operation u8
  output: the result f64

 */

f64 calculate(u8 * first_arg,u8 * sec_arg,u8 op){
     584:	af 92       	push	r10
     586:	bf 92       	push	r11
     588:	cf 92       	push	r12
     58a:	df 92       	push	r13
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	1f 92       	push	r1
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	7b 01       	movw	r14, r22
s16 first=arr_char_to_int(first_arg);
     5a0:	49 83       	std	Y+1, r20	; 0x01
     5a2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <arr_char_to_int>
     5a6:	8c 01       	movw	r16, r24
s16 second=arr_char_to_int(sec_arg);
     5a8:	c7 01       	movw	r24, r14
     5aa:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <arr_char_to_int>
     5ae:	5c 01       	movw	r10, r24
switch(op){
     5b0:	49 81       	ldd	r20, Y+1	; 0x01
     5b2:	4d 32       	cpi	r20, 0x2D	; 45
     5b4:	01 f1       	breq	.+64     	; 0x5f6 <calculate+0x72>
     5b6:	30 f4       	brcc	.+12     	; 0x5c4 <calculate+0x40>
     5b8:	4b 32       	cpi	r20, 0x2B	; 43
     5ba:	e1 f5       	brne	.+120    	; 0x634 <calculate+0xb0>
case '+':
  return first+second;
     5bc:	b8 01       	movw	r22, r16
     5be:	68 0f       	add	r22, r24
     5c0:	79 1f       	adc	r23, r25
     5c2:	1c c0       	rjmp	.+56     	; 0x5fc <calculate+0x78>
 */

f64 calculate(u8 * first_arg,u8 * sec_arg,u8 op){
s16 first=arr_char_to_int(first_arg);
s16 second=arr_char_to_int(sec_arg);
switch(op){
     5c4:	4f 32       	cpi	r20, 0x2F	; 47
     5c6:	09 f1       	breq	.+66     	; 0x60a <calculate+0x86>
     5c8:	48 37       	cpi	r20, 0x78	; 120
     5ca:	a1 f5       	brne	.+104    	; 0x634 <calculate+0xb0>
case '+':
  return first+second;
case '-':
  return first-second;
case 'x':
  return (1.00*first)*(1.00*second);
     5cc:	b8 01       	movw	r22, r16
     5ce:	11 0f       	add	r17, r17
     5d0:	88 0b       	sbc	r24, r24
     5d2:	99 0b       	sbc	r25, r25
     5d4:	0e 94 80 04 	call	0x900	; 0x900 <__floatsisf>
     5d8:	6b 01       	movw	r12, r22
     5da:	7c 01       	movw	r14, r24
     5dc:	b5 01       	movw	r22, r10
     5de:	bb 0c       	add	r11, r11
     5e0:	88 0b       	sbc	r24, r24
     5e2:	99 0b       	sbc	r25, r25
     5e4:	0e 94 80 04 	call	0x900	; 0x900 <__floatsisf>
     5e8:	9b 01       	movw	r18, r22
     5ea:	ac 01       	movw	r20, r24
     5ec:	c7 01       	movw	r24, r14
     5ee:	b6 01       	movw	r22, r12
     5f0:	0e 94 6e 05 	call	0xadc	; 0xadc <__mulsf3>
     5f4:	23 c0       	rjmp	.+70     	; 0x63c <calculate+0xb8>
s16 second=arr_char_to_int(sec_arg);
switch(op){
case '+':
  return first+second;
case '-':
  return first-second;
     5f6:	b8 01       	movw	r22, r16
     5f8:	68 1b       	sub	r22, r24
     5fa:	79 0b       	sbc	r23, r25
     5fc:	07 2e       	mov	r0, r23
     5fe:	00 0c       	add	r0, r0
     600:	88 0b       	sbc	r24, r24
     602:	99 0b       	sbc	r25, r25
     604:	0e 94 80 04 	call	0x900	; 0x900 <__floatsisf>
     608:	19 c0       	rjmp	.+50     	; 0x63c <calculate+0xb8>
case 'x':
  return (1.00*first)*(1.00*second);
case '/':
  return (1.00*first)/(1.00*second);
     60a:	b8 01       	movw	r22, r16
     60c:	11 0f       	add	r17, r17
     60e:	88 0b       	sbc	r24, r24
     610:	99 0b       	sbc	r25, r25
     612:	0e 94 80 04 	call	0x900	; 0x900 <__floatsisf>
     616:	6b 01       	movw	r12, r22
     618:	7c 01       	movw	r14, r24
     61a:	b5 01       	movw	r22, r10
     61c:	bb 0c       	add	r11, r11
     61e:	88 0b       	sbc	r24, r24
     620:	99 0b       	sbc	r25, r25
     622:	0e 94 80 04 	call	0x900	; 0x900 <__floatsisf>
     626:	9b 01       	movw	r18, r22
     628:	ac 01       	movw	r20, r24
     62a:	c7 01       	movw	r24, r14
     62c:	b6 01       	movw	r22, r12
     62e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divsf3>
     632:	04 c0       	rjmp	.+8      	; 0x63c <calculate+0xb8>

}
return -5;
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	80 ea       	ldi	r24, 0xA0	; 160
     63a:	90 ec       	ldi	r25, 0xC0	; 192
}
     63c:	0f 90       	pop	r0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	ff 90       	pop	r15
     648:	ef 90       	pop	r14
     64a:	df 90       	pop	r13
     64c:	cf 90       	pop	r12
     64e:	bf 90       	pop	r11
     650:	af 90       	pop	r10
     652:	08 95       	ret

00000654 <calculator>:
     654:	0e 94 ee 00 	call	0x1dc	; 0x1dc <init_LCD>
     658:	68 e7       	ldi	r22, 0x78	; 120
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_build_special_char>
     662:	80 e8       	ldi	r24, 0x80	; 128
     664:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_write>
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	85 e0       	ldi	r24, 0x05	; 5
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_goto>
     67a:	ff cf       	rjmp	.-2      	; 0x67a <calculator+0x26>

0000067c <main>:
#include "calculator_int.h"

int main(void){

calculator();
     67c:	0e 94 2a 03 	call	0x654	; 0x654 <calculator>
while(1){

}
     680:	ff cf       	rjmp	.-2      	; 0x680 <main+0x4>

00000682 <__divmodhi4>:
     682:	97 fb       	bst	r25, 7
     684:	07 2e       	mov	r0, r23
     686:	16 f4       	brtc	.+4      	; 0x68c <__divmodhi4+0xa>
     688:	00 94       	com	r0
     68a:	07 d0       	rcall	.+14     	; 0x69a <__divmodhi4_neg1>
     68c:	77 fd       	sbrc	r23, 7
     68e:	09 d0       	rcall	.+18     	; 0x6a2 <__divmodhi4_neg2>
     690:	0e 94 55 03 	call	0x6aa	; 0x6aa <__udivmodhi4>
     694:	07 fc       	sbrc	r0, 7
     696:	05 d0       	rcall	.+10     	; 0x6a2 <__divmodhi4_neg2>
     698:	3e f4       	brtc	.+14     	; 0x6a8 <__divmodhi4_exit>

0000069a <__divmodhi4_neg1>:
     69a:	90 95       	com	r25
     69c:	81 95       	neg	r24
     69e:	9f 4f       	sbci	r25, 0xFF	; 255
     6a0:	08 95       	ret

000006a2 <__divmodhi4_neg2>:
     6a2:	70 95       	com	r23
     6a4:	61 95       	neg	r22
     6a6:	7f 4f       	sbci	r23, 0xFF	; 255

000006a8 <__divmodhi4_exit>:
     6a8:	08 95       	ret

000006aa <__udivmodhi4>:
     6aa:	aa 1b       	sub	r26, r26
     6ac:	bb 1b       	sub	r27, r27
     6ae:	51 e1       	ldi	r21, 0x11	; 17
     6b0:	07 c0       	rjmp	.+14     	; 0x6c0 <__udivmodhi4_ep>

000006b2 <__udivmodhi4_loop>:
     6b2:	aa 1f       	adc	r26, r26
     6b4:	bb 1f       	adc	r27, r27
     6b6:	a6 17       	cp	r26, r22
     6b8:	b7 07       	cpc	r27, r23
     6ba:	10 f0       	brcs	.+4      	; 0x6c0 <__udivmodhi4_ep>
     6bc:	a6 1b       	sub	r26, r22
     6be:	b7 0b       	sbc	r27, r23

000006c0 <__udivmodhi4_ep>:
     6c0:	88 1f       	adc	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	5a 95       	dec	r21
     6c6:	a9 f7       	brne	.-22     	; 0x6b2 <__udivmodhi4_loop>
     6c8:	80 95       	com	r24
     6ca:	90 95       	com	r25
     6cc:	bc 01       	movw	r22, r24
     6ce:	cd 01       	movw	r24, r26
     6d0:	08 95       	ret

000006d2 <__subsf3>:
     6d2:	50 58       	subi	r21, 0x80	; 128

000006d4 <__addsf3>:
     6d4:	bb 27       	eor	r27, r27
     6d6:	aa 27       	eor	r26, r26
     6d8:	0e 94 81 03 	call	0x702	; 0x702 <__addsf3x>
     6dc:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_round>
     6e0:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_pscA>
     6e4:	38 f0       	brcs	.+14     	; 0x6f4 <__addsf3+0x20>
     6e6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_pscB>
     6ea:	20 f0       	brcs	.+8      	; 0x6f4 <__addsf3+0x20>
     6ec:	39 f4       	brne	.+14     	; 0x6fc <__addsf3+0x28>
     6ee:	9f 3f       	cpi	r25, 0xFF	; 255
     6f0:	19 f4       	brne	.+6      	; 0x6f8 <__addsf3+0x24>
     6f2:	26 f4       	brtc	.+8      	; 0x6fc <__addsf3+0x28>
     6f4:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_nan>
     6f8:	0e f4       	brtc	.+2      	; 0x6fc <__addsf3+0x28>
     6fa:	e0 95       	com	r30
     6fc:	e7 fb       	bst	r30, 7
     6fe:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_inf>

00000702 <__addsf3x>:
     702:	e9 2f       	mov	r30, r25
     704:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_split3>
     708:	58 f3       	brcs	.-42     	; 0x6e0 <__addsf3+0xc>
     70a:	ba 17       	cp	r27, r26
     70c:	62 07       	cpc	r22, r18
     70e:	73 07       	cpc	r23, r19
     710:	84 07       	cpc	r24, r20
     712:	95 07       	cpc	r25, r21
     714:	20 f0       	brcs	.+8      	; 0x71e <__addsf3x+0x1c>
     716:	79 f4       	brne	.+30     	; 0x736 <__addsf3x+0x34>
     718:	a6 f5       	brtc	.+104    	; 0x782 <__addsf3x+0x80>
     71a:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_zero>
     71e:	0e f4       	brtc	.+2      	; 0x722 <__addsf3x+0x20>
     720:	e0 95       	com	r30
     722:	0b 2e       	mov	r0, r27
     724:	ba 2f       	mov	r27, r26
     726:	a0 2d       	mov	r26, r0
     728:	0b 01       	movw	r0, r22
     72a:	b9 01       	movw	r22, r18
     72c:	90 01       	movw	r18, r0
     72e:	0c 01       	movw	r0, r24
     730:	ca 01       	movw	r24, r20
     732:	a0 01       	movw	r20, r0
     734:	11 24       	eor	r1, r1
     736:	ff 27       	eor	r31, r31
     738:	59 1b       	sub	r21, r25
     73a:	99 f0       	breq	.+38     	; 0x762 <__addsf3x+0x60>
     73c:	59 3f       	cpi	r21, 0xF9	; 249
     73e:	50 f4       	brcc	.+20     	; 0x754 <__addsf3x+0x52>
     740:	50 3e       	cpi	r21, 0xE0	; 224
     742:	68 f1       	brcs	.+90     	; 0x79e <__addsf3x+0x9c>
     744:	1a 16       	cp	r1, r26
     746:	f0 40       	sbci	r31, 0x00	; 0
     748:	a2 2f       	mov	r26, r18
     74a:	23 2f       	mov	r18, r19
     74c:	34 2f       	mov	r19, r20
     74e:	44 27       	eor	r20, r20
     750:	58 5f       	subi	r21, 0xF8	; 248
     752:	f3 cf       	rjmp	.-26     	; 0x73a <__addsf3x+0x38>
     754:	46 95       	lsr	r20
     756:	37 95       	ror	r19
     758:	27 95       	ror	r18
     75a:	a7 95       	ror	r26
     75c:	f0 40       	sbci	r31, 0x00	; 0
     75e:	53 95       	inc	r21
     760:	c9 f7       	brne	.-14     	; 0x754 <__addsf3x+0x52>
     762:	7e f4       	brtc	.+30     	; 0x782 <__addsf3x+0x80>
     764:	1f 16       	cp	r1, r31
     766:	ba 0b       	sbc	r27, r26
     768:	62 0b       	sbc	r22, r18
     76a:	73 0b       	sbc	r23, r19
     76c:	84 0b       	sbc	r24, r20
     76e:	ba f0       	brmi	.+46     	; 0x79e <__addsf3x+0x9c>
     770:	91 50       	subi	r25, 0x01	; 1
     772:	a1 f0       	breq	.+40     	; 0x79c <__addsf3x+0x9a>
     774:	ff 0f       	add	r31, r31
     776:	bb 1f       	adc	r27, r27
     778:	66 1f       	adc	r22, r22
     77a:	77 1f       	adc	r23, r23
     77c:	88 1f       	adc	r24, r24
     77e:	c2 f7       	brpl	.-16     	; 0x770 <__addsf3x+0x6e>
     780:	0e c0       	rjmp	.+28     	; 0x79e <__addsf3x+0x9c>
     782:	ba 0f       	add	r27, r26
     784:	62 1f       	adc	r22, r18
     786:	73 1f       	adc	r23, r19
     788:	84 1f       	adc	r24, r20
     78a:	48 f4       	brcc	.+18     	; 0x79e <__addsf3x+0x9c>
     78c:	87 95       	ror	r24
     78e:	77 95       	ror	r23
     790:	67 95       	ror	r22
     792:	b7 95       	ror	r27
     794:	f7 95       	ror	r31
     796:	9e 3f       	cpi	r25, 0xFE	; 254
     798:	08 f0       	brcs	.+2      	; 0x79c <__addsf3x+0x9a>
     79a:	b0 cf       	rjmp	.-160    	; 0x6fc <__addsf3+0x28>
     79c:	93 95       	inc	r25
     79e:	88 0f       	add	r24, r24
     7a0:	08 f0       	brcs	.+2      	; 0x7a4 <__addsf3x+0xa2>
     7a2:	99 27       	eor	r25, r25
     7a4:	ee 0f       	add	r30, r30
     7a6:	97 95       	ror	r25
     7a8:	87 95       	ror	r24
     7aa:	08 95       	ret

000007ac <__divsf3>:
     7ac:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__divsf3x>
     7b0:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_round>
     7b4:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_pscB>
     7b8:	58 f0       	brcs	.+22     	; 0x7d0 <__divsf3+0x24>
     7ba:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_pscA>
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__divsf3+0x24>
     7c0:	29 f4       	brne	.+10     	; 0x7cc <__divsf3+0x20>
     7c2:	5f 3f       	cpi	r21, 0xFF	; 255
     7c4:	29 f0       	breq	.+10     	; 0x7d0 <__divsf3+0x24>
     7c6:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_inf>
     7ca:	51 11       	cpse	r21, r1
     7cc:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_szero>
     7d0:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_nan>

000007d4 <__divsf3x>:
     7d4:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_split3>
     7d8:	68 f3       	brcs	.-38     	; 0x7b4 <__divsf3+0x8>

000007da <__divsf3_pse>:
     7da:	99 23       	and	r25, r25
     7dc:	b1 f3       	breq	.-20     	; 0x7ca <__divsf3+0x1e>
     7de:	55 23       	and	r21, r21
     7e0:	91 f3       	breq	.-28     	; 0x7c6 <__divsf3+0x1a>
     7e2:	95 1b       	sub	r25, r21
     7e4:	55 0b       	sbc	r21, r21
     7e6:	bb 27       	eor	r27, r27
     7e8:	aa 27       	eor	r26, r26
     7ea:	62 17       	cp	r22, r18
     7ec:	73 07       	cpc	r23, r19
     7ee:	84 07       	cpc	r24, r20
     7f0:	38 f0       	brcs	.+14     	; 0x800 <__divsf3_pse+0x26>
     7f2:	9f 5f       	subi	r25, 0xFF	; 255
     7f4:	5f 4f       	sbci	r21, 0xFF	; 255
     7f6:	22 0f       	add	r18, r18
     7f8:	33 1f       	adc	r19, r19
     7fa:	44 1f       	adc	r20, r20
     7fc:	aa 1f       	adc	r26, r26
     7fe:	a9 f3       	breq	.-22     	; 0x7ea <__divsf3_pse+0x10>
     800:	35 d0       	rcall	.+106    	; 0x86c <__stack+0xd>
     802:	0e 2e       	mov	r0, r30
     804:	3a f0       	brmi	.+14     	; 0x814 <__divsf3_pse+0x3a>
     806:	e0 e8       	ldi	r30, 0x80	; 128
     808:	32 d0       	rcall	.+100    	; 0x86e <__stack+0xf>
     80a:	91 50       	subi	r25, 0x01	; 1
     80c:	50 40       	sbci	r21, 0x00	; 0
     80e:	e6 95       	lsr	r30
     810:	00 1c       	adc	r0, r0
     812:	ca f7       	brpl	.-14     	; 0x806 <__divsf3_pse+0x2c>
     814:	2b d0       	rcall	.+86     	; 0x86c <__stack+0xd>
     816:	fe 2f       	mov	r31, r30
     818:	29 d0       	rcall	.+82     	; 0x86c <__stack+0xd>
     81a:	66 0f       	add	r22, r22
     81c:	77 1f       	adc	r23, r23
     81e:	88 1f       	adc	r24, r24
     820:	bb 1f       	adc	r27, r27
     822:	26 17       	cp	r18, r22
     824:	37 07       	cpc	r19, r23
     826:	48 07       	cpc	r20, r24
     828:	ab 07       	cpc	r26, r27
     82a:	b0 e8       	ldi	r27, 0x80	; 128
     82c:	09 f0       	breq	.+2      	; 0x830 <__divsf3_pse+0x56>
     82e:	bb 0b       	sbc	r27, r27
     830:	80 2d       	mov	r24, r0
     832:	bf 01       	movw	r22, r30
     834:	ff 27       	eor	r31, r31
     836:	93 58       	subi	r25, 0x83	; 131
     838:	5f 4f       	sbci	r21, 0xFF	; 255
     83a:	3a f0       	brmi	.+14     	; 0x84a <__divsf3_pse+0x70>
     83c:	9e 3f       	cpi	r25, 0xFE	; 254
     83e:	51 05       	cpc	r21, r1
     840:	78 f0       	brcs	.+30     	; 0x860 <__stack+0x1>
     842:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_inf>
     846:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_szero>
     84a:	5f 3f       	cpi	r21, 0xFF	; 255
     84c:	e4 f3       	brlt	.-8      	; 0x846 <__divsf3_pse+0x6c>
     84e:	98 3e       	cpi	r25, 0xE8	; 232
     850:	d4 f3       	brlt	.-12     	; 0x846 <__divsf3_pse+0x6c>
     852:	86 95       	lsr	r24
     854:	77 95       	ror	r23
     856:	67 95       	ror	r22
     858:	b7 95       	ror	r27
     85a:	f7 95       	ror	r31
     85c:	9f 5f       	subi	r25, 0xFF	; 255
     85e:	c9 f7       	brne	.-14     	; 0x852 <__divsf3_pse+0x78>
     860:	88 0f       	add	r24, r24
     862:	91 1d       	adc	r25, r1
     864:	96 95       	lsr	r25
     866:	87 95       	ror	r24
     868:	97 f9       	bld	r25, 7
     86a:	08 95       	ret
     86c:	e1 e0       	ldi	r30, 0x01	; 1
     86e:	66 0f       	add	r22, r22
     870:	77 1f       	adc	r23, r23
     872:	88 1f       	adc	r24, r24
     874:	bb 1f       	adc	r27, r27
     876:	62 17       	cp	r22, r18
     878:	73 07       	cpc	r23, r19
     87a:	84 07       	cpc	r24, r20
     87c:	ba 07       	cpc	r27, r26
     87e:	20 f0       	brcs	.+8      	; 0x888 <__stack+0x29>
     880:	62 1b       	sub	r22, r18
     882:	73 0b       	sbc	r23, r19
     884:	84 0b       	sbc	r24, r20
     886:	ba 0b       	sbc	r27, r26
     888:	ee 1f       	adc	r30, r30
     88a:	88 f7       	brcc	.-30     	; 0x86e <__stack+0xf>
     88c:	e0 95       	com	r30
     88e:	08 95       	ret

00000890 <__fixsfsi>:
     890:	0e 94 4f 04 	call	0x89e	; 0x89e <__fixunssfsi>
     894:	68 94       	set
     896:	b1 11       	cpse	r27, r1
     898:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_szero>
     89c:	08 95       	ret

0000089e <__fixunssfsi>:
     89e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_splitA>
     8a2:	88 f0       	brcs	.+34     	; 0x8c6 <__fixunssfsi+0x28>
     8a4:	9f 57       	subi	r25, 0x7F	; 127
     8a6:	98 f0       	brcs	.+38     	; 0x8ce <__fixunssfsi+0x30>
     8a8:	b9 2f       	mov	r27, r25
     8aa:	99 27       	eor	r25, r25
     8ac:	b7 51       	subi	r27, 0x17	; 23
     8ae:	b0 f0       	brcs	.+44     	; 0x8dc <__fixunssfsi+0x3e>
     8b0:	e1 f0       	breq	.+56     	; 0x8ea <__fixunssfsi+0x4c>
     8b2:	66 0f       	add	r22, r22
     8b4:	77 1f       	adc	r23, r23
     8b6:	88 1f       	adc	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	1a f0       	brmi	.+6      	; 0x8c2 <__fixunssfsi+0x24>
     8bc:	ba 95       	dec	r27
     8be:	c9 f7       	brne	.-14     	; 0x8b2 <__fixunssfsi+0x14>
     8c0:	14 c0       	rjmp	.+40     	; 0x8ea <__fixunssfsi+0x4c>
     8c2:	b1 30       	cpi	r27, 0x01	; 1
     8c4:	91 f0       	breq	.+36     	; 0x8ea <__fixunssfsi+0x4c>
     8c6:	0e 94 67 05 	call	0xace	; 0xace <__fp_zero>
     8ca:	b1 e0       	ldi	r27, 0x01	; 1
     8cc:	08 95       	ret
     8ce:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_zero>
     8d2:	67 2f       	mov	r22, r23
     8d4:	78 2f       	mov	r23, r24
     8d6:	88 27       	eor	r24, r24
     8d8:	b8 5f       	subi	r27, 0xF8	; 248
     8da:	39 f0       	breq	.+14     	; 0x8ea <__fixunssfsi+0x4c>
     8dc:	b9 3f       	cpi	r27, 0xF9	; 249
     8de:	cc f3       	brlt	.-14     	; 0x8d2 <__fixunssfsi+0x34>
     8e0:	86 95       	lsr	r24
     8e2:	77 95       	ror	r23
     8e4:	67 95       	ror	r22
     8e6:	b3 95       	inc	r27
     8e8:	d9 f7       	brne	.-10     	; 0x8e0 <__fixunssfsi+0x42>
     8ea:	3e f4       	brtc	.+14     	; 0x8fa <__fixunssfsi+0x5c>
     8ec:	90 95       	com	r25
     8ee:	80 95       	com	r24
     8f0:	70 95       	com	r23
     8f2:	61 95       	neg	r22
     8f4:	7f 4f       	sbci	r23, 0xFF	; 255
     8f6:	8f 4f       	sbci	r24, 0xFF	; 255
     8f8:	9f 4f       	sbci	r25, 0xFF	; 255
     8fa:	08 95       	ret

000008fc <__floatunsisf>:
     8fc:	e8 94       	clt
     8fe:	09 c0       	rjmp	.+18     	; 0x912 <__floatsisf+0x12>

00000900 <__floatsisf>:
     900:	97 fb       	bst	r25, 7
     902:	3e f4       	brtc	.+14     	; 0x912 <__floatsisf+0x12>
     904:	90 95       	com	r25
     906:	80 95       	com	r24
     908:	70 95       	com	r23
     90a:	61 95       	neg	r22
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	8f 4f       	sbci	r24, 0xFF	; 255
     910:	9f 4f       	sbci	r25, 0xFF	; 255
     912:	99 23       	and	r25, r25
     914:	a9 f0       	breq	.+42     	; 0x940 <__floatsisf+0x40>
     916:	f9 2f       	mov	r31, r25
     918:	96 e9       	ldi	r25, 0x96	; 150
     91a:	bb 27       	eor	r27, r27
     91c:	93 95       	inc	r25
     91e:	f6 95       	lsr	r31
     920:	87 95       	ror	r24
     922:	77 95       	ror	r23
     924:	67 95       	ror	r22
     926:	b7 95       	ror	r27
     928:	f1 11       	cpse	r31, r1
     92a:	f8 cf       	rjmp	.-16     	; 0x91c <__floatsisf+0x1c>
     92c:	fa f4       	brpl	.+62     	; 0x96c <__floatsisf+0x6c>
     92e:	bb 0f       	add	r27, r27
     930:	11 f4       	brne	.+4      	; 0x936 <__floatsisf+0x36>
     932:	60 ff       	sbrs	r22, 0
     934:	1b c0       	rjmp	.+54     	; 0x96c <__floatsisf+0x6c>
     936:	6f 5f       	subi	r22, 0xFF	; 255
     938:	7f 4f       	sbci	r23, 0xFF	; 255
     93a:	8f 4f       	sbci	r24, 0xFF	; 255
     93c:	9f 4f       	sbci	r25, 0xFF	; 255
     93e:	16 c0       	rjmp	.+44     	; 0x96c <__floatsisf+0x6c>
     940:	88 23       	and	r24, r24
     942:	11 f0       	breq	.+4      	; 0x948 <__floatsisf+0x48>
     944:	96 e9       	ldi	r25, 0x96	; 150
     946:	11 c0       	rjmp	.+34     	; 0x96a <__floatsisf+0x6a>
     948:	77 23       	and	r23, r23
     94a:	21 f0       	breq	.+8      	; 0x954 <__floatsisf+0x54>
     94c:	9e e8       	ldi	r25, 0x8E	; 142
     94e:	87 2f       	mov	r24, r23
     950:	76 2f       	mov	r23, r22
     952:	05 c0       	rjmp	.+10     	; 0x95e <__floatsisf+0x5e>
     954:	66 23       	and	r22, r22
     956:	71 f0       	breq	.+28     	; 0x974 <__floatsisf+0x74>
     958:	96 e8       	ldi	r25, 0x86	; 134
     95a:	86 2f       	mov	r24, r22
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	2a f0       	brmi	.+10     	; 0x96c <__floatsisf+0x6c>
     962:	9a 95       	dec	r25
     964:	66 0f       	add	r22, r22
     966:	77 1f       	adc	r23, r23
     968:	88 1f       	adc	r24, r24
     96a:	da f7       	brpl	.-10     	; 0x962 <__floatsisf+0x62>
     96c:	88 0f       	add	r24, r24
     96e:	96 95       	lsr	r25
     970:	87 95       	ror	r24
     972:	97 f9       	bld	r25, 7
     974:	08 95       	ret
     976:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_pscA>
     97a:	20 f0       	brcs	.+8      	; 0x984 <__floatsisf+0x84>
     97c:	19 f0       	breq	.+6      	; 0x984 <__floatsisf+0x84>
     97e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_pscB>
     982:	50 f4       	brcc	.+20     	; 0x998 <fmod+0xc>
     984:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_nan>
     988:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_szero>

0000098c <fmod>:
     98c:	e9 2f       	mov	r30, r25
     98e:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_split3>
     992:	88 f3       	brcs	.-30     	; 0x976 <__floatsisf+0x76>
     994:	55 23       	and	r21, r21
     996:	b1 f3       	breq	.-20     	; 0x984 <__floatsisf+0x84>
     998:	e7 fb       	bst	r30, 7
     99a:	62 17       	cp	r22, r18
     99c:	73 07       	cpc	r23, r19
     99e:	84 07       	cpc	r24, r20
     9a0:	95 07       	cpc	r25, r21
     9a2:	a8 f1       	brcs	.+106    	; 0xa0e <fmod+0x82>
     9a4:	89 f3       	breq	.-30     	; 0x988 <__floatsisf+0x88>
     9a6:	e9 2f       	mov	r30, r25
     9a8:	ff 27       	eor	r31, r31
     9aa:	88 23       	and	r24, r24
     9ac:	2a f0       	brmi	.+10     	; 0x9b8 <fmod+0x2c>
     9ae:	31 97       	sbiw	r30, 0x01	; 1
     9b0:	66 0f       	add	r22, r22
     9b2:	77 1f       	adc	r23, r23
     9b4:	88 1f       	adc	r24, r24
     9b6:	da f7       	brpl	.-10     	; 0x9ae <fmod+0x22>
     9b8:	95 2f       	mov	r25, r21
     9ba:	55 27       	eor	r21, r21
     9bc:	44 23       	and	r20, r20
     9be:	32 f0       	brmi	.+12     	; 0x9cc <fmod+0x40>
     9c0:	91 50       	subi	r25, 0x01	; 1
     9c2:	50 40       	sbci	r21, 0x00	; 0
     9c4:	22 0f       	add	r18, r18
     9c6:	33 1f       	adc	r19, r19
     9c8:	44 1f       	adc	r20, r20
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <fmod+0x34>
     9cc:	bb 27       	eor	r27, r27
     9ce:	e9 1b       	sub	r30, r25
     9d0:	f5 0b       	sbc	r31, r21
     9d2:	62 1b       	sub	r22, r18
     9d4:	73 0b       	sbc	r23, r19
     9d6:	84 0b       	sbc	r24, r20
     9d8:	b1 09       	sbc	r27, r1
     9da:	b1 f2       	breq	.-84     	; 0x988 <__floatsisf+0x88>
     9dc:	22 f4       	brpl	.+8      	; 0x9e6 <fmod+0x5a>
     9de:	62 0f       	add	r22, r18
     9e0:	73 1f       	adc	r23, r19
     9e2:	84 1f       	adc	r24, r20
     9e4:	b1 1d       	adc	r27, r1
     9e6:	31 97       	sbiw	r30, 0x01	; 1
     9e8:	2a f0       	brmi	.+10     	; 0x9f4 <fmod+0x68>
     9ea:	66 0f       	add	r22, r22
     9ec:	77 1f       	adc	r23, r23
     9ee:	88 1f       	adc	r24, r24
     9f0:	bb 1f       	adc	r27, r27
     9f2:	ef cf       	rjmp	.-34     	; 0x9d2 <fmod+0x46>
     9f4:	91 50       	subi	r25, 0x01	; 1
     9f6:	50 40       	sbci	r21, 0x00	; 0
     9f8:	62 f0       	brmi	.+24     	; 0xa12 <fmod+0x86>
     9fa:	41 f0       	breq	.+16     	; 0xa0c <fmod+0x80>
     9fc:	88 23       	and	r24, r24
     9fe:	32 f0       	brmi	.+12     	; 0xa0c <fmod+0x80>
     a00:	66 0f       	add	r22, r22
     a02:	77 1f       	adc	r23, r23
     a04:	88 1f       	adc	r24, r24
     a06:	91 50       	subi	r25, 0x01	; 1
     a08:	50 40       	sbci	r21, 0x00	; 0
     a0a:	c1 f7       	brne	.-16     	; 0x9fc <fmod+0x70>
     a0c:	93 95       	inc	r25
     a0e:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__fp_mpack>
     a12:	86 95       	lsr	r24
     a14:	77 95       	ror	r23
     a16:	67 95       	ror	r22
     a18:	9f 5f       	subi	r25, 0xFF	; 255
     a1a:	d9 f7       	brne	.-10     	; 0xa12 <fmod+0x86>
     a1c:	f7 cf       	rjmp	.-18     	; 0xa0c <fmod+0x80>

00000a1e <__fp_inf>:
     a1e:	97 f9       	bld	r25, 7
     a20:	9f 67       	ori	r25, 0x7F	; 127
     a22:	80 e8       	ldi	r24, 0x80	; 128
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	08 95       	ret

00000a2a <__fp_mpack>:
     a2a:	9f 3f       	cpi	r25, 0xFF	; 255
     a2c:	31 f0       	breq	.+12     	; 0xa3a <__fp_mpack_finite+0xc>

00000a2e <__fp_mpack_finite>:
     a2e:	91 50       	subi	r25, 0x01	; 1
     a30:	20 f4       	brcc	.+8      	; 0xa3a <__fp_mpack_finite+0xc>
     a32:	87 95       	ror	r24
     a34:	77 95       	ror	r23
     a36:	67 95       	ror	r22
     a38:	b7 95       	ror	r27
     a3a:	88 0f       	add	r24, r24
     a3c:	91 1d       	adc	r25, r1
     a3e:	96 95       	lsr	r25
     a40:	87 95       	ror	r24
     a42:	97 f9       	bld	r25, 7
     a44:	08 95       	ret

00000a46 <__fp_nan>:
     a46:	9f ef       	ldi	r25, 0xFF	; 255
     a48:	80 ec       	ldi	r24, 0xC0	; 192
     a4a:	08 95       	ret

00000a4c <__fp_pscA>:
     a4c:	00 24       	eor	r0, r0
     a4e:	0a 94       	dec	r0
     a50:	16 16       	cp	r1, r22
     a52:	17 06       	cpc	r1, r23
     a54:	18 06       	cpc	r1, r24
     a56:	09 06       	cpc	r0, r25
     a58:	08 95       	ret

00000a5a <__fp_pscB>:
     a5a:	00 24       	eor	r0, r0
     a5c:	0a 94       	dec	r0
     a5e:	12 16       	cp	r1, r18
     a60:	13 06       	cpc	r1, r19
     a62:	14 06       	cpc	r1, r20
     a64:	05 06       	cpc	r0, r21
     a66:	08 95       	ret

00000a68 <__fp_round>:
     a68:	09 2e       	mov	r0, r25
     a6a:	03 94       	inc	r0
     a6c:	00 0c       	add	r0, r0
     a6e:	11 f4       	brne	.+4      	; 0xa74 <__fp_round+0xc>
     a70:	88 23       	and	r24, r24
     a72:	52 f0       	brmi	.+20     	; 0xa88 <__fp_round+0x20>
     a74:	bb 0f       	add	r27, r27
     a76:	40 f4       	brcc	.+16     	; 0xa88 <__fp_round+0x20>
     a78:	bf 2b       	or	r27, r31
     a7a:	11 f4       	brne	.+4      	; 0xa80 <__fp_round+0x18>
     a7c:	60 ff       	sbrs	r22, 0
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <__fp_round+0x20>
     a80:	6f 5f       	subi	r22, 0xFF	; 255
     a82:	7f 4f       	sbci	r23, 0xFF	; 255
     a84:	8f 4f       	sbci	r24, 0xFF	; 255
     a86:	9f 4f       	sbci	r25, 0xFF	; 255
     a88:	08 95       	ret

00000a8a <__fp_split3>:
     a8a:	57 fd       	sbrc	r21, 7
     a8c:	90 58       	subi	r25, 0x80	; 128
     a8e:	44 0f       	add	r20, r20
     a90:	55 1f       	adc	r21, r21
     a92:	59 f0       	breq	.+22     	; 0xaaa <__fp_splitA+0x10>
     a94:	5f 3f       	cpi	r21, 0xFF	; 255
     a96:	71 f0       	breq	.+28     	; 0xab4 <__fp_splitA+0x1a>
     a98:	47 95       	ror	r20

00000a9a <__fp_splitA>:
     a9a:	88 0f       	add	r24, r24
     a9c:	97 fb       	bst	r25, 7
     a9e:	99 1f       	adc	r25, r25
     aa0:	61 f0       	breq	.+24     	; 0xaba <__fp_splitA+0x20>
     aa2:	9f 3f       	cpi	r25, 0xFF	; 255
     aa4:	79 f0       	breq	.+30     	; 0xac4 <__fp_splitA+0x2a>
     aa6:	87 95       	ror	r24
     aa8:	08 95       	ret
     aaa:	12 16       	cp	r1, r18
     aac:	13 06       	cpc	r1, r19
     aae:	14 06       	cpc	r1, r20
     ab0:	55 1f       	adc	r21, r21
     ab2:	f2 cf       	rjmp	.-28     	; 0xa98 <__fp_split3+0xe>
     ab4:	46 95       	lsr	r20
     ab6:	f1 df       	rcall	.-30     	; 0xa9a <__fp_splitA>
     ab8:	08 c0       	rjmp	.+16     	; 0xaca <__fp_splitA+0x30>
     aba:	16 16       	cp	r1, r22
     abc:	17 06       	cpc	r1, r23
     abe:	18 06       	cpc	r1, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	f1 cf       	rjmp	.-30     	; 0xaa6 <__fp_splitA+0xc>
     ac4:	86 95       	lsr	r24
     ac6:	71 05       	cpc	r23, r1
     ac8:	61 05       	cpc	r22, r1
     aca:	08 94       	sec
     acc:	08 95       	ret

00000ace <__fp_zero>:
     ace:	e8 94       	clt

00000ad0 <__fp_szero>:
     ad0:	bb 27       	eor	r27, r27
     ad2:	66 27       	eor	r22, r22
     ad4:	77 27       	eor	r23, r23
     ad6:	cb 01       	movw	r24, r22
     ad8:	97 f9       	bld	r25, 7
     ada:	08 95       	ret

00000adc <__mulsf3>:
     adc:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3x>
     ae0:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_round>
     ae4:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_pscA>
     ae8:	38 f0       	brcs	.+14     	; 0xaf8 <__mulsf3+0x1c>
     aea:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_pscB>
     aee:	20 f0       	brcs	.+8      	; 0xaf8 <__mulsf3+0x1c>
     af0:	95 23       	and	r25, r21
     af2:	11 f0       	breq	.+4      	; 0xaf8 <__mulsf3+0x1c>
     af4:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_inf>
     af8:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_nan>
     afc:	11 24       	eor	r1, r1
     afe:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_szero>

00000b02 <__mulsf3x>:
     b02:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fp_split3>
     b06:	70 f3       	brcs	.-36     	; 0xae4 <__mulsf3+0x8>

00000b08 <__mulsf3_pse>:
     b08:	95 9f       	mul	r25, r21
     b0a:	c1 f3       	breq	.-16     	; 0xafc <__mulsf3+0x20>
     b0c:	95 0f       	add	r25, r21
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	55 1f       	adc	r21, r21
     b12:	62 9f       	mul	r22, r18
     b14:	f0 01       	movw	r30, r0
     b16:	72 9f       	mul	r23, r18
     b18:	bb 27       	eor	r27, r27
     b1a:	f0 0d       	add	r31, r0
     b1c:	b1 1d       	adc	r27, r1
     b1e:	63 9f       	mul	r22, r19
     b20:	aa 27       	eor	r26, r26
     b22:	f0 0d       	add	r31, r0
     b24:	b1 1d       	adc	r27, r1
     b26:	aa 1f       	adc	r26, r26
     b28:	64 9f       	mul	r22, r20
     b2a:	66 27       	eor	r22, r22
     b2c:	b0 0d       	add	r27, r0
     b2e:	a1 1d       	adc	r26, r1
     b30:	66 1f       	adc	r22, r22
     b32:	82 9f       	mul	r24, r18
     b34:	22 27       	eor	r18, r18
     b36:	b0 0d       	add	r27, r0
     b38:	a1 1d       	adc	r26, r1
     b3a:	62 1f       	adc	r22, r18
     b3c:	73 9f       	mul	r23, r19
     b3e:	b0 0d       	add	r27, r0
     b40:	a1 1d       	adc	r26, r1
     b42:	62 1f       	adc	r22, r18
     b44:	83 9f       	mul	r24, r19
     b46:	a0 0d       	add	r26, r0
     b48:	61 1d       	adc	r22, r1
     b4a:	22 1f       	adc	r18, r18
     b4c:	74 9f       	mul	r23, r20
     b4e:	33 27       	eor	r19, r19
     b50:	a0 0d       	add	r26, r0
     b52:	61 1d       	adc	r22, r1
     b54:	23 1f       	adc	r18, r19
     b56:	84 9f       	mul	r24, r20
     b58:	60 0d       	add	r22, r0
     b5a:	21 1d       	adc	r18, r1
     b5c:	82 2f       	mov	r24, r18
     b5e:	76 2f       	mov	r23, r22
     b60:	6a 2f       	mov	r22, r26
     b62:	11 24       	eor	r1, r1
     b64:	9f 57       	subi	r25, 0x7F	; 127
     b66:	50 40       	sbci	r21, 0x00	; 0
     b68:	9a f0       	brmi	.+38     	; 0xb90 <__mulsf3_pse+0x88>
     b6a:	f1 f0       	breq	.+60     	; 0xba8 <__mulsf3_pse+0xa0>
     b6c:	88 23       	and	r24, r24
     b6e:	4a f0       	brmi	.+18     	; 0xb82 <__mulsf3_pse+0x7a>
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	bb 1f       	adc	r27, r27
     b76:	66 1f       	adc	r22, r22
     b78:	77 1f       	adc	r23, r23
     b7a:	88 1f       	adc	r24, r24
     b7c:	91 50       	subi	r25, 0x01	; 1
     b7e:	50 40       	sbci	r21, 0x00	; 0
     b80:	a9 f7       	brne	.-22     	; 0xb6c <__mulsf3_pse+0x64>
     b82:	9e 3f       	cpi	r25, 0xFE	; 254
     b84:	51 05       	cpc	r21, r1
     b86:	80 f0       	brcs	.+32     	; 0xba8 <__mulsf3_pse+0xa0>
     b88:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_inf>
     b8c:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_szero>
     b90:	5f 3f       	cpi	r21, 0xFF	; 255
     b92:	e4 f3       	brlt	.-8      	; 0xb8c <__mulsf3_pse+0x84>
     b94:	98 3e       	cpi	r25, 0xE8	; 232
     b96:	d4 f3       	brlt	.-12     	; 0xb8c <__mulsf3_pse+0x84>
     b98:	86 95       	lsr	r24
     b9a:	77 95       	ror	r23
     b9c:	67 95       	ror	r22
     b9e:	b7 95       	ror	r27
     ba0:	f7 95       	ror	r31
     ba2:	e7 95       	ror	r30
     ba4:	9f 5f       	subi	r25, 0xFF	; 255
     ba6:	c1 f7       	brne	.-16     	; 0xb98 <__mulsf3_pse+0x90>
     ba8:	fe 2b       	or	r31, r30
     baa:	88 0f       	add	r24, r24
     bac:	91 1d       	adc	r25, r1
     bae:	96 95       	lsr	r25
     bb0:	87 95       	ror	r24
     bb2:	97 f9       	bld	r25, 7
     bb4:	08 95       	ret

00000bb6 <pow>:
     bb6:	fa 01       	movw	r30, r20
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	30 96       	adiw	r30, 0x00	; 0
     bbe:	21 05       	cpc	r18, r1
     bc0:	31 05       	cpc	r19, r1
     bc2:	a1 f1       	breq	.+104    	; 0xc2c <pow+0x76>
     bc4:	61 15       	cp	r22, r1
     bc6:	71 05       	cpc	r23, r1
     bc8:	61 f4       	brne	.+24     	; 0xbe2 <pow+0x2c>
     bca:	80 38       	cpi	r24, 0x80	; 128
     bcc:	bf e3       	ldi	r27, 0x3F	; 63
     bce:	9b 07       	cpc	r25, r27
     bd0:	49 f1       	breq	.+82     	; 0xc24 <pow+0x6e>
     bd2:	68 94       	set
     bd4:	90 38       	cpi	r25, 0x80	; 128
     bd6:	81 05       	cpc	r24, r1
     bd8:	61 f0       	breq	.+24     	; 0xbf2 <pow+0x3c>
     bda:	80 38       	cpi	r24, 0x80	; 128
     bdc:	bf ef       	ldi	r27, 0xFF	; 255
     bde:	9b 07       	cpc	r25, r27
     be0:	41 f0       	breq	.+16     	; 0xbf2 <pow+0x3c>
     be2:	99 23       	and	r25, r25
     be4:	4a f5       	brpl	.+82     	; 0xc38 <pow+0x82>
     be6:	ff 3f       	cpi	r31, 0xFF	; 255
     be8:	e1 05       	cpc	r30, r1
     bea:	31 05       	cpc	r19, r1
     bec:	21 05       	cpc	r18, r1
     bee:	19 f1       	breq	.+70     	; 0xc36 <pow+0x80>
     bf0:	e8 94       	clt
     bf2:	08 94       	sec
     bf4:	e7 95       	ror	r30
     bf6:	d9 01       	movw	r26, r18
     bf8:	aa 23       	and	r26, r26
     bfa:	29 f4       	brne	.+10     	; 0xc06 <pow+0x50>
     bfc:	ab 2f       	mov	r26, r27
     bfe:	be 2f       	mov	r27, r30
     c00:	f8 5f       	subi	r31, 0xF8	; 248
     c02:	d0 f3       	brcs	.-12     	; 0xbf8 <pow+0x42>
     c04:	10 c0       	rjmp	.+32     	; 0xc26 <pow+0x70>
     c06:	ff 5f       	subi	r31, 0xFF	; 255
     c08:	70 f4       	brcc	.+28     	; 0xc26 <pow+0x70>
     c0a:	a6 95       	lsr	r26
     c0c:	e0 f7       	brcc	.-8      	; 0xc06 <pow+0x50>
     c0e:	f7 39       	cpi	r31, 0x97	; 151
     c10:	50 f0       	brcs	.+20     	; 0xc26 <pow+0x70>
     c12:	19 f0       	breq	.+6      	; 0xc1a <pow+0x64>
     c14:	ff 3a       	cpi	r31, 0xAF	; 175
     c16:	38 f4       	brcc	.+14     	; 0xc26 <pow+0x70>
     c18:	9f 77       	andi	r25, 0x7F	; 127
     c1a:	9f 93       	push	r25
     c1c:	0d d0       	rcall	.+26     	; 0xc38 <pow+0x82>
     c1e:	0f 90       	pop	r0
     c20:	07 fc       	sbrc	r0, 7
     c22:	90 58       	subi	r25, 0x80	; 128
     c24:	08 95       	ret
     c26:	46 f0       	brts	.+16     	; 0xc38 <pow+0x82>
     c28:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_nan>
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	80 e8       	ldi	r24, 0x80	; 128
     c32:	9f e3       	ldi	r25, 0x3F	; 63
     c34:	08 95       	ret
     c36:	4f e7       	ldi	r20, 0x7F	; 127
     c38:	9f 77       	andi	r25, 0x7F	; 127
     c3a:	5f 93       	push	r21
     c3c:	4f 93       	push	r20
     c3e:	3f 93       	push	r19
     c40:	2f 93       	push	r18
     c42:	0e 94 d6 06 	call	0xdac	; 0xdac <log>
     c46:	2f 91       	pop	r18
     c48:	3f 91       	pop	r19
     c4a:	4f 91       	pop	r20
     c4c:	5f 91       	pop	r21
     c4e:	0e 94 6e 05 	call	0xadc	; 0xadc <__mulsf3>
     c52:	0c 94 33 06 	jmp	0xc66	; 0xc66 <exp>
     c56:	29 f4       	brne	.+10     	; 0xc62 <pow+0xac>
     c58:	16 f0       	brts	.+4      	; 0xc5e <pow+0xa8>
     c5a:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_inf>
     c5e:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_zero>
     c62:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_nan>

00000c66 <exp>:
     c66:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_splitA>
     c6a:	a8 f3       	brcs	.-22     	; 0xc56 <pow+0xa0>
     c6c:	96 38       	cpi	r25, 0x86	; 134
     c6e:	a0 f7       	brcc	.-24     	; 0xc58 <pow+0xa2>
     c70:	07 f8       	bld	r0, 7
     c72:	0f 92       	push	r0
     c74:	e8 94       	clt
     c76:	2b e3       	ldi	r18, 0x3B	; 59
     c78:	3a ea       	ldi	r19, 0xAA	; 170
     c7a:	48 eb       	ldi	r20, 0xB8	; 184
     c7c:	5f e7       	ldi	r21, 0x7F	; 127
     c7e:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3_pse>
     c82:	0f 92       	push	r0
     c84:	0f 92       	push	r0
     c86:	0f 92       	push	r0
     c88:	4d b7       	in	r20, 0x3d	; 61
     c8a:	5e b7       	in	r21, 0x3e	; 62
     c8c:	0f 92       	push	r0
     c8e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <modf>
     c92:	e4 e5       	ldi	r30, 0x54	; 84
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	0e 94 65 06 	call	0xcca	; 0xcca <__fp_powser>
     c9a:	4f 91       	pop	r20
     c9c:	5f 91       	pop	r21
     c9e:	ef 91       	pop	r30
     ca0:	ff 91       	pop	r31
     ca2:	e5 95       	asr	r30
     ca4:	ee 1f       	adc	r30, r30
     ca6:	ff 1f       	adc	r31, r31
     ca8:	49 f0       	breq	.+18     	; 0xcbc <exp+0x56>
     caa:	fe 57       	subi	r31, 0x7E	; 126
     cac:	e0 68       	ori	r30, 0x80	; 128
     cae:	44 27       	eor	r20, r20
     cb0:	ee 0f       	add	r30, r30
     cb2:	44 1f       	adc	r20, r20
     cb4:	fa 95       	dec	r31
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <exp+0x4a>
     cb8:	41 95       	neg	r20
     cba:	55 0b       	sbc	r21, r21
     cbc:	0e 94 98 06 	call	0xd30	; 0xd30 <ldexp>
     cc0:	0f 90       	pop	r0
     cc2:	07 fe       	sbrs	r0, 7
     cc4:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <inverse>
     cc8:	08 95       	ret

00000cca <__fp_powser>:
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	1f 93       	push	r17
     cd0:	0f 93       	push	r16
     cd2:	ff 92       	push	r15
     cd4:	ef 92       	push	r14
     cd6:	df 92       	push	r13
     cd8:	7b 01       	movw	r14, r22
     cda:	8c 01       	movw	r16, r24
     cdc:	68 94       	set
     cde:	06 c0       	rjmp	.+12     	; 0xcec <__fp_powser+0x22>
     ce0:	da 2e       	mov	r13, r26
     ce2:	ef 01       	movw	r28, r30
     ce4:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3x>
     ce8:	fe 01       	movw	r30, r28
     cea:	e8 94       	clt
     cec:	a5 91       	lpm	r26, Z+
     cee:	25 91       	lpm	r18, Z+
     cf0:	35 91       	lpm	r19, Z+
     cf2:	45 91       	lpm	r20, Z+
     cf4:	55 91       	lpm	r21, Z+
     cf6:	a6 f3       	brts	.-24     	; 0xce0 <__fp_powser+0x16>
     cf8:	ef 01       	movw	r28, r30
     cfa:	0e 94 81 03 	call	0x702	; 0x702 <__addsf3x>
     cfe:	fe 01       	movw	r30, r28
     d00:	97 01       	movw	r18, r14
     d02:	a8 01       	movw	r20, r16
     d04:	da 94       	dec	r13
     d06:	69 f7       	brne	.-38     	; 0xce2 <__fp_powser+0x18>
     d08:	df 90       	pop	r13
     d0a:	ef 90       	pop	r14
     d0c:	ff 90       	pop	r15
     d0e:	0f 91       	pop	r16
     d10:	1f 91       	pop	r17
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <inverse>:
     d18:	9b 01       	movw	r18, r22
     d1a:	ac 01       	movw	r20, r24
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	80 e8       	ldi	r24, 0x80	; 128
     d22:	9f e3       	ldi	r25, 0x3F	; 63
     d24:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__divsf3>
     d28:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_inf>
     d2c:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__fp_mpack>

00000d30 <ldexp>:
     d30:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_splitA>
     d34:	d8 f3       	brcs	.-10     	; 0xd2c <inverse+0x14>
     d36:	99 23       	and	r25, r25
     d38:	c9 f3       	breq	.-14     	; 0xd2c <inverse+0x14>
     d3a:	94 0f       	add	r25, r20
     d3c:	51 1d       	adc	r21, r1
     d3e:	a3 f3       	brvs	.-24     	; 0xd28 <inverse+0x10>
     d40:	91 50       	subi	r25, 0x01	; 1
     d42:	50 40       	sbci	r21, 0x00	; 0
     d44:	94 f0       	brlt	.+36     	; 0xd6a <ldexp+0x3a>
     d46:	59 f0       	breq	.+22     	; 0xd5e <ldexp+0x2e>
     d48:	88 23       	and	r24, r24
     d4a:	32 f0       	brmi	.+12     	; 0xd58 <ldexp+0x28>
     d4c:	66 0f       	add	r22, r22
     d4e:	77 1f       	adc	r23, r23
     d50:	88 1f       	adc	r24, r24
     d52:	91 50       	subi	r25, 0x01	; 1
     d54:	50 40       	sbci	r21, 0x00	; 0
     d56:	c1 f7       	brne	.-16     	; 0xd48 <ldexp+0x18>
     d58:	9e 3f       	cpi	r25, 0xFE	; 254
     d5a:	51 05       	cpc	r21, r1
     d5c:	2c f7       	brge	.-54     	; 0xd28 <inverse+0x10>
     d5e:	88 0f       	add	r24, r24
     d60:	91 1d       	adc	r25, r1
     d62:	96 95       	lsr	r25
     d64:	87 95       	ror	r24
     d66:	97 f9       	bld	r25, 7
     d68:	08 95       	ret
     d6a:	5f 3f       	cpi	r21, 0xFF	; 255
     d6c:	ac f0       	brlt	.+42     	; 0xd98 <ldexp+0x68>
     d6e:	98 3e       	cpi	r25, 0xE8	; 232
     d70:	9c f0       	brlt	.+38     	; 0xd98 <ldexp+0x68>
     d72:	bb 27       	eor	r27, r27
     d74:	86 95       	lsr	r24
     d76:	77 95       	ror	r23
     d78:	67 95       	ror	r22
     d7a:	b7 95       	ror	r27
     d7c:	08 f4       	brcc	.+2      	; 0xd80 <ldexp+0x50>
     d7e:	b1 60       	ori	r27, 0x01	; 1
     d80:	93 95       	inc	r25
     d82:	c1 f7       	brne	.-16     	; 0xd74 <ldexp+0x44>
     d84:	bb 0f       	add	r27, r27
     d86:	58 f7       	brcc	.-42     	; 0xd5e <ldexp+0x2e>
     d88:	11 f4       	brne	.+4      	; 0xd8e <ldexp+0x5e>
     d8a:	60 ff       	sbrs	r22, 0
     d8c:	e8 cf       	rjmp	.-48     	; 0xd5e <ldexp+0x2e>
     d8e:	6f 5f       	subi	r22, 0xFF	; 255
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	8f 4f       	sbci	r24, 0xFF	; 255
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	e3 cf       	rjmp	.-58     	; 0xd5e <ldexp+0x2e>
     d98:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_szero>
     d9c:	16 f0       	brts	.+4      	; 0xda2 <ldexp+0x72>
     d9e:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__fp_mpack>
     da2:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_nan>
     da6:	68 94       	set
     da8:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__fp_inf>

00000dac <log>:
     dac:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_splitA>
     db0:	a8 f3       	brcs	.-22     	; 0xd9c <ldexp+0x6c>
     db2:	99 23       	and	r25, r25
     db4:	c1 f3       	breq	.-16     	; 0xda6 <ldexp+0x76>
     db6:	ae f3       	brts	.-22     	; 0xda2 <ldexp+0x72>
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	1f 93       	push	r17
     dbe:	0f 93       	push	r16
     dc0:	ff 92       	push	r15
     dc2:	c9 2f       	mov	r28, r25
     dc4:	dd 27       	eor	r29, r29
     dc6:	88 23       	and	r24, r24
     dc8:	2a f0       	brmi	.+10     	; 0xdd4 <log+0x28>
     dca:	21 97       	sbiw	r28, 0x01	; 1
     dcc:	66 0f       	add	r22, r22
     dce:	77 1f       	adc	r23, r23
     dd0:	88 1f       	adc	r24, r24
     dd2:	da f7       	brpl	.-10     	; 0xdca <log+0x1e>
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e8       	ldi	r20, 0x80	; 128
     dda:	5f eb       	ldi	r21, 0xBF	; 191
     ddc:	9f e3       	ldi	r25, 0x3F	; 63
     dde:	88 39       	cpi	r24, 0x98	; 152
     de0:	20 f0       	brcs	.+8      	; 0xdea <log+0x3e>
     de2:	80 3e       	cpi	r24, 0xE0	; 224
     de4:	38 f0       	brcs	.+14     	; 0xdf4 <log+0x48>
     de6:	21 96       	adiw	r28, 0x01	; 1
     de8:	8f 77       	andi	r24, 0x7F	; 127
     dea:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__addsf3>
     dee:	ec e7       	ldi	r30, 0x7C	; 124
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	04 c0       	rjmp	.+8      	; 0xdfc <log+0x50>
     df4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__addsf3>
     df8:	e9 ea       	ldi	r30, 0xA9	; 169
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	0e 94 65 06 	call	0xcca	; 0xcca <__fp_powser>
     e00:	8b 01       	movw	r16, r22
     e02:	be 01       	movw	r22, r28
     e04:	ec 01       	movw	r28, r24
     e06:	fb 2e       	mov	r15, r27
     e08:	6f 57       	subi	r22, 0x7F	; 127
     e0a:	71 09       	sbc	r23, r1
     e0c:	75 95       	asr	r23
     e0e:	77 1f       	adc	r23, r23
     e10:	88 0b       	sbc	r24, r24
     e12:	99 0b       	sbc	r25, r25
     e14:	0e 94 80 04 	call	0x900	; 0x900 <__floatsisf>
     e18:	28 e1       	ldi	r18, 0x18	; 24
     e1a:	32 e7       	ldi	r19, 0x72	; 114
     e1c:	41 e3       	ldi	r20, 0x31	; 49
     e1e:	5f e3       	ldi	r21, 0x3F	; 63
     e20:	0e 94 81 05 	call	0xb02	; 0xb02 <__mulsf3x>
     e24:	af 2d       	mov	r26, r15
     e26:	98 01       	movw	r18, r16
     e28:	ae 01       	movw	r20, r28
     e2a:	ff 90       	pop	r15
     e2c:	0f 91       	pop	r16
     e2e:	1f 91       	pop	r17
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	0e 94 81 03 	call	0x702	; 0x702 <__addsf3x>
     e38:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__fp_round>

00000e3c <modf>:
     e3c:	fa 01       	movw	r30, r20
     e3e:	dc 01       	movw	r26, r24
     e40:	aa 0f       	add	r26, r26
     e42:	bb 1f       	adc	r27, r27
     e44:	9b 01       	movw	r18, r22
     e46:	ac 01       	movw	r20, r24
     e48:	bf 57       	subi	r27, 0x7F	; 127
     e4a:	28 f4       	brcc	.+10     	; 0xe56 <modf+0x1a>
     e4c:	22 27       	eor	r18, r18
     e4e:	33 27       	eor	r19, r19
     e50:	44 27       	eor	r20, r20
     e52:	50 78       	andi	r21, 0x80	; 128
     e54:	20 c0       	rjmp	.+64     	; 0xe96 <modf+0x5a>
     e56:	b7 51       	subi	r27, 0x17	; 23
     e58:	90 f4       	brcc	.+36     	; 0xe7e <modf+0x42>
     e5a:	ab 2f       	mov	r26, r27
     e5c:	00 24       	eor	r0, r0
     e5e:	46 95       	lsr	r20
     e60:	37 95       	ror	r19
     e62:	27 95       	ror	r18
     e64:	01 1c       	adc	r0, r1
     e66:	a3 95       	inc	r26
     e68:	d2 f3       	brmi	.-12     	; 0xe5e <modf+0x22>
     e6a:	00 20       	and	r0, r0
     e6c:	71 f0       	breq	.+28     	; 0xe8a <modf+0x4e>
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	44 1f       	adc	r20, r20
     e74:	b3 95       	inc	r27
     e76:	da f3       	brmi	.-10     	; 0xe6e <modf+0x32>
     e78:	0e d0       	rcall	.+28     	; 0xe96 <modf+0x5a>
     e7a:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__subsf3>
     e7e:	61 30       	cpi	r22, 0x01	; 1
     e80:	71 05       	cpc	r23, r1
     e82:	a0 e8       	ldi	r26, 0x80	; 128
     e84:	8a 07       	cpc	r24, r26
     e86:	b9 46       	sbci	r27, 0x69	; 105
     e88:	30 f4       	brcc	.+12     	; 0xe96 <modf+0x5a>
     e8a:	9b 01       	movw	r18, r22
     e8c:	ac 01       	movw	r20, r24
     e8e:	66 27       	eor	r22, r22
     e90:	77 27       	eor	r23, r23
     e92:	88 27       	eor	r24, r24
     e94:	90 78       	andi	r25, 0x80	; 128
     e96:	30 96       	adiw	r30, 0x00	; 0
     e98:	21 f0       	breq	.+8      	; 0xea2 <modf+0x66>
     e9a:	20 83       	st	Z, r18
     e9c:	31 83       	std	Z+1, r19	; 0x01
     e9e:	42 83       	std	Z+2, r20	; 0x02
     ea0:	53 83       	std	Z+3, r21	; 0x03
     ea2:	08 95       	ret

00000ea4 <malloc>:
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	91 05       	cpc	r25, r1
     eac:	10 f4       	brcc	.+4      	; 0xeb2 <malloc+0xe>
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	e0 91 98 00 	lds	r30, 0x0098
     eb6:	f0 91 99 00 	lds	r31, 0x0099
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	c0 e0       	ldi	r28, 0x00	; 0
     ec0:	d0 e0       	ldi	r29, 0x00	; 0
     ec2:	30 97       	sbiw	r30, 0x00	; 0
     ec4:	11 f1       	breq	.+68     	; 0xf0a <malloc+0x66>
     ec6:	40 81       	ld	r20, Z
     ec8:	51 81       	ldd	r21, Z+1	; 0x01
     eca:	48 17       	cp	r20, r24
     ecc:	59 07       	cpc	r21, r25
     ece:	c0 f0       	brcs	.+48     	; 0xf00 <malloc+0x5c>
     ed0:	48 17       	cp	r20, r24
     ed2:	59 07       	cpc	r21, r25
     ed4:	61 f4       	brne	.+24     	; 0xeee <malloc+0x4a>
     ed6:	82 81       	ldd	r24, Z+2	; 0x02
     ed8:	93 81       	ldd	r25, Z+3	; 0x03
     eda:	20 97       	sbiw	r28, 0x00	; 0
     edc:	19 f0       	breq	.+6      	; 0xee4 <malloc+0x40>
     ede:	9b 83       	std	Y+3, r25	; 0x03
     ee0:	8a 83       	std	Y+2, r24	; 0x02
     ee2:	2b c0       	rjmp	.+86     	; 0xf3a <malloc+0x96>
     ee4:	90 93 99 00 	sts	0x0099, r25
     ee8:	80 93 98 00 	sts	0x0098, r24
     eec:	26 c0       	rjmp	.+76     	; 0xf3a <malloc+0x96>
     eee:	21 15       	cp	r18, r1
     ef0:	31 05       	cpc	r19, r1
     ef2:	19 f0       	breq	.+6      	; 0xefa <malloc+0x56>
     ef4:	42 17       	cp	r20, r18
     ef6:	53 07       	cpc	r21, r19
     ef8:	18 f4       	brcc	.+6      	; 0xf00 <malloc+0x5c>
     efa:	9a 01       	movw	r18, r20
     efc:	be 01       	movw	r22, r28
     efe:	df 01       	movw	r26, r30
     f00:	ef 01       	movw	r28, r30
     f02:	02 80       	ldd	r0, Z+2	; 0x02
     f04:	f3 81       	ldd	r31, Z+3	; 0x03
     f06:	e0 2d       	mov	r30, r0
     f08:	dc cf       	rjmp	.-72     	; 0xec2 <malloc+0x1e>
     f0a:	21 15       	cp	r18, r1
     f0c:	31 05       	cpc	r19, r1
     f0e:	09 f1       	breq	.+66     	; 0xf52 <malloc+0xae>
     f10:	28 1b       	sub	r18, r24
     f12:	39 0b       	sbc	r19, r25
     f14:	24 30       	cpi	r18, 0x04	; 4
     f16:	31 05       	cpc	r19, r1
     f18:	90 f4       	brcc	.+36     	; 0xf3e <malloc+0x9a>
     f1a:	12 96       	adiw	r26, 0x02	; 2
     f1c:	8d 91       	ld	r24, X+
     f1e:	9c 91       	ld	r25, X
     f20:	13 97       	sbiw	r26, 0x03	; 3
     f22:	61 15       	cp	r22, r1
     f24:	71 05       	cpc	r23, r1
     f26:	21 f0       	breq	.+8      	; 0xf30 <malloc+0x8c>
     f28:	fb 01       	movw	r30, r22
     f2a:	93 83       	std	Z+3, r25	; 0x03
     f2c:	82 83       	std	Z+2, r24	; 0x02
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <malloc+0x94>
     f30:	90 93 99 00 	sts	0x0099, r25
     f34:	80 93 98 00 	sts	0x0098, r24
     f38:	fd 01       	movw	r30, r26
     f3a:	32 96       	adiw	r30, 0x02	; 2
     f3c:	44 c0       	rjmp	.+136    	; 0xfc6 <malloc+0x122>
     f3e:	fd 01       	movw	r30, r26
     f40:	e2 0f       	add	r30, r18
     f42:	f3 1f       	adc	r31, r19
     f44:	81 93       	st	Z+, r24
     f46:	91 93       	st	Z+, r25
     f48:	22 50       	subi	r18, 0x02	; 2
     f4a:	31 09       	sbc	r19, r1
     f4c:	2d 93       	st	X+, r18
     f4e:	3c 93       	st	X, r19
     f50:	3a c0       	rjmp	.+116    	; 0xfc6 <malloc+0x122>
     f52:	20 91 96 00 	lds	r18, 0x0096
     f56:	30 91 97 00 	lds	r19, 0x0097
     f5a:	23 2b       	or	r18, r19
     f5c:	41 f4       	brne	.+16     	; 0xf6e <malloc+0xca>
     f5e:	20 91 82 00 	lds	r18, 0x0082
     f62:	30 91 83 00 	lds	r19, 0x0083
     f66:	30 93 97 00 	sts	0x0097, r19
     f6a:	20 93 96 00 	sts	0x0096, r18
     f6e:	20 91 80 00 	lds	r18, 0x0080
     f72:	30 91 81 00 	lds	r19, 0x0081
     f76:	21 15       	cp	r18, r1
     f78:	31 05       	cpc	r19, r1
     f7a:	41 f4       	brne	.+16     	; 0xf8c <malloc+0xe8>
     f7c:	2d b7       	in	r18, 0x3d	; 61
     f7e:	3e b7       	in	r19, 0x3e	; 62
     f80:	40 91 84 00 	lds	r20, 0x0084
     f84:	50 91 85 00 	lds	r21, 0x0085
     f88:	24 1b       	sub	r18, r20
     f8a:	35 0b       	sbc	r19, r21
     f8c:	e0 91 96 00 	lds	r30, 0x0096
     f90:	f0 91 97 00 	lds	r31, 0x0097
     f94:	e2 17       	cp	r30, r18
     f96:	f3 07       	cpc	r31, r19
     f98:	a0 f4       	brcc	.+40     	; 0xfc2 <malloc+0x11e>
     f9a:	2e 1b       	sub	r18, r30
     f9c:	3f 0b       	sbc	r19, r31
     f9e:	28 17       	cp	r18, r24
     fa0:	39 07       	cpc	r19, r25
     fa2:	78 f0       	brcs	.+30     	; 0xfc2 <malloc+0x11e>
     fa4:	ac 01       	movw	r20, r24
     fa6:	4e 5f       	subi	r20, 0xFE	; 254
     fa8:	5f 4f       	sbci	r21, 0xFF	; 255
     faa:	24 17       	cp	r18, r20
     fac:	35 07       	cpc	r19, r21
     fae:	48 f0       	brcs	.+18     	; 0xfc2 <malloc+0x11e>
     fb0:	4e 0f       	add	r20, r30
     fb2:	5f 1f       	adc	r21, r31
     fb4:	50 93 97 00 	sts	0x0097, r21
     fb8:	40 93 96 00 	sts	0x0096, r20
     fbc:	81 93       	st	Z+, r24
     fbe:	91 93       	st	Z+, r25
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <malloc+0x122>
     fc2:	e0 e0       	ldi	r30, 0x00	; 0
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	cf 01       	movw	r24, r30
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <free>:
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	09 f4       	brne	.+2      	; 0xfdc <free+0xe>
     fda:	8c c0       	rjmp	.+280    	; 0x10f4 <free+0x126>
     fdc:	fc 01       	movw	r30, r24
     fde:	32 97       	sbiw	r30, 0x02	; 2
     fe0:	13 82       	std	Z+3, r1	; 0x03
     fe2:	12 82       	std	Z+2, r1	; 0x02
     fe4:	00 91 98 00 	lds	r16, 0x0098
     fe8:	10 91 99 00 	lds	r17, 0x0099
     fec:	01 15       	cp	r16, r1
     fee:	11 05       	cpc	r17, r1
     ff0:	81 f4       	brne	.+32     	; 0x1012 <free+0x44>
     ff2:	20 81       	ld	r18, Z
     ff4:	31 81       	ldd	r19, Z+1	; 0x01
     ff6:	82 0f       	add	r24, r18
     ff8:	93 1f       	adc	r25, r19
     ffa:	20 91 96 00 	lds	r18, 0x0096
     ffe:	30 91 97 00 	lds	r19, 0x0097
    1002:	28 17       	cp	r18, r24
    1004:	39 07       	cpc	r19, r25
    1006:	79 f5       	brne	.+94     	; 0x1066 <free+0x98>
    1008:	f0 93 97 00 	sts	0x0097, r31
    100c:	e0 93 96 00 	sts	0x0096, r30
    1010:	71 c0       	rjmp	.+226    	; 0x10f4 <free+0x126>
    1012:	d8 01       	movw	r26, r16
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	ae 17       	cp	r26, r30
    101a:	bf 07       	cpc	r27, r31
    101c:	50 f4       	brcc	.+20     	; 0x1032 <free+0x64>
    101e:	12 96       	adiw	r26, 0x02	; 2
    1020:	2d 91       	ld	r18, X+
    1022:	3c 91       	ld	r19, X
    1024:	13 97       	sbiw	r26, 0x03	; 3
    1026:	ad 01       	movw	r20, r26
    1028:	21 15       	cp	r18, r1
    102a:	31 05       	cpc	r19, r1
    102c:	09 f1       	breq	.+66     	; 0x1070 <free+0xa2>
    102e:	d9 01       	movw	r26, r18
    1030:	f3 cf       	rjmp	.-26     	; 0x1018 <free+0x4a>
    1032:	9d 01       	movw	r18, r26
    1034:	da 01       	movw	r26, r20
    1036:	33 83       	std	Z+3, r19	; 0x03
    1038:	22 83       	std	Z+2, r18	; 0x02
    103a:	60 81       	ld	r22, Z
    103c:	71 81       	ldd	r23, Z+1	; 0x01
    103e:	86 0f       	add	r24, r22
    1040:	97 1f       	adc	r25, r23
    1042:	82 17       	cp	r24, r18
    1044:	93 07       	cpc	r25, r19
    1046:	69 f4       	brne	.+26     	; 0x1062 <free+0x94>
    1048:	ec 01       	movw	r28, r24
    104a:	28 81       	ld	r18, Y
    104c:	39 81       	ldd	r19, Y+1	; 0x01
    104e:	26 0f       	add	r18, r22
    1050:	37 1f       	adc	r19, r23
    1052:	2e 5f       	subi	r18, 0xFE	; 254
    1054:	3f 4f       	sbci	r19, 0xFF	; 255
    1056:	31 83       	std	Z+1, r19	; 0x01
    1058:	20 83       	st	Z, r18
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	93 83       	std	Z+3, r25	; 0x03
    1060:	82 83       	std	Z+2, r24	; 0x02
    1062:	45 2b       	or	r20, r21
    1064:	29 f4       	brne	.+10     	; 0x1070 <free+0xa2>
    1066:	f0 93 99 00 	sts	0x0099, r31
    106a:	e0 93 98 00 	sts	0x0098, r30
    106e:	42 c0       	rjmp	.+132    	; 0x10f4 <free+0x126>
    1070:	13 96       	adiw	r26, 0x03	; 3
    1072:	fc 93       	st	X, r31
    1074:	ee 93       	st	-X, r30
    1076:	12 97       	sbiw	r26, 0x02	; 2
    1078:	ed 01       	movw	r28, r26
    107a:	49 91       	ld	r20, Y+
    107c:	59 91       	ld	r21, Y+
    107e:	9e 01       	movw	r18, r28
    1080:	24 0f       	add	r18, r20
    1082:	35 1f       	adc	r19, r21
    1084:	e2 17       	cp	r30, r18
    1086:	f3 07       	cpc	r31, r19
    1088:	71 f4       	brne	.+28     	; 0x10a6 <free+0xd8>
    108a:	80 81       	ld	r24, Z
    108c:	91 81       	ldd	r25, Z+1	; 0x01
    108e:	84 0f       	add	r24, r20
    1090:	95 1f       	adc	r25, r21
    1092:	02 96       	adiw	r24, 0x02	; 2
    1094:	11 96       	adiw	r26, 0x01	; 1
    1096:	9c 93       	st	X, r25
    1098:	8e 93       	st	-X, r24
    109a:	82 81       	ldd	r24, Z+2	; 0x02
    109c:	93 81       	ldd	r25, Z+3	; 0x03
    109e:	13 96       	adiw	r26, 0x03	; 3
    10a0:	9c 93       	st	X, r25
    10a2:	8e 93       	st	-X, r24
    10a4:	12 97       	sbiw	r26, 0x02	; 2
    10a6:	e0 e0       	ldi	r30, 0x00	; 0
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	d8 01       	movw	r26, r16
    10ac:	12 96       	adiw	r26, 0x02	; 2
    10ae:	8d 91       	ld	r24, X+
    10b0:	9c 91       	ld	r25, X
    10b2:	13 97       	sbiw	r26, 0x03	; 3
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	19 f0       	breq	.+6      	; 0x10be <free+0xf0>
    10b8:	f8 01       	movw	r30, r16
    10ba:	8c 01       	movw	r16, r24
    10bc:	f6 cf       	rjmp	.-20     	; 0x10aa <free+0xdc>
    10be:	8d 91       	ld	r24, X+
    10c0:	9c 91       	ld	r25, X
    10c2:	98 01       	movw	r18, r16
    10c4:	2e 5f       	subi	r18, 0xFE	; 254
    10c6:	3f 4f       	sbci	r19, 0xFF	; 255
    10c8:	82 0f       	add	r24, r18
    10ca:	93 1f       	adc	r25, r19
    10cc:	20 91 96 00 	lds	r18, 0x0096
    10d0:	30 91 97 00 	lds	r19, 0x0097
    10d4:	28 17       	cp	r18, r24
    10d6:	39 07       	cpc	r19, r25
    10d8:	69 f4       	brne	.+26     	; 0x10f4 <free+0x126>
    10da:	30 97       	sbiw	r30, 0x00	; 0
    10dc:	29 f4       	brne	.+10     	; 0x10e8 <free+0x11a>
    10de:	10 92 99 00 	sts	0x0099, r1
    10e2:	10 92 98 00 	sts	0x0098, r1
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <free+0x11e>
    10e8:	13 82       	std	Z+3, r1	; 0x03
    10ea:	12 82       	std	Z+2, r1	; 0x02
    10ec:	10 93 97 00 	sts	0x0097, r17
    10f0:	00 93 96 00 	sts	0x0096, r16
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	08 95       	ret

000010fe <_exit>:
    10fe:	f8 94       	cli

00001100 <__stop_program>:
    1100:	ff cf       	rjmp	.-2      	; 0x1100 <__stop_program>
