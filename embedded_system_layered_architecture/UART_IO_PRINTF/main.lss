
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000350  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000350  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000010bc  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e7c  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002314  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  7a:	0c 94 a6 01 	jmp	0x34c	; 0x34c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <uart_init>:
#include "UART_int.h"



void uart_init(void){
DDRD|=(1<<DDD1);
  82:	89 9a       	sbi	0x11, 1	; 17
DDRD&=~(1<<DDD0);
  84:	88 98       	cbi	0x11, 0	; 17
UBRRL = 0x33;//set baudrate 9600
  86:	83 e3       	ldi	r24, 0x33	; 51
  88:	89 b9       	out	0x09, r24	; 9
UBRRH = 0;
  8a:	10 bc       	out	0x20, r1	; 32
UCSRC=(1<<UCSZ0)|(1<<UCSZ1)|(1<<URSEL);  // Set Frame Format -> 8 data, 1 stop, No Parity
  8c:	86 e8       	ldi	r24, 0x86	; 134
  8e:	80 bd       	out	0x20, r24	; 32
UCSRB=(1<<RXEN)|(1<<TXEN);// Enable RX and TX
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	8a b9       	out	0x0a, r24	; 10
  94:	08 95       	ret

00000096 <uart_send_char>:


}

void uart_send_char(u8 c){
while(!(UCSRA & (1<<UDRE)));
  96:	5d 9b       	sbis	0x0b, 5	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <uart_send_char>

      UDR=c;
  9a:	8c b9       	out	0x0c, r24	; 12
  9c:	08 95       	ret

0000009e <uart_receive_char>:

}

u8 uart_receive_char(void){
while(!(UCSRA & (1<<RXC)));
  9e:	5f 9b       	sbis	0x0b, 7	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <uart_receive_char>
return UDR;
  a2:	8c b1       	in	r24, 0x0c	; 12
}
  a4:	08 95       	ret

000000a6 <power>:
#include "UART_int.h"




u32 power(u16 base,u16 power){
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	6c 01       	movw	r12, r24
  b4:	eb 01       	movw	r28, r22
u32 num=1;
if(power==0u)
  b6:	20 97       	sbiw	r28, 0x00	; 0
  b8:	c1 f0       	breq	.+48     	; 0xea <power+0x44>
  ba:	e1 e0       	ldi	r30, 0x01	; 1
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
return 1;
else{
u16 i;	
for(i=1;i<=power;i++){
num=num*base;
  c6:	e1 2c       	mov	r14, r1
  c8:	f1 2c       	mov	r15, r1
u32 num=1;
if(power==0u)
return 1;
else{
u16 i;	
for(i=1;i<=power;i++){
  ca:	ce 17       	cp	r28, r30
  cc:	df 07       	cpc	r29, r31
  ce:	50 f0       	brcs	.+20     	; 0xe4 <power+0x3e>
num=num*base;
  d0:	37 2f       	mov	r19, r23
  d2:	59 2f       	mov	r21, r25
  d4:	c7 01       	movw	r24, r14
  d6:	b6 01       	movw	r22, r12
  d8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__mulsi3>
  dc:	26 2f       	mov	r18, r22
  de:	48 2f       	mov	r20, r24
u32 num=1;
if(power==0u)
return 1;
else{
u16 i;	
for(i=1;i<=power;i++){
  e0:	31 96       	adiw	r30, 0x01	; 1
  e2:	f3 cf       	rjmp	.-26     	; 0xca <power+0x24>
num=num*base;
}

return num;
  e4:	62 2f       	mov	r22, r18
  e6:	84 2f       	mov	r24, r20
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <power+0x4c>


u32 power(u16 base,u16 power){
u32 num=1;
if(power==0u)
return 1;
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
}

return num;
}

}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	ff 90       	pop	r15
  f8:	ef 90       	pop	r14
  fa:	df 90       	pop	r13
  fc:	cf 90       	pop	r12
  fe:	08 95       	ret

00000100 <int_to_array_of_char>:


void int_to_array_of_char(u16 number,u8 * array_of_char){
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	fc 01       	movw	r30, r24
 10a:	eb 01       	movw	r28, r22

u16 digits=0;
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
u16 temp=number;
while(temp!=0){
digits++;
temp=temp/10;
 110:	0a e0       	ldi	r16, 0x0A	; 10
 112:	10 e0       	ldi	r17, 0x00	; 0

void int_to_array_of_char(u16 number,u8 * array_of_char){

u16 digits=0;
u16 temp=number;
while(temp!=0){
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	39 f0       	breq	.+14     	; 0x126 <int_to_array_of_char+0x26>
digits++;
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
temp=temp/10;
 11c:	b8 01       	movw	r22, r16
 11e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__udivmodhi4>
 122:	cb 01       	movw	r24, r22
 124:	f7 cf       	rjmp	.-18     	; 0x114 <int_to_array_of_char+0x14>
 126:	2c 0f       	add	r18, r28
 128:	3d 1f       	adc	r19, r29
 12a:	e9 01       	movw	r28, r18
}
temp=digits;
while(number!=0 ){
u16 digit=number%10;
 12c:	0a e0       	ldi	r16, 0x0A	; 10
 12e:	10 e0       	ldi	r17, 0x00	; 0
while(temp!=0){
digits++;
temp=temp/10;
}
temp=digits;
while(number!=0 ){
 130:	30 97       	sbiw	r30, 0x00	; 0
 132:	41 f0       	breq	.+16     	; 0x144 <int_to_array_of_char+0x44>
u16 digit=number%10;
number=number/10;
 134:	cf 01       	movw	r24, r30
 136:	b8 01       	movw	r22, r16
 138:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__udivmodhi4>
 13c:	fb 01       	movw	r30, r22
array_of_char[temp-1]=digit+'0';
 13e:	80 5d       	subi	r24, 0xD0	; 208
 140:	8a 93       	st	-Y, r24
 142:	f6 cf       	rjmp	.-20     	; 0x130 <int_to_array_of_char+0x30>
temp--;
}
array_of_char[digits]='\0';
 144:	f9 01       	movw	r30, r18
 146:	10 82       	st	Z, r1

}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <u32_array_of_char_to_int>:



u32 u32_array_of_char_to_int(u8 * array){
 152:	8f 92       	push	r8
 154:	9f 92       	push	r9
 156:	af 92       	push	r10
 158:	bf 92       	push	r11
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	7c 01       	movw	r14, r24

u8 index=0;
u32 number=0;
u8 digits=0;
 166:	90 e0       	ldi	r25, 0x00	; 0
while(array[digits]!='\0'){
 168:	f7 01       	movw	r30, r14
 16a:	e9 0f       	add	r30, r25
 16c:	f1 1d       	adc	r31, r1
 16e:	80 81       	ld	r24, Z
 170:	88 23       	and	r24, r24
 172:	11 f0       	breq	.+4      	; 0x178 <u32_array_of_char_to_int+0x26>
digits++;
 174:	9f 5f       	subi	r25, 0xFF	; 255
 176:	f8 cf       	rjmp	.-16     	; 0x168 <u32_array_of_char_to_int+0x16>
}
digits--;
 178:	1f ef       	ldi	r17, 0xFF	; 255
 17a:	19 0f       	add	r17, r25
 17c:	d1 2f       	mov	r29, r17


u32 u32_array_of_char_to_int(u8 * array){

u8 index=0;
u32 number=0;
 17e:	81 2c       	mov	r8, r1
 180:	91 2c       	mov	r9, r1
 182:	54 01       	movw	r10, r8
 184:	81 2f       	mov	r24, r17
 186:	8d 1b       	sub	r24, r29
u8 digits=0;
while(array[digits]!='\0'){
digits++;
}
digits--;
while(array[index]!='\0'){
 188:	f7 01       	movw	r30, r14
 18a:	e8 0f       	add	r30, r24
 18c:	f1 1d       	adc	r31, r1
 18e:	c0 81       	ld	r28, Z
 190:	cc 23       	and	r28, r28
 192:	99 f0       	breq	.+38     	; 0x1ba <u32_array_of_char_to_int+0x68>


number=number+((array[index]-'0')*(u32)power(10,digits));
 194:	6d 2f       	mov	r22, r29
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	8a e0       	ldi	r24, 0x0A	; 10
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 53 00 	call	0xa6	; 0xa6 <power>
 1a0:	9b 01       	movw	r18, r22
 1a2:	ac 01       	movw	r20, r24
 1a4:	ac 2f       	mov	r26, r28
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	d0 97       	sbiw	r26, 0x30	; 48
 1aa:	0e 94 8f 01 	call	0x31e	; 0x31e <__mulshisi3>
 1ae:	86 0e       	add	r8, r22
 1b0:	97 1e       	adc	r9, r23
 1b2:	a8 1e       	adc	r10, r24
 1b4:	b9 1e       	adc	r11, r25
index++;
digits--;
 1b6:	d1 50       	subi	r29, 0x01	; 1
 1b8:	e5 cf       	rjmp	.-54     	; 0x184 <u32_array_of_char_to_int+0x32>
}

return number;

}
 1ba:	c5 01       	movw	r24, r10
 1bc:	b4 01       	movw	r22, r8
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	bf 90       	pop	r11
 1ca:	af 90       	pop	r10
 1cc:	9f 90       	pop	r9
 1ce:	8f 90       	pop	r8
 1d0:	08 95       	ret

000001d2 <USART_SendString>:


void USART_SendString(char * string){
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24

int index=0;
while(string[index] !='\0')
 1d8:	89 91       	ld	r24, Y+
 1da:	88 23       	and	r24, r24
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <USART_SendString+0x12>
{uart_send_char(string[index]);
 1de:	0e 94 4b 00 	call	0x96	; 0x96 <uart_send_char>
 1e2:	fa cf       	rjmp	.-12     	; 0x1d8 <USART_SendString+0x6>
index++;
}

}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <read_string_uart>:



void read_string_uart(u8 * recived_data_buffer )
{
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	8c 01       	movw	r16, r24
     u8 data=uart_receive_char();
 1f6:	0e 94 4f 00 	call	0x9e	; 0x9e <uart_receive_char>
 1fa:	c8 2f       	mov	r28, r24
     uart_send_char(data);
 1fc:	0e 94 4b 00 	call	0x96	; 0x96 <uart_send_char>
     u16 index=0;
     while(data !=13){
 200:	78 01       	movw	r14, r16
 202:	97 01       	movw	r18, r14
 204:	20 1b       	sub	r18, r16
 206:	31 0b       	sbc	r19, r17
 208:	cd 30       	cpi	r28, 0x0D	; 13
 20a:	49 f0       	breq	.+18     	; 0x21e <read_string_uart+0x34>
     recived_data_buffer[index++]=data;
 20c:	f7 01       	movw	r30, r14
 20e:	c1 93       	st	Z+, r28
 210:	7f 01       	movw	r14, r30
     data=uart_receive_char();
 212:	0e 94 4f 00 	call	0x9e	; 0x9e <uart_receive_char>
 216:	c8 2f       	mov	r28, r24
     uart_send_char(data);
 218:	0e 94 4b 00 	call	0x96	; 0x96 <uart_send_char>
 21c:	f2 cf       	rjmp	.-28     	; 0x202 <read_string_uart+0x18>

     }
     recived_data_buffer[index]='\0';
 21e:	f8 01       	movw	r30, r16
 220:	e2 0f       	add	r30, r18
 222:	f3 1f       	adc	r31, r19
 224:	10 82       	st	Z, r1
     USART_SendString("\r\n");
 226:	80 e6       	ldi	r24, 0x60	; 96
 228:	90 e0       	ldi	r25, 0x00	; 0

}
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
     data=uart_receive_char();
     uart_send_char(data);

     }
     recived_data_buffer[index]='\0';
     USART_SendString("\r\n");
 234:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <USART_SendString>

00000238 <printf_int_uart>:




void printf_int_uart(u32 number,u8* recived_data_buffer)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	dc 01       	movw	r26, r24
 23e:	cb 01       	movw	r24, r22
 240:	ea 01       	movw	r28, r20

int_to_array_of_char(number,recived_data_buffer);
 242:	ba 01       	movw	r22, r20
 244:	0e 94 80 00 	call	0x100	; 0x100 <int_to_array_of_char>
USART_SendString(recived_data_buffer);
 248:	ce 01       	movw	r24, r28

}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28

void printf_int_uart(u32 number,u8* recived_data_buffer)
{

int_to_array_of_char(number,recived_data_buffer);
USART_SendString(recived_data_buffer);
 24e:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <USART_SendString>

00000252 <scanf_int_uart>:
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	8c 01       	movw	r16, r24
 25c:	eb 01       	movw	r28, r22
 25e:	cb 01       	movw	r24, r22
 260:	0e 94 f5 00 	call	0x1ea	; 0x1ea <read_string_uart>
 264:	ce 01       	movw	r24, r28
 266:	0e 94 a9 00 	call	0x152	; 0x152 <u32_array_of_char_to_int>
 26a:	f8 01       	movw	r30, r16
 26c:	60 83       	st	Z, r22
 26e:	71 83       	std	Z+1, r23	; 0x01
 270:	82 83       	std	Z+2, r24	; 0x02
 272:	93 83       	std	Z+3, r25	; 0x03
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <main>:
#include "UART_int.h"
#include "UART_IO_int.h"


int main ()
{ u8 array_of_char[12];
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	60 97       	sbiw	r28, 0x10	; 16
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	f8 94       	cli
 28c:	de bf       	out	0x3e, r29	; 62
 28e:	0f be       	out	0x3f, r0	; 63
 290:	cd bf       	out	0x3d, r28	; 61
  u8 recived_data_buffer[12];
 uart_init();
 292:	0e 94 41 00 	call	0x82	; 0x82 <uart_init>
 
 u32 num;
 
  while(1){
  	 scanf_int_uart(&num,recived_data_buffer);
 296:	be 01       	movw	r22, r28
 298:	6f 5f       	subi	r22, 0xFF	; 255
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	ce 01       	movw	r24, r28
 29e:	0d 96       	adiw	r24, 0x0d	; 13
 2a0:	0e 94 29 01 	call	0x252	; 0x252 <scanf_int_uart>

     printf_int_uart(num,recived_data_buffer);
 2a4:	6d 85       	ldd	r22, Y+13	; 0x0d
 2a6:	7e 85       	ldd	r23, Y+14	; 0x0e
 2a8:	8f 85       	ldd	r24, Y+15	; 0x0f
 2aa:	98 89       	ldd	r25, Y+16	; 0x10
 2ac:	ae 01       	movw	r20, r28
 2ae:	4f 5f       	subi	r20, 0xFF	; 255
 2b0:	5f 4f       	sbci	r21, 0xFF	; 255
 2b2:	0e 94 1c 01 	call	0x238	; 0x238 <printf_int_uart>
      
     USART_SendString("\r\n");
 2b6:	80 e6       	ldi	r24, 0x60	; 96
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART_SendString>
     

	}
 2be:	eb cf       	rjmp	.-42     	; 0x296 <main+0x18>

000002c0 <__mulsi3>:
 2c0:	db 01       	movw	r26, r22
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
 2c6:	0e 94 84 01 	call	0x308	; 0x308 <__muluhisi3>
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	a2 9f       	mul	r26, r18
 2d0:	80 0d       	add	r24, r0
 2d2:	91 1d       	adc	r25, r1
 2d4:	a3 9f       	mul	r26, r19
 2d6:	90 0d       	add	r25, r0
 2d8:	b2 9f       	mul	r27, r18
 2da:	90 0d       	add	r25, r0
 2dc:	11 24       	eor	r1, r1
 2de:	08 95       	ret

000002e0 <__udivmodhi4>:
 2e0:	aa 1b       	sub	r26, r26
 2e2:	bb 1b       	sub	r27, r27
 2e4:	51 e1       	ldi	r21, 0x11	; 17
 2e6:	07 c0       	rjmp	.+14     	; 0x2f6 <__udivmodhi4_ep>

000002e8 <__udivmodhi4_loop>:
 2e8:	aa 1f       	adc	r26, r26
 2ea:	bb 1f       	adc	r27, r27
 2ec:	a6 17       	cp	r26, r22
 2ee:	b7 07       	cpc	r27, r23
 2f0:	10 f0       	brcs	.+4      	; 0x2f6 <__udivmodhi4_ep>
 2f2:	a6 1b       	sub	r26, r22
 2f4:	b7 0b       	sbc	r27, r23

000002f6 <__udivmodhi4_ep>:
 2f6:	88 1f       	adc	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	5a 95       	dec	r21
 2fc:	a9 f7       	brne	.-22     	; 0x2e8 <__udivmodhi4_loop>
 2fe:	80 95       	com	r24
 300:	90 95       	com	r25
 302:	bc 01       	movw	r22, r24
 304:	cd 01       	movw	r24, r26
 306:	08 95       	ret

00000308 <__muluhisi3>:
 308:	0e 94 97 01 	call	0x32e	; 0x32e <__umulhisi3>
 30c:	a5 9f       	mul	r26, r21
 30e:	90 0d       	add	r25, r0
 310:	b4 9f       	mul	r27, r20
 312:	90 0d       	add	r25, r0
 314:	a4 9f       	mul	r26, r20
 316:	80 0d       	add	r24, r0
 318:	91 1d       	adc	r25, r1
 31a:	11 24       	eor	r1, r1
 31c:	08 95       	ret

0000031e <__mulshisi3>:
 31e:	b7 ff       	sbrs	r27, 7
 320:	0c 94 84 01 	jmp	0x308	; 0x308 <__muluhisi3>

00000324 <__mulohisi3>:
 324:	0e 94 84 01 	call	0x308	; 0x308 <__muluhisi3>
 328:	82 1b       	sub	r24, r18
 32a:	93 0b       	sbc	r25, r19
 32c:	08 95       	ret

0000032e <__umulhisi3>:
 32e:	a2 9f       	mul	r26, r18
 330:	b0 01       	movw	r22, r0
 332:	b3 9f       	mul	r27, r19
 334:	c0 01       	movw	r24, r0
 336:	a3 9f       	mul	r26, r19
 338:	70 0d       	add	r23, r0
 33a:	81 1d       	adc	r24, r1
 33c:	11 24       	eor	r1, r1
 33e:	91 1d       	adc	r25, r1
 340:	b2 9f       	mul	r27, r18
 342:	70 0d       	add	r23, r0
 344:	81 1d       	adc	r24, r1
 346:	11 24       	eor	r1, r1
 348:	91 1d       	adc	r25, r1
 34a:	08 95       	ret

0000034c <_exit>:
 34c:	f8 94       	cli

0000034e <__stop_program>:
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
