
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000a8  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000960  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c9c  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000172c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_init>:
#include "UART_int.h"



void uart_init(void){
DDRD|=(1<<DDD1);
  6c:	89 9a       	sbi	0x11, 1	; 17
DDRD&=~(1<<DDD0);
  6e:	88 98       	cbi	0x11, 0	; 17
UBRRL = 0x33;//set baudrate 9600
  70:	83 e3       	ldi	r24, 0x33	; 51
  72:	89 b9       	out	0x09, r24	; 9
UBRRH = 0;
  74:	10 bc       	out	0x20, r1	; 32
UCSRC=(1<<UCSZ0)|(1<<UCSZ1)|(1<<URSEL);  // Set Frame Format -> 8 data, 1 stop, No Parity
  76:	86 e8       	ldi	r24, 0x86	; 134
  78:	80 bd       	out	0x20, r24	; 32
UCSRB=(1<<RXEN)|(1<<TXEN);// Enable RX and TX
  7a:	88 e1       	ldi	r24, 0x18	; 24
  7c:	8a b9       	out	0x0a, r24	; 10
  7e:	08 95       	ret

00000080 <uart_send_char>:


}

void uart_send_char(unsigned char c){
while(!(UCSRA & (1<<UDRE)));
  80:	5d 9b       	sbis	0x0b, 5	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <uart_send_char>

      UDR=c;
  84:	8c b9       	out	0x0c, r24	; 12
  86:	08 95       	ret

00000088 <uart_receive_char>:
  88:	5f 9b       	sbis	0x0b, 7	; 11
  8a:	fe cf       	rjmp	.-4      	; 0x88 <uart_receive_char>
  8c:	8c b1       	in	r24, 0x0c	; 12
  8e:	08 95       	ret

00000090 <main>:
#include "STD_TYPES.h"
#include "UART_int.h"
#include<avr/io.h>
int main(void){

uart_init();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <uart_init>
DDRA=0xff;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8a bb       	out	0x1a, r24	; 26

//recieved_data=uart_receive_char();
//PORTC=recieved_data;
//uart_send_char(recieved_data);
uart_send_char('1');	
PORTA=0xff;
  98:	cf ef       	ldi	r28, 0xFF	; 255
while(1){

//recieved_data=uart_receive_char();
//PORTC=recieved_data;
//uart_send_char(recieved_data);
uart_send_char('1');	
  9a:	81 e3       	ldi	r24, 0x31	; 49
  9c:	0e 94 40 00 	call	0x80	; 0x80 <uart_send_char>
PORTA=0xff;
  a0:	cb bb       	out	0x1b, r28	; 27
}
  a2:	fb cf       	rjmp	.-10     	; 0x9a <main+0xa>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
