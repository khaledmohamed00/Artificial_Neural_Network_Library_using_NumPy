
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000008ce  00000962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800088  00800088  0000098a  2**0
                  ALLOC
  3 .stab         00001260  00000000  00000000  0000098c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f7e  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002b6a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002b7c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a2 01 	call	0x344	; 0x344 <main>
  8a:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinValue>:

/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	58 f5       	brcc	.+86     	; 0xec <DIO_SetPinValue+0x5a>
  96:	68 30       	cpi	r22, 0x08	; 8
  98:	48 f5       	brcc	.+82     	; 0xec <DIO_SetPinValue+0x5a>
	{
		if (u8PinValCopy == HIGH)
  9a:	41 30       	cpi	r20, 0x01	; 1
  9c:	91 f4       	brne	.+36     	; 0xc2 <DIO_SetPinValue+0x30>
		{
			SET_BIT(*DIO_OutRegisters[u8PortIdCopy],u8PinIdCopy);
  9e:	e8 2f       	mov	r30, r24
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	ee 0f       	add	r30, r30
  a4:	ff 1f       	adc	r31, r31
  a6:	e6 58       	subi	r30, 0x86	; 134
  a8:	ff 4f       	sbci	r31, 0xFF	; 255
  aa:	01 90       	ld	r0, Z+
  ac:	f0 81       	ld	r31, Z
  ae:	e0 2d       	mov	r30, r0
  b0:	20 81       	ld	r18, Z
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	01 c0       	rjmp	.+2      	; 0xba <DIO_SetPinValue+0x28>
  b8:	88 0f       	add	r24, r24
  ba:	6a 95       	dec	r22
  bc:	ea f7       	brpl	.-6      	; 0xb8 <DIO_SetPinValue+0x26>
  be:	82 2b       	or	r24, r18
  c0:	14 c0       	rjmp	.+40     	; 0xea <DIO_SetPinValue+0x58>
		}
		
		else if (u8PinValCopy == LOW)
  c2:	41 11       	cpse	r20, r1
  c4:	13 c0       	rjmp	.+38     	; 0xec <DIO_SetPinValue+0x5a>
		{
			CLR_BIT(*DIO_OutRegisters[u8PortIdCopy],u8PinIdCopy);	
  c6:	e8 2f       	mov	r30, r24
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	ee 0f       	add	r30, r30
  cc:	ff 1f       	adc	r31, r31
  ce:	e6 58       	subi	r30, 0x86	; 134
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	01 90       	ld	r0, Z+
  d4:	f0 81       	ld	r31, Z
  d6:	e0 2d       	mov	r30, r0
  d8:	20 81       	ld	r18, Z
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	01 c0       	rjmp	.+2      	; 0xe2 <DIO_SetPinValue+0x50>
  e0:	88 0f       	add	r24, r24
  e2:	6a 95       	dec	r22
  e4:	ea f7       	brpl	.-6      	; 0xe0 <DIO_SetPinValue+0x4e>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <DIO_GetPinValue>:
u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
  ee:	84 30       	cpi	r24, 0x04	; 4
  f0:	a0 f4       	brcc	.+40     	; 0x11a <DIO_GetPinValue+0x2c>
  f2:	68 30       	cpi	r22, 0x08	; 8
  f4:	90 f4       	brcc	.+36     	; 0x11a <DIO_GetPinValue+0x2c>
	{
		u8ResultLocal= GET_BIT(*DIO_InRegisters[u8PortIdCopy],u8PinIdCopy);
  f6:	e8 2f       	mov	r30, r24
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	ee 58       	subi	r30, 0x8E	; 142
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	01 90       	ld	r0, Z+
 104:	f0 81       	ld	r31, Z
 106:	e0 2d       	mov	r30, r0
 108:	80 81       	ld	r24, Z
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_GetPinValue+0x24>
 10e:	95 95       	asr	r25
 110:	87 95       	ror	r24
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_GetPinValue+0x20>
 116:	81 70       	andi	r24, 0x01	; 1
 118:	08 95       	ret
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
	}
	
	return u8ResultLocal;
}
 11c:	08 95       	ret

0000011e <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 11e:	84 30       	cpi	r24, 0x04	; 4
 120:	58 f5       	brcc	.+86     	; 0x178 <DIO_SetPinDirection+0x5a>
 122:	68 30       	cpi	r22, 0x08	; 8
 124:	48 f5       	brcc	.+82     	; 0x178 <DIO_SetPinDirection+0x5a>
	{
		if ( u8PinDirCopy == OUTPUT )
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	91 f4       	brne	.+36     	; 0x14e <DIO_SetPinDirection+0x30>
		{
			SET_BIT(*DIO_DirRegisters[u8PortIdCopy],u8PinIdCopy);		
 12a:	e8 2f       	mov	r30, r24
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	e6 59       	subi	r30, 0x96	; 150
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	01 90       	ld	r0, Z+
 138:	f0 81       	ld	r31, Z
 13a:	e0 2d       	mov	r30, r0
 13c:	20 81       	ld	r18, Z
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	01 c0       	rjmp	.+2      	; 0x146 <DIO_SetPinDirection+0x28>
 144:	88 0f       	add	r24, r24
 146:	6a 95       	dec	r22
 148:	ea f7       	brpl	.-6      	; 0x144 <DIO_SetPinDirection+0x26>
 14a:	82 2b       	or	r24, r18
 14c:	14 c0       	rjmp	.+40     	; 0x176 <DIO_SetPinDirection+0x58>
		}
		
		else if ( u8PinDirCopy == INPUT )
 14e:	41 11       	cpse	r20, r1
 150:	13 c0       	rjmp	.+38     	; 0x178 <DIO_SetPinDirection+0x5a>
		{
			CLR_BIT(*DIO_DirRegisters[u8PortIdCopy],u8PinIdCopy);
 152:	e8 2f       	mov	r30, r24
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	e6 59       	subi	r30, 0x96	; 150
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	01 90       	ld	r0, Z+
 160:	f0 81       	ld	r31, Z
 162:	e0 2d       	mov	r30, r0
 164:	20 81       	ld	r18, Z
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	01 c0       	rjmp	.+2      	; 0x16e <DIO_SetPinDirection+0x50>
 16c:	88 0f       	add	r24, r24
 16e:	6a 95       	dec	r22
 170:	ea f7       	brpl	.-6      	; 0x16c <DIO_SetPinDirection+0x4e>
 172:	80 95       	com	r24
 174:	82 23       	and	r24, r18
 176:	80 83       	st	Z, r24
 178:	08 95       	ret

0000017a <DIO_SetPortDirection>:

/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
	/* Check on the Required PORT Number */
	if (u8PortId <= PORTD)
 17a:	84 30       	cpi	r24, 0x04	; 4
 17c:	50 f4       	brcc	.+20     	; 0x192 <DIO_SetPortDirection+0x18>
	{
		*DIO_DirRegisters[u8PortId] = u8PortDir;
 17e:	e8 2f       	mov	r30, r24
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	e6 59       	subi	r30, 0x96	; 150
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	01 90       	ld	r0, Z+
 18c:	f0 81       	ld	r31, Z
 18e:	e0 2d       	mov	r30, r0
 190:	60 83       	st	Z, r22
 192:	08 95       	ret

00000194 <DIO_SetPortValue>:
}

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
	/* Check on the Required PORT Number */
	if (u8PortId <= PORTD)
 194:	84 30       	cpi	r24, 0x04	; 4
 196:	50 f4       	brcc	.+20     	; 0x1ac <DIO_SetPortValue+0x18>
	{
		*DIO_OutRegisters[u8PortId] = u8PortVal;
 198:	e8 2f       	mov	r30, r24
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	e6 58       	subi	r30, 0x86	; 134
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	01 90       	ld	r0, Z+
 1a6:	f0 81       	ld	r31, Z
 1a8:	e0 2d       	mov	r30, r0
 1aa:	60 83       	st	Z, r22
 1ac:	08 95       	ret

000001ae <LCD_cmd>:
}

void LCD_cmd(u8 cmd)
{

DIO_SetPortValue(LCD_DATA,cmd);
 1ae:	68 2f       	mov	r22, r24
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_SetPortValue>
DIO_SetPortValue(ctrl,(0<<rs)|(0<<rw)|(1<<en));
 1b6:	64 e0       	ldi	r22, 0x04	; 4
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_SetPortValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	8f ec       	ldi	r24, 0xCF	; 207
 1c0:	97 e0       	ldi	r25, 0x07	; 7
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_cmd+0x14>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_cmd+0x1a>
 1c8:	00 00       	nop
_delay_ms(1);
DIO_SetPortValue(ctrl,(0<<rs)|(0<<rw)|(0<<en));
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_SetPortValue>
 1d2:	9f e7       	ldi	r25, 0x7F	; 127
 1d4:	28 e3       	ldi	r18, 0x38	; 56
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	91 50       	subi	r25, 0x01	; 1
 1da:	20 40       	sbci	r18, 0x00	; 0
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <LCD_cmd+0x2a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_cmd+0x34>
 1e2:	00 00       	nop
 1e4:	08 95       	ret

000001e6 <init_LCD>:
#include "DIO_int.h"
#include "lcd.h"

void init_LCD(void)
{
LCD_cmd(0x38);                            // initialization of 16X2 LCD in 8bit mode
 1e6:	88 e3       	ldi	r24, 0x38	; 56
 1e8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_cmd>
 1ec:	8f ec       	ldi	r24, 0xCF	; 207
 1ee:	97 e0       	ldi	r25, 0x07	; 7
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <init_LCD+0xa>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <init_LCD+0x10>
 1f6:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x01);                                 // clear LCD
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_cmd>
 1fe:	8f ec       	ldi	r24, 0xCF	; 207
 200:	97 e0       	ldi	r25, 0x07	; 7
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <init_LCD+0x1c>
 206:	00 c0       	rjmp	.+0      	; 0x208 <init_LCD+0x22>
 208:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x0E);                        // cursor ON
 20a:	8e e0       	ldi	r24, 0x0E	; 14
 20c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_cmd>
 210:	8f ec       	ldi	r24, 0xCF	; 207
 212:	97 e0       	ldi	r25, 0x07	; 7
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <init_LCD+0x2e>
 218:	00 c0       	rjmp	.+0      	; 0x21a <init_LCD+0x34>
 21a:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x80);                     // —8 go to first line and –0 is for 0th position
 21c:	80 e8       	ldi	r24, 0x80	; 128
 21e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_cmd>
 222:	8f ec       	ldi	r24, 0xCF	; 207
 224:	97 e0       	ldi	r25, 0x07	; 7
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <init_LCD+0x40>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <init_LCD+0x46>
 22c:	00 00       	nop
 22e:	08 95       	ret

00000230 <LCD_write>:
}

void LCD_write(u8 data)
{

DIO_SetPortValue(LCD_DATA,data);
 230:	68 2f       	mov	r22, r24
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_SetPortValue>
DIO_SetPortValue(ctrl,(1<<rs)|(0<<rw)|(1<<en));
 238:	65 e0       	ldi	r22, 0x05	; 5
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_SetPortValue>
 240:	8f ec       	ldi	r24, 0xCF	; 207
 242:	97 e0       	ldi	r25, 0x07	; 7
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <LCD_write+0x14>
 248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_write+0x1a>
 24a:	00 00       	nop
_delay_ms(1);
DIO_SetPortValue(ctrl,(1<<rs)|(0<<rw)|(0<<en));
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 ca 00 	call	0x194	; 0x194 <DIO_SetPortValue>
 254:	9f e7       	ldi	r25, 0x7F	; 127
 256:	28 e3       	ldi	r18, 0x38	; 56
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	91 50       	subi	r25, 0x01	; 1
 25c:	20 40       	sbci	r18, 0x00	; 0
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <LCD_write+0x2a>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LCD_write+0x34>
 264:	00 00       	nop
 266:	08 95       	ret

00000268 <LCD_write_string>:
_delay_ms(50);
return ;
}

void LCD_write_string(u8 *str)             //store address value of the string in pointer *str
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ec 01       	movw	r28, r24
s16 i=0;
while(str[i]!='\0')                               // loop will go on till the NULL character in the string
 26e:	89 91       	ld	r24, Y+
 270:	88 23       	and	r24, r24
 272:	19 f0       	breq	.+6      	; 0x27a <LCD_write_string+0x12>
{
LCD_write(str[i]);                            // sending data on LCD byte by byte
 274:	0e 94 18 01 	call	0x230	; 0x230 <LCD_write>
 278:	fa cf       	rjmp	.-12     	; 0x26e <LCD_write_string+0x6>
i++;
}
return;
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <LCD_write_int>:

void LCD_write_int(s16 number){
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	18 2f       	mov	r17, r24
 28e:	09 2f       	mov	r16, r25

s16 num=number;
 290:	68 2f       	mov	r22, r24
 292:	79 2f       	mov	r23, r25
s16 digits=0;
 294:	c0 e0       	ldi	r28, 0x00	; 0
 296:	d0 e0       	ldi	r29, 0x00	; 0
s16 index;
while(num>0){
digits++;
num/=10;
 298:	ea e0       	ldi	r30, 0x0A	; 10
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	ce 01       	movw	r24, r28
 29e:	01 96       	adiw	r24, 0x01	; 1
void LCD_write_int(s16 number){

s16 num=number;
s16 digits=0;
s16 index;
while(num>0){
 2a0:	16 16       	cp	r1, r22
 2a2:	17 06       	cpc	r1, r23
 2a4:	34 f4       	brge	.+12     	; 0x2b2 <LCD_write_int+0x32>
 2a6:	ec 01       	movw	r28, r24
digits++;
num/=10;
 2a8:	cb 01       	movw	r24, r22
 2aa:	bf 01       	movw	r22, r30
 2ac:	0e 94 ba 01 	call	0x374	; 0x374 <__divmodhi4>
 2b0:	f5 cf       	rjmp	.-22     	; 0x29c <LCD_write_int+0x1c>
}
index=digits-1;
u8 * arr=malloc((digits+1)* sizeof(unsigned char));
 2b2:	0e 94 38 03 	call	0x670	; 0x670 <malloc>
 2b6:	fc 01       	movw	r30, r24
while(index>=0){
 2b8:	9e 01       	movw	r18, r28
s16 rem=number%10;
 2ba:	8a e0       	ldi	r24, 0x0A	; 10
 2bc:	e8 2e       	mov	r14, r24
 2be:	f1 2c       	mov	r15, r1
 2c0:	21 50       	subi	r18, 0x01	; 1
 2c2:	31 09       	sbc	r19, r1
digits++;
num/=10;
}
index=digits-1;
u8 * arr=malloc((digits+1)* sizeof(unsigned char));
while(index>=0){
 2c4:	37 fd       	sbrc	r19, 7
 2c6:	0d c0       	rjmp	.+26     	; 0x2e2 <LCD_write_int+0x62>
s16 rem=number%10;
number=number/10;
 2c8:	81 2f       	mov	r24, r17
 2ca:	90 2f       	mov	r25, r16
 2cc:	b7 01       	movw	r22, r14
 2ce:	0e 94 ba 01 	call	0x374	; 0x374 <__divmodhi4>
 2d2:	16 2f       	mov	r17, r22
 2d4:	07 2f       	mov	r16, r23
 2d6:	df 01       	movw	r26, r30
 2d8:	a2 0f       	add	r26, r18
 2da:	b3 1f       	adc	r27, r19
arr[index--]=rem+'0';
 2dc:	80 5d       	subi	r24, 0xD0	; 208
 2de:	8c 93       	st	X, r24
 2e0:	ef cf       	rjmp	.-34     	; 0x2c0 <LCD_write_int+0x40>
}
arr[digits]='\0';
 2e2:	ce 0f       	add	r28, r30
 2e4:	df 1f       	adc	r29, r31
 2e6:	18 82       	st	Y, r1
LCD_write_string(arr);
 2e8:	cf 01       	movw	r24, r30

}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	ff 90       	pop	r15
 2f4:	ef 90       	pop	r14
s16 rem=number%10;
number=number/10;
arr[index--]=rem+'0';
}
arr[digits]='\0';
LCD_write_string(arr);
 2f6:	0c 94 34 01 	jmp	0x268	; 0x268 <LCD_write_string>

000002fa <LCD_write_double>:
 2fa:	cf 92       	push	r12
 2fc:	df 92       	push	r13
 2fe:	ef 92       	push	r14
 300:	ff 92       	push	r15
 302:	6b 01       	movw	r12, r22
 304:	7c 01       	movw	r14, r24
 306:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__fixsfsi>
 30a:	cb 01       	movw	r24, r22
 30c:	0e 94 40 01 	call	0x280	; 0x280 <LCD_write_int>
 310:	8e e2       	ldi	r24, 0x2E	; 46
 312:	0e 94 18 01 	call	0x230	; 0x230 <LCD_write>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	40 e8       	ldi	r20, 0x80	; 128
 31c:	5f e3       	ldi	r21, 0x3F	; 63
 31e:	c7 01       	movw	r24, r14
 320:	b6 01       	movw	r22, r12
 322:	0e 94 23 02 	call	0x446	; 0x446 <fmod>
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	48 ec       	ldi	r20, 0xC8	; 200
 32c:	52 e4       	ldi	r21, 0x42	; 66
 32e:	0e 94 b4 02 	call	0x568	; 0x568 <__mulsf3>
 332:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__fixsfsi>
 336:	cb 01       	movw	r24, r22
 338:	ff 90       	pop	r15
 33a:	ef 90       	pop	r14
 33c:	df 90       	pop	r13
 33e:	cf 90       	pop	r12
 340:	0c 94 40 01 	jmp	0x280	; 0x280 <LCD_write_int>

00000344 <main>:
#include "DIO_int.h"
#include <util/delay.h>
u8 seven_segment[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x6f};
int main(void){

DIO_SetPortDirection(PORTA,0xff);
 344:	6f ef       	ldi	r22, 0xFF	; 255
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_SetPortDirection>
DIO_SetPortDirection(PORTB,0x07);
 34c:	67 e0       	ldi	r22, 0x07	; 7
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 bd 00 	call	0x17a	; 0x17a <DIO_SetPortDirection>
//LCD_DDR=0xff;
//ctrl_DDR=0x07;
init_LCD();
 354:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <init_LCD>
 358:	2f e7       	ldi	r18, 0x7F	; 127
 35a:	88 e3       	ldi	r24, 0x38	; 56
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	21 50       	subi	r18, 0x01	; 1
 360:	80 40       	sbci	r24, 0x00	; 0
 362:	90 40       	sbci	r25, 0x00	; 0
 364:	e1 f7       	brne	.-8      	; 0x35e <main+0x1a>
 366:	00 c0       	rjmp	.+0      	; 0x368 <main+0x24>
 368:	00 00       	nop
_delay_ms(50);
LCD_write('A');
 36a:	81 e4       	ldi	r24, 0x41	; 65
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 18 01 	call	0x230	; 0x230 <LCD_write>
DIO_SetPortValue(PORTA,seven_segment[i]);
_delay_ms(1000);

}*/

}
 372:	ff cf       	rjmp	.-2      	; 0x372 <main+0x2e>

00000374 <__divmodhi4>:
 374:	97 fb       	bst	r25, 7
 376:	07 2e       	mov	r0, r23
 378:	16 f4       	brtc	.+4      	; 0x37e <__divmodhi4+0xa>
 37a:	00 94       	com	r0
 37c:	07 d0       	rcall	.+14     	; 0x38c <__divmodhi4_neg1>
 37e:	77 fd       	sbrc	r23, 7
 380:	09 d0       	rcall	.+18     	; 0x394 <__divmodhi4_neg2>
 382:	0e 94 ce 01 	call	0x39c	; 0x39c <__udivmodhi4>
 386:	07 fc       	sbrc	r0, 7
 388:	05 d0       	rcall	.+10     	; 0x394 <__divmodhi4_neg2>
 38a:	3e f4       	brtc	.+14     	; 0x39a <__divmodhi4_exit>

0000038c <__divmodhi4_neg1>:
 38c:	90 95       	com	r25
 38e:	81 95       	neg	r24
 390:	9f 4f       	sbci	r25, 0xFF	; 255
 392:	08 95       	ret

00000394 <__divmodhi4_neg2>:
 394:	70 95       	com	r23
 396:	61 95       	neg	r22
 398:	7f 4f       	sbci	r23, 0xFF	; 255

0000039a <__divmodhi4_exit>:
 39a:	08 95       	ret

0000039c <__udivmodhi4>:
 39c:	aa 1b       	sub	r26, r26
 39e:	bb 1b       	sub	r27, r27
 3a0:	51 e1       	ldi	r21, 0x11	; 17
 3a2:	07 c0       	rjmp	.+14     	; 0x3b2 <__udivmodhi4_ep>

000003a4 <__udivmodhi4_loop>:
 3a4:	aa 1f       	adc	r26, r26
 3a6:	bb 1f       	adc	r27, r27
 3a8:	a6 17       	cp	r26, r22
 3aa:	b7 07       	cpc	r27, r23
 3ac:	10 f0       	brcs	.+4      	; 0x3b2 <__udivmodhi4_ep>
 3ae:	a6 1b       	sub	r26, r22
 3b0:	b7 0b       	sbc	r27, r23

000003b2 <__udivmodhi4_ep>:
 3b2:	88 1f       	adc	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	5a 95       	dec	r21
 3b8:	a9 f7       	brne	.-22     	; 0x3a4 <__udivmodhi4_loop>
 3ba:	80 95       	com	r24
 3bc:	90 95       	com	r25
 3be:	bc 01       	movw	r22, r24
 3c0:	cd 01       	movw	r24, r26
 3c2:	08 95       	ret

000003c4 <__fixsfsi>:
 3c4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__fixunssfsi>
 3c8:	68 94       	set
 3ca:	b1 11       	cpse	r27, r1
 3cc:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__fp_szero>
 3d0:	08 95       	ret

000003d2 <__fixunssfsi>:
 3d2:	0e 94 93 02 	call	0x526	; 0x526 <__fp_splitA>
 3d6:	88 f0       	brcs	.+34     	; 0x3fa <__fixunssfsi+0x28>
 3d8:	9f 57       	subi	r25, 0x7F	; 127
 3da:	98 f0       	brcs	.+38     	; 0x402 <__fixunssfsi+0x30>
 3dc:	b9 2f       	mov	r27, r25
 3de:	99 27       	eor	r25, r25
 3e0:	b7 51       	subi	r27, 0x17	; 23
 3e2:	b0 f0       	brcs	.+44     	; 0x410 <__fixunssfsi+0x3e>
 3e4:	e1 f0       	breq	.+56     	; 0x41e <__fixunssfsi+0x4c>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	88 1f       	adc	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	1a f0       	brmi	.+6      	; 0x3f6 <__fixunssfsi+0x24>
 3f0:	ba 95       	dec	r27
 3f2:	c9 f7       	brne	.-14     	; 0x3e6 <__fixunssfsi+0x14>
 3f4:	14 c0       	rjmp	.+40     	; 0x41e <__fixunssfsi+0x4c>
 3f6:	b1 30       	cpi	r27, 0x01	; 1
 3f8:	91 f0       	breq	.+36     	; 0x41e <__fixunssfsi+0x4c>
 3fa:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_zero>
 3fe:	b1 e0       	ldi	r27, 0x01	; 1
 400:	08 95       	ret
 402:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_zero>
 406:	67 2f       	mov	r22, r23
 408:	78 2f       	mov	r23, r24
 40a:	88 27       	eor	r24, r24
 40c:	b8 5f       	subi	r27, 0xF8	; 248
 40e:	39 f0       	breq	.+14     	; 0x41e <__fixunssfsi+0x4c>
 410:	b9 3f       	cpi	r27, 0xF9	; 249
 412:	cc f3       	brlt	.-14     	; 0x406 <__fixunssfsi+0x34>
 414:	86 95       	lsr	r24
 416:	77 95       	ror	r23
 418:	67 95       	ror	r22
 41a:	b3 95       	inc	r27
 41c:	d9 f7       	brne	.-10     	; 0x414 <__fixunssfsi+0x42>
 41e:	3e f4       	brtc	.+14     	; 0x42e <__fixunssfsi+0x5c>
 420:	90 95       	com	r25
 422:	80 95       	com	r24
 424:	70 95       	com	r23
 426:	61 95       	neg	r22
 428:	7f 4f       	sbci	r23, 0xFF	; 255
 42a:	8f 4f       	sbci	r24, 0xFF	; 255
 42c:	9f 4f       	sbci	r25, 0xFF	; 255
 42e:	08 95       	ret
 430:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fp_pscA>
 434:	20 f0       	brcs	.+8      	; 0x43e <__fixunssfsi+0x6c>
 436:	19 f0       	breq	.+6      	; 0x43e <__fixunssfsi+0x6c>
 438:	0e 94 84 02 	call	0x508	; 0x508 <__fp_pscB>
 43c:	50 f4       	brcc	.+20     	; 0x452 <fmod+0xc>
 43e:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__fp_nan>
 442:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__fp_szero>

00000446 <fmod>:
 446:	e9 2f       	mov	r30, r25
 448:	0e 94 8b 02 	call	0x516	; 0x516 <__fp_split3>
 44c:	88 f3       	brcs	.-30     	; 0x430 <__fixunssfsi+0x5e>
 44e:	55 23       	and	r21, r21
 450:	b1 f3       	breq	.-20     	; 0x43e <__fixunssfsi+0x6c>
 452:	e7 fb       	bst	r30, 7
 454:	62 17       	cp	r22, r18
 456:	73 07       	cpc	r23, r19
 458:	84 07       	cpc	r24, r20
 45a:	95 07       	cpc	r25, r21
 45c:	a8 f1       	brcs	.+106    	; 0x4c8 <fmod+0x82>
 45e:	89 f3       	breq	.-30     	; 0x442 <__fixunssfsi+0x70>
 460:	e9 2f       	mov	r30, r25
 462:	ff 27       	eor	r31, r31
 464:	88 23       	and	r24, r24
 466:	2a f0       	brmi	.+10     	; 0x472 <fmod+0x2c>
 468:	31 97       	sbiw	r30, 0x01	; 1
 46a:	66 0f       	add	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	88 1f       	adc	r24, r24
 470:	da f7       	brpl	.-10     	; 0x468 <fmod+0x22>
 472:	95 2f       	mov	r25, r21
 474:	55 27       	eor	r21, r21
 476:	44 23       	and	r20, r20
 478:	32 f0       	brmi	.+12     	; 0x486 <fmod+0x40>
 47a:	91 50       	subi	r25, 0x01	; 1
 47c:	50 40       	sbci	r21, 0x00	; 0
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	44 1f       	adc	r20, r20
 484:	d2 f7       	brpl	.-12     	; 0x47a <fmod+0x34>
 486:	bb 27       	eor	r27, r27
 488:	e9 1b       	sub	r30, r25
 48a:	f5 0b       	sbc	r31, r21
 48c:	62 1b       	sub	r22, r18
 48e:	73 0b       	sbc	r23, r19
 490:	84 0b       	sbc	r24, r20
 492:	b1 09       	sbc	r27, r1
 494:	b1 f2       	breq	.-84     	; 0x442 <__fixunssfsi+0x70>
 496:	22 f4       	brpl	.+8      	; 0x4a0 <fmod+0x5a>
 498:	62 0f       	add	r22, r18
 49a:	73 1f       	adc	r23, r19
 49c:	84 1f       	adc	r24, r20
 49e:	b1 1d       	adc	r27, r1
 4a0:	31 97       	sbiw	r30, 0x01	; 1
 4a2:	2a f0       	brmi	.+10     	; 0x4ae <fmod+0x68>
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	bb 1f       	adc	r27, r27
 4ac:	ef cf       	rjmp	.-34     	; 0x48c <fmod+0x46>
 4ae:	91 50       	subi	r25, 0x01	; 1
 4b0:	50 40       	sbci	r21, 0x00	; 0
 4b2:	62 f0       	brmi	.+24     	; 0x4cc <fmod+0x86>
 4b4:	41 f0       	breq	.+16     	; 0x4c6 <fmod+0x80>
 4b6:	88 23       	and	r24, r24
 4b8:	32 f0       	brmi	.+12     	; 0x4c6 <fmod+0x80>
 4ba:	66 0f       	add	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	88 1f       	adc	r24, r24
 4c0:	91 50       	subi	r25, 0x01	; 1
 4c2:	50 40       	sbci	r21, 0x00	; 0
 4c4:	c1 f7       	brne	.-16     	; 0x4b6 <fmod+0x70>
 4c6:	93 95       	inc	r25
 4c8:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_mpack>
 4cc:	86 95       	lsr	r24
 4ce:	77 95       	ror	r23
 4d0:	67 95       	ror	r22
 4d2:	9f 5f       	subi	r25, 0xFF	; 255
 4d4:	d9 f7       	brne	.-10     	; 0x4cc <fmod+0x86>
 4d6:	f7 cf       	rjmp	.-18     	; 0x4c6 <fmod+0x80>

000004d8 <__fp_mpack>:
 4d8:	9f 3f       	cpi	r25, 0xFF	; 255
 4da:	31 f0       	breq	.+12     	; 0x4e8 <__fp_mpack_finite+0xc>

000004dc <__fp_mpack_finite>:
 4dc:	91 50       	subi	r25, 0x01	; 1
 4de:	20 f4       	brcc	.+8      	; 0x4e8 <__fp_mpack_finite+0xc>
 4e0:	87 95       	ror	r24
 4e2:	77 95       	ror	r23
 4e4:	67 95       	ror	r22
 4e6:	b7 95       	ror	r27
 4e8:	88 0f       	add	r24, r24
 4ea:	91 1d       	adc	r25, r1
 4ec:	96 95       	lsr	r25
 4ee:	87 95       	ror	r24
 4f0:	97 f9       	bld	r25, 7
 4f2:	08 95       	ret

000004f4 <__fp_nan>:
 4f4:	9f ef       	ldi	r25, 0xFF	; 255
 4f6:	80 ec       	ldi	r24, 0xC0	; 192
 4f8:	08 95       	ret

000004fa <__fp_pscA>:
 4fa:	00 24       	eor	r0, r0
 4fc:	0a 94       	dec	r0
 4fe:	16 16       	cp	r1, r22
 500:	17 06       	cpc	r1, r23
 502:	18 06       	cpc	r1, r24
 504:	09 06       	cpc	r0, r25
 506:	08 95       	ret

00000508 <__fp_pscB>:
 508:	00 24       	eor	r0, r0
 50a:	0a 94       	dec	r0
 50c:	12 16       	cp	r1, r18
 50e:	13 06       	cpc	r1, r19
 510:	14 06       	cpc	r1, r20
 512:	05 06       	cpc	r0, r21
 514:	08 95       	ret

00000516 <__fp_split3>:
 516:	57 fd       	sbrc	r21, 7
 518:	90 58       	subi	r25, 0x80	; 128
 51a:	44 0f       	add	r20, r20
 51c:	55 1f       	adc	r21, r21
 51e:	59 f0       	breq	.+22     	; 0x536 <__fp_splitA+0x10>
 520:	5f 3f       	cpi	r21, 0xFF	; 255
 522:	71 f0       	breq	.+28     	; 0x540 <__fp_splitA+0x1a>
 524:	47 95       	ror	r20

00000526 <__fp_splitA>:
 526:	88 0f       	add	r24, r24
 528:	97 fb       	bst	r25, 7
 52a:	99 1f       	adc	r25, r25
 52c:	61 f0       	breq	.+24     	; 0x546 <__fp_splitA+0x20>
 52e:	9f 3f       	cpi	r25, 0xFF	; 255
 530:	79 f0       	breq	.+30     	; 0x550 <__fp_splitA+0x2a>
 532:	87 95       	ror	r24
 534:	08 95       	ret
 536:	12 16       	cp	r1, r18
 538:	13 06       	cpc	r1, r19
 53a:	14 06       	cpc	r1, r20
 53c:	55 1f       	adc	r21, r21
 53e:	f2 cf       	rjmp	.-28     	; 0x524 <__fp_split3+0xe>
 540:	46 95       	lsr	r20
 542:	f1 df       	rcall	.-30     	; 0x526 <__fp_splitA>
 544:	08 c0       	rjmp	.+16     	; 0x556 <__fp_splitA+0x30>
 546:	16 16       	cp	r1, r22
 548:	17 06       	cpc	r1, r23
 54a:	18 06       	cpc	r1, r24
 54c:	99 1f       	adc	r25, r25
 54e:	f1 cf       	rjmp	.-30     	; 0x532 <__fp_splitA+0xc>
 550:	86 95       	lsr	r24
 552:	71 05       	cpc	r23, r1
 554:	61 05       	cpc	r22, r1
 556:	08 94       	sec
 558:	08 95       	ret

0000055a <__fp_zero>:
 55a:	e8 94       	clt

0000055c <__fp_szero>:
 55c:	bb 27       	eor	r27, r27
 55e:	66 27       	eor	r22, r22
 560:	77 27       	eor	r23, r23
 562:	cb 01       	movw	r24, r22
 564:	97 f9       	bld	r25, 7
 566:	08 95       	ret

00000568 <__mulsf3>:
 568:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3x>
 56c:	0c 94 27 03 	jmp	0x64e	; 0x64e <__fp_round>
 570:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__fp_pscA>
 574:	38 f0       	brcs	.+14     	; 0x584 <__mulsf3+0x1c>
 576:	0e 94 84 02 	call	0x508	; 0x508 <__fp_pscB>
 57a:	20 f0       	brcs	.+8      	; 0x584 <__mulsf3+0x1c>
 57c:	95 23       	and	r25, r21
 57e:	11 f0       	breq	.+4      	; 0x584 <__mulsf3+0x1c>
 580:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_inf>
 584:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__fp_nan>
 588:	11 24       	eor	r1, r1
 58a:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__fp_szero>

0000058e <__mulsf3x>:
 58e:	0e 94 8b 02 	call	0x516	; 0x516 <__fp_split3>
 592:	70 f3       	brcs	.-36     	; 0x570 <__mulsf3+0x8>

00000594 <__mulsf3_pse>:
 594:	95 9f       	mul	r25, r21
 596:	c1 f3       	breq	.-16     	; 0x588 <__mulsf3+0x20>
 598:	95 0f       	add	r25, r21
 59a:	50 e0       	ldi	r21, 0x00	; 0
 59c:	55 1f       	adc	r21, r21
 59e:	62 9f       	mul	r22, r18
 5a0:	f0 01       	movw	r30, r0
 5a2:	72 9f       	mul	r23, r18
 5a4:	bb 27       	eor	r27, r27
 5a6:	f0 0d       	add	r31, r0
 5a8:	b1 1d       	adc	r27, r1
 5aa:	63 9f       	mul	r22, r19
 5ac:	aa 27       	eor	r26, r26
 5ae:	f0 0d       	add	r31, r0
 5b0:	b1 1d       	adc	r27, r1
 5b2:	aa 1f       	adc	r26, r26
 5b4:	64 9f       	mul	r22, r20
 5b6:	66 27       	eor	r22, r22
 5b8:	b0 0d       	add	r27, r0
 5ba:	a1 1d       	adc	r26, r1
 5bc:	66 1f       	adc	r22, r22
 5be:	82 9f       	mul	r24, r18
 5c0:	22 27       	eor	r18, r18
 5c2:	b0 0d       	add	r27, r0
 5c4:	a1 1d       	adc	r26, r1
 5c6:	62 1f       	adc	r22, r18
 5c8:	73 9f       	mul	r23, r19
 5ca:	b0 0d       	add	r27, r0
 5cc:	a1 1d       	adc	r26, r1
 5ce:	62 1f       	adc	r22, r18
 5d0:	83 9f       	mul	r24, r19
 5d2:	a0 0d       	add	r26, r0
 5d4:	61 1d       	adc	r22, r1
 5d6:	22 1f       	adc	r18, r18
 5d8:	74 9f       	mul	r23, r20
 5da:	33 27       	eor	r19, r19
 5dc:	a0 0d       	add	r26, r0
 5de:	61 1d       	adc	r22, r1
 5e0:	23 1f       	adc	r18, r19
 5e2:	84 9f       	mul	r24, r20
 5e4:	60 0d       	add	r22, r0
 5e6:	21 1d       	adc	r18, r1
 5e8:	82 2f       	mov	r24, r18
 5ea:	76 2f       	mov	r23, r22
 5ec:	6a 2f       	mov	r22, r26
 5ee:	11 24       	eor	r1, r1
 5f0:	9f 57       	subi	r25, 0x7F	; 127
 5f2:	50 40       	sbci	r21, 0x00	; 0
 5f4:	9a f0       	brmi	.+38     	; 0x61c <__mulsf3_pse+0x88>
 5f6:	f1 f0       	breq	.+60     	; 0x634 <__mulsf3_pse+0xa0>
 5f8:	88 23       	and	r24, r24
 5fa:	4a f0       	brmi	.+18     	; 0x60e <__mulsf3_pse+0x7a>
 5fc:	ee 0f       	add	r30, r30
 5fe:	ff 1f       	adc	r31, r31
 600:	bb 1f       	adc	r27, r27
 602:	66 1f       	adc	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	88 1f       	adc	r24, r24
 608:	91 50       	subi	r25, 0x01	; 1
 60a:	50 40       	sbci	r21, 0x00	; 0
 60c:	a9 f7       	brne	.-22     	; 0x5f8 <__mulsf3_pse+0x64>
 60e:	9e 3f       	cpi	r25, 0xFE	; 254
 610:	51 05       	cpc	r21, r1
 612:	80 f0       	brcs	.+32     	; 0x634 <__mulsf3_pse+0xa0>
 614:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_inf>
 618:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__fp_szero>
 61c:	5f 3f       	cpi	r21, 0xFF	; 255
 61e:	e4 f3       	brlt	.-8      	; 0x618 <__mulsf3_pse+0x84>
 620:	98 3e       	cpi	r25, 0xE8	; 232
 622:	d4 f3       	brlt	.-12     	; 0x618 <__mulsf3_pse+0x84>
 624:	86 95       	lsr	r24
 626:	77 95       	ror	r23
 628:	67 95       	ror	r22
 62a:	b7 95       	ror	r27
 62c:	f7 95       	ror	r31
 62e:	e7 95       	ror	r30
 630:	9f 5f       	subi	r25, 0xFF	; 255
 632:	c1 f7       	brne	.-16     	; 0x624 <__mulsf3_pse+0x90>
 634:	fe 2b       	or	r31, r30
 636:	88 0f       	add	r24, r24
 638:	91 1d       	adc	r25, r1
 63a:	96 95       	lsr	r25
 63c:	87 95       	ror	r24
 63e:	97 f9       	bld	r25, 7
 640:	08 95       	ret

00000642 <__fp_inf>:
 642:	97 f9       	bld	r25, 7
 644:	9f 67       	ori	r25, 0x7F	; 127
 646:	80 e8       	ldi	r24, 0x80	; 128
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	08 95       	ret

0000064e <__fp_round>:
 64e:	09 2e       	mov	r0, r25
 650:	03 94       	inc	r0
 652:	00 0c       	add	r0, r0
 654:	11 f4       	brne	.+4      	; 0x65a <__fp_round+0xc>
 656:	88 23       	and	r24, r24
 658:	52 f0       	brmi	.+20     	; 0x66e <__fp_round+0x20>
 65a:	bb 0f       	add	r27, r27
 65c:	40 f4       	brcc	.+16     	; 0x66e <__fp_round+0x20>
 65e:	bf 2b       	or	r27, r31
 660:	11 f4       	brne	.+4      	; 0x666 <__fp_round+0x18>
 662:	60 ff       	sbrs	r22, 0
 664:	04 c0       	rjmp	.+8      	; 0x66e <__fp_round+0x20>
 666:	6f 5f       	subi	r22, 0xFF	; 255
 668:	7f 4f       	sbci	r23, 0xFF	; 255
 66a:	8f 4f       	sbci	r24, 0xFF	; 255
 66c:	9f 4f       	sbci	r25, 0xFF	; 255
 66e:	08 95       	ret

00000670 <malloc>:
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	82 30       	cpi	r24, 0x02	; 2
 676:	91 05       	cpc	r25, r1
 678:	10 f4       	brcc	.+4      	; 0x67e <malloc+0xe>
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	e0 91 8a 00 	lds	r30, 0x008A
 682:	f0 91 8b 00 	lds	r31, 0x008B
 686:	20 e0       	ldi	r18, 0x00	; 0
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	c0 e0       	ldi	r28, 0x00	; 0
 68c:	d0 e0       	ldi	r29, 0x00	; 0
 68e:	30 97       	sbiw	r30, 0x00	; 0
 690:	11 f1       	breq	.+68     	; 0x6d6 <malloc+0x66>
 692:	40 81       	ld	r20, Z
 694:	51 81       	ldd	r21, Z+1	; 0x01
 696:	48 17       	cp	r20, r24
 698:	59 07       	cpc	r21, r25
 69a:	c0 f0       	brcs	.+48     	; 0x6cc <malloc+0x5c>
 69c:	48 17       	cp	r20, r24
 69e:	59 07       	cpc	r21, r25
 6a0:	61 f4       	brne	.+24     	; 0x6ba <malloc+0x4a>
 6a2:	82 81       	ldd	r24, Z+2	; 0x02
 6a4:	93 81       	ldd	r25, Z+3	; 0x03
 6a6:	20 97       	sbiw	r28, 0x00	; 0
 6a8:	19 f0       	breq	.+6      	; 0x6b0 <malloc+0x40>
 6aa:	9b 83       	std	Y+3, r25	; 0x03
 6ac:	8a 83       	std	Y+2, r24	; 0x02
 6ae:	2b c0       	rjmp	.+86     	; 0x706 <malloc+0x96>
 6b0:	90 93 8b 00 	sts	0x008B, r25
 6b4:	80 93 8a 00 	sts	0x008A, r24
 6b8:	26 c0       	rjmp	.+76     	; 0x706 <malloc+0x96>
 6ba:	21 15       	cp	r18, r1
 6bc:	31 05       	cpc	r19, r1
 6be:	19 f0       	breq	.+6      	; 0x6c6 <malloc+0x56>
 6c0:	42 17       	cp	r20, r18
 6c2:	53 07       	cpc	r21, r19
 6c4:	18 f4       	brcc	.+6      	; 0x6cc <malloc+0x5c>
 6c6:	9a 01       	movw	r18, r20
 6c8:	be 01       	movw	r22, r28
 6ca:	df 01       	movw	r26, r30
 6cc:	ef 01       	movw	r28, r30
 6ce:	02 80       	ldd	r0, Z+2	; 0x02
 6d0:	f3 81       	ldd	r31, Z+3	; 0x03
 6d2:	e0 2d       	mov	r30, r0
 6d4:	dc cf       	rjmp	.-72     	; 0x68e <malloc+0x1e>
 6d6:	21 15       	cp	r18, r1
 6d8:	31 05       	cpc	r19, r1
 6da:	09 f1       	breq	.+66     	; 0x71e <malloc+0xae>
 6dc:	28 1b       	sub	r18, r24
 6de:	39 0b       	sbc	r19, r25
 6e0:	24 30       	cpi	r18, 0x04	; 4
 6e2:	31 05       	cpc	r19, r1
 6e4:	90 f4       	brcc	.+36     	; 0x70a <malloc+0x9a>
 6e6:	12 96       	adiw	r26, 0x02	; 2
 6e8:	8d 91       	ld	r24, X+
 6ea:	9c 91       	ld	r25, X
 6ec:	13 97       	sbiw	r26, 0x03	; 3
 6ee:	61 15       	cp	r22, r1
 6f0:	71 05       	cpc	r23, r1
 6f2:	21 f0       	breq	.+8      	; 0x6fc <malloc+0x8c>
 6f4:	fb 01       	movw	r30, r22
 6f6:	93 83       	std	Z+3, r25	; 0x03
 6f8:	82 83       	std	Z+2, r24	; 0x02
 6fa:	04 c0       	rjmp	.+8      	; 0x704 <malloc+0x94>
 6fc:	90 93 8b 00 	sts	0x008B, r25
 700:	80 93 8a 00 	sts	0x008A, r24
 704:	fd 01       	movw	r30, r26
 706:	32 96       	adiw	r30, 0x02	; 2
 708:	44 c0       	rjmp	.+136    	; 0x792 <malloc+0x122>
 70a:	fd 01       	movw	r30, r26
 70c:	e2 0f       	add	r30, r18
 70e:	f3 1f       	adc	r31, r19
 710:	81 93       	st	Z+, r24
 712:	91 93       	st	Z+, r25
 714:	22 50       	subi	r18, 0x02	; 2
 716:	31 09       	sbc	r19, r1
 718:	2d 93       	st	X+, r18
 71a:	3c 93       	st	X, r19
 71c:	3a c0       	rjmp	.+116    	; 0x792 <malloc+0x122>
 71e:	20 91 88 00 	lds	r18, 0x0088
 722:	30 91 89 00 	lds	r19, 0x0089
 726:	23 2b       	or	r18, r19
 728:	41 f4       	brne	.+16     	; 0x73a <malloc+0xca>
 72a:	20 91 84 00 	lds	r18, 0x0084
 72e:	30 91 85 00 	lds	r19, 0x0085
 732:	30 93 89 00 	sts	0x0089, r19
 736:	20 93 88 00 	sts	0x0088, r18
 73a:	20 91 82 00 	lds	r18, 0x0082
 73e:	30 91 83 00 	lds	r19, 0x0083
 742:	21 15       	cp	r18, r1
 744:	31 05       	cpc	r19, r1
 746:	41 f4       	brne	.+16     	; 0x758 <malloc+0xe8>
 748:	2d b7       	in	r18, 0x3d	; 61
 74a:	3e b7       	in	r19, 0x3e	; 62
 74c:	40 91 86 00 	lds	r20, 0x0086
 750:	50 91 87 00 	lds	r21, 0x0087
 754:	24 1b       	sub	r18, r20
 756:	35 0b       	sbc	r19, r21
 758:	e0 91 88 00 	lds	r30, 0x0088
 75c:	f0 91 89 00 	lds	r31, 0x0089
 760:	e2 17       	cp	r30, r18
 762:	f3 07       	cpc	r31, r19
 764:	a0 f4       	brcc	.+40     	; 0x78e <malloc+0x11e>
 766:	2e 1b       	sub	r18, r30
 768:	3f 0b       	sbc	r19, r31
 76a:	28 17       	cp	r18, r24
 76c:	39 07       	cpc	r19, r25
 76e:	78 f0       	brcs	.+30     	; 0x78e <malloc+0x11e>
 770:	ac 01       	movw	r20, r24
 772:	4e 5f       	subi	r20, 0xFE	; 254
 774:	5f 4f       	sbci	r21, 0xFF	; 255
 776:	24 17       	cp	r18, r20
 778:	35 07       	cpc	r19, r21
 77a:	48 f0       	brcs	.+18     	; 0x78e <malloc+0x11e>
 77c:	4e 0f       	add	r20, r30
 77e:	5f 1f       	adc	r21, r31
 780:	50 93 89 00 	sts	0x0089, r21
 784:	40 93 88 00 	sts	0x0088, r20
 788:	81 93       	st	Z+, r24
 78a:	91 93       	st	Z+, r25
 78c:	02 c0       	rjmp	.+4      	; 0x792 <malloc+0x122>
 78e:	e0 e0       	ldi	r30, 0x00	; 0
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	cf 01       	movw	r24, r30
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	08 95       	ret

0000079a <free>:
 79a:	0f 93       	push	r16
 79c:	1f 93       	push	r17
 79e:	cf 93       	push	r28
 7a0:	df 93       	push	r29
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	09 f4       	brne	.+2      	; 0x7a8 <free+0xe>
 7a6:	8c c0       	rjmp	.+280    	; 0x8c0 <__stack+0x61>
 7a8:	fc 01       	movw	r30, r24
 7aa:	32 97       	sbiw	r30, 0x02	; 2
 7ac:	13 82       	std	Z+3, r1	; 0x03
 7ae:	12 82       	std	Z+2, r1	; 0x02
 7b0:	00 91 8a 00 	lds	r16, 0x008A
 7b4:	10 91 8b 00 	lds	r17, 0x008B
 7b8:	01 15       	cp	r16, r1
 7ba:	11 05       	cpc	r17, r1
 7bc:	81 f4       	brne	.+32     	; 0x7de <free+0x44>
 7be:	20 81       	ld	r18, Z
 7c0:	31 81       	ldd	r19, Z+1	; 0x01
 7c2:	82 0f       	add	r24, r18
 7c4:	93 1f       	adc	r25, r19
 7c6:	20 91 88 00 	lds	r18, 0x0088
 7ca:	30 91 89 00 	lds	r19, 0x0089
 7ce:	28 17       	cp	r18, r24
 7d0:	39 07       	cpc	r19, r25
 7d2:	79 f5       	brne	.+94     	; 0x832 <free+0x98>
 7d4:	f0 93 89 00 	sts	0x0089, r31
 7d8:	e0 93 88 00 	sts	0x0088, r30
 7dc:	71 c0       	rjmp	.+226    	; 0x8c0 <__stack+0x61>
 7de:	d8 01       	movw	r26, r16
 7e0:	40 e0       	ldi	r20, 0x00	; 0
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	ae 17       	cp	r26, r30
 7e6:	bf 07       	cpc	r27, r31
 7e8:	50 f4       	brcc	.+20     	; 0x7fe <free+0x64>
 7ea:	12 96       	adiw	r26, 0x02	; 2
 7ec:	2d 91       	ld	r18, X+
 7ee:	3c 91       	ld	r19, X
 7f0:	13 97       	sbiw	r26, 0x03	; 3
 7f2:	ad 01       	movw	r20, r26
 7f4:	21 15       	cp	r18, r1
 7f6:	31 05       	cpc	r19, r1
 7f8:	09 f1       	breq	.+66     	; 0x83c <free+0xa2>
 7fa:	d9 01       	movw	r26, r18
 7fc:	f3 cf       	rjmp	.-26     	; 0x7e4 <free+0x4a>
 7fe:	9d 01       	movw	r18, r26
 800:	da 01       	movw	r26, r20
 802:	33 83       	std	Z+3, r19	; 0x03
 804:	22 83       	std	Z+2, r18	; 0x02
 806:	60 81       	ld	r22, Z
 808:	71 81       	ldd	r23, Z+1	; 0x01
 80a:	86 0f       	add	r24, r22
 80c:	97 1f       	adc	r25, r23
 80e:	82 17       	cp	r24, r18
 810:	93 07       	cpc	r25, r19
 812:	69 f4       	brne	.+26     	; 0x82e <free+0x94>
 814:	ec 01       	movw	r28, r24
 816:	28 81       	ld	r18, Y
 818:	39 81       	ldd	r19, Y+1	; 0x01
 81a:	26 0f       	add	r18, r22
 81c:	37 1f       	adc	r19, r23
 81e:	2e 5f       	subi	r18, 0xFE	; 254
 820:	3f 4f       	sbci	r19, 0xFF	; 255
 822:	31 83       	std	Z+1, r19	; 0x01
 824:	20 83       	st	Z, r18
 826:	8a 81       	ldd	r24, Y+2	; 0x02
 828:	9b 81       	ldd	r25, Y+3	; 0x03
 82a:	93 83       	std	Z+3, r25	; 0x03
 82c:	82 83       	std	Z+2, r24	; 0x02
 82e:	45 2b       	or	r20, r21
 830:	29 f4       	brne	.+10     	; 0x83c <free+0xa2>
 832:	f0 93 8b 00 	sts	0x008B, r31
 836:	e0 93 8a 00 	sts	0x008A, r30
 83a:	42 c0       	rjmp	.+132    	; 0x8c0 <__stack+0x61>
 83c:	13 96       	adiw	r26, 0x03	; 3
 83e:	fc 93       	st	X, r31
 840:	ee 93       	st	-X, r30
 842:	12 97       	sbiw	r26, 0x02	; 2
 844:	ed 01       	movw	r28, r26
 846:	49 91       	ld	r20, Y+
 848:	59 91       	ld	r21, Y+
 84a:	9e 01       	movw	r18, r28
 84c:	24 0f       	add	r18, r20
 84e:	35 1f       	adc	r19, r21
 850:	e2 17       	cp	r30, r18
 852:	f3 07       	cpc	r31, r19
 854:	71 f4       	brne	.+28     	; 0x872 <__stack+0x13>
 856:	80 81       	ld	r24, Z
 858:	91 81       	ldd	r25, Z+1	; 0x01
 85a:	84 0f       	add	r24, r20
 85c:	95 1f       	adc	r25, r21
 85e:	02 96       	adiw	r24, 0x02	; 2
 860:	11 96       	adiw	r26, 0x01	; 1
 862:	9c 93       	st	X, r25
 864:	8e 93       	st	-X, r24
 866:	82 81       	ldd	r24, Z+2	; 0x02
 868:	93 81       	ldd	r25, Z+3	; 0x03
 86a:	13 96       	adiw	r26, 0x03	; 3
 86c:	9c 93       	st	X, r25
 86e:	8e 93       	st	-X, r24
 870:	12 97       	sbiw	r26, 0x02	; 2
 872:	e0 e0       	ldi	r30, 0x00	; 0
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	d8 01       	movw	r26, r16
 878:	12 96       	adiw	r26, 0x02	; 2
 87a:	8d 91       	ld	r24, X+
 87c:	9c 91       	ld	r25, X
 87e:	13 97       	sbiw	r26, 0x03	; 3
 880:	00 97       	sbiw	r24, 0x00	; 0
 882:	19 f0       	breq	.+6      	; 0x88a <__stack+0x2b>
 884:	f8 01       	movw	r30, r16
 886:	8c 01       	movw	r16, r24
 888:	f6 cf       	rjmp	.-20     	; 0x876 <__stack+0x17>
 88a:	8d 91       	ld	r24, X+
 88c:	9c 91       	ld	r25, X
 88e:	98 01       	movw	r18, r16
 890:	2e 5f       	subi	r18, 0xFE	; 254
 892:	3f 4f       	sbci	r19, 0xFF	; 255
 894:	82 0f       	add	r24, r18
 896:	93 1f       	adc	r25, r19
 898:	20 91 88 00 	lds	r18, 0x0088
 89c:	30 91 89 00 	lds	r19, 0x0089
 8a0:	28 17       	cp	r18, r24
 8a2:	39 07       	cpc	r19, r25
 8a4:	69 f4       	brne	.+26     	; 0x8c0 <__stack+0x61>
 8a6:	30 97       	sbiw	r30, 0x00	; 0
 8a8:	29 f4       	brne	.+10     	; 0x8b4 <__stack+0x55>
 8aa:	10 92 8b 00 	sts	0x008B, r1
 8ae:	10 92 8a 00 	sts	0x008A, r1
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__stack+0x59>
 8b4:	13 82       	std	Z+3, r1	; 0x03
 8b6:	12 82       	std	Z+2, r1	; 0x02
 8b8:	10 93 89 00 	sts	0x0089, r17
 8bc:	00 93 88 00 	sts	0x0088, r16
 8c0:	df 91       	pop	r29
 8c2:	cf 91       	pop	r28
 8c4:	1f 91       	pop	r17
 8c6:	0f 91       	pop	r16
 8c8:	08 95       	ret

000008ca <_exit>:
 8ca:	f8 94       	cli

000008cc <__stop_program>:
 8cc:	ff cf       	rjmp	.-2      	; 0x8cc <__stop_program>
