
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001fc  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800060  00800060  00000290  2**0
                  ALLOC
  3 .stab         00000fe4  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f47  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000021bb  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021cc  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 37       	cpi	r26, 0x79	; 121
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  74:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <task0_led_toggle>:
#include"STD_TYPES.h"
#include<avr/io.h>
#include"scheduler_init.h"

void task0_led_toggle(void){
PORTC^=(1<<0);
  7c:	95 b3       	in	r25, 0x15	; 21
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	89 27       	eor	r24, r25
  82:	85 bb       	out	0x15, r24	; 21
  84:	08 95       	ret

00000086 <task1_led_toggle>:

}


void task1_led_toggle(void){
PORTC^=(1<<1);
  86:	95 b3       	in	r25, 0x15	; 21
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	89 27       	eor	r24, r25
  8c:	85 bb       	out	0x15, r24	; 21
  8e:	08 95       	ret

00000090 <task2_led_toggle>:

	
}

void task2_led_toggle(void){
PORTC^=(1<<2);
  90:	95 b3       	in	r25, 0x15	; 21
  92:	84 e0       	ldi	r24, 0x04	; 4
  94:	89 27       	eor	r24, r25
  96:	85 bb       	out	0x15, r24	; 21
  98:	08 95       	ret

0000009a <init_Timer0_OVF>:


void init_Timer0_OVF(void)
{

TCCR0=(1<<CS01);
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	83 bf       	out	0x33, r24	; 51
TIMSK=(1<<TOIE0);
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	89 bf       	out	0x39, r24	; 57
  a2:	08 95       	ret

000000a4 <set_ISR_callback>:
}


void set_ISR_callback(void (*ptr_fun)(void)){

ptr_ISR=ptr_fun;
  a4:	90 93 64 00 	sts	0x0064, r25
  a8:	80 93 63 00 	sts	0x0063, r24
  ac:	08 95       	ret

000000ae <no_of_counts>:

}

void no_of_counts(void){
double time_of_OVF=(double)4/15625.0;
 OVF_counts=(u16)(((double)scheduler_tick_time_ms/1000.0)/time_of_OVF);
  ae:	86 e8       	ldi	r24, 0x86	; 134
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	90 93 66 00 	sts	0x0066, r25
  b6:	80 93 65 00 	sts	0x0065, r24
  ba:	08 95       	ret

000000bc <__vector_11>:
}


ISR(TIMER0_OVF_vect){
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	4f 93       	push	r20
  cc:	5f 93       	push	r21
  ce:	6f 93       	push	r22
  d0:	7f 93       	push	r23
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
 count++;
  de:	80 91 60 00 	lds	r24, 0x0060
  e2:	90 91 61 00 	lds	r25, 0x0061
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	90 93 61 00 	sts	0x0061, r25
  ec:	80 93 60 00 	sts	0x0060, r24
 if(count==OVF_counts)
  f0:	20 91 60 00 	lds	r18, 0x0060
  f4:	30 91 61 00 	lds	r19, 0x0061
  f8:	80 91 65 00 	lds	r24, 0x0065
  fc:	90 91 66 00 	lds	r25, 0x0066
 100:	28 17       	cp	r18, r24
 102:	39 07       	cpc	r19, r25
 104:	31 f4       	brne	.+12     	; 0x112 <__vector_11+0x56>
 {
scheduler();
 106:	0e 94 9a 00 	call	0x134	; 0x134 <scheduler>
count=0;
 10a:	10 92 61 00 	sts	0x0061, r1
 10e:	10 92 60 00 	sts	0x0060, r1
}

 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	bf 91       	pop	r27
 118:	af 91       	pop	r26
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	7f 91       	pop	r23
 120:	6f 91       	pop	r22
 122:	5f 91       	pop	r21
 124:	4f 91       	pop	r20
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <scheduler>:





void scheduler(void){
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29

cli();
 13c:	f8 94       	cli
 13e:	c7 e6       	ldi	r28, 0x67	; 103
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	0c e6       	ldi	r16, 0x6C	; 108
 144:	10 e0       	ldi	r17, 0x00	; 0
int i;
for(i=0;i<no_of_tasks;i++){
if(task_arr[i].task_state==Running){
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	9a 81       	ldd	r25, Y+2	; 0x02
 14a:	89 2b       	or	r24, r25
 14c:	81 f4       	brne	.+32     	; 0x16e <scheduler+0x3a>
if(task_arr[i].task_time>0)
 14e:	f8 01       	movw	r30, r16
 150:	80 81       	ld	r24, Z
 152:	88 23       	and	r24, r24
 154:	11 f0       	breq	.+4      	; 0x15a <scheduler+0x26>
{task_arr[i].task_time--;
 156:	81 50       	subi	r24, 0x01	; 1
 158:	80 83       	st	Z, r24
}
if(task_arr[i].task_time==0){
 15a:	f8 01       	movw	r30, r16
 15c:	80 81       	ld	r24, Z
 15e:	81 11       	cpse	r24, r1
 160:	06 c0       	rjmp	.+12     	; 0x16e <scheduler+0x3a>

	task_arr[i].ptr_func();
 162:	eb 81       	ldd	r30, Y+3	; 0x03
 164:	fc 81       	ldd	r31, Y+4	; 0x04
 166:	09 95       	icall
	task_arr[i].task_time=task_arr[i].periodicity;
 168:	88 81       	ld	r24, Y
 16a:	f8 01       	movw	r30, r16
 16c:	80 83       	st	Z, r24
 16e:	26 96       	adiw	r28, 0x06	; 6
 170:	0a 5f       	subi	r16, 0xFA	; 250
 172:	1f 4f       	sbci	r17, 0xFF	; 255

void scheduler(void){

cli();
int i;
for(i=0;i<no_of_tasks;i++){
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	c9 37       	cpi	r28, 0x79	; 121
 178:	df 07       	cpc	r29, r31
 17a:	29 f7       	brne	.-54     	; 0x146 <scheduler+0x12>

}


}
sei();
 17c:	78 94       	sei

}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	08 95       	ret

00000188 <scheduler_intialize>:

TCB task_arr[no_of_tasks];


void scheduler_intialize(void){
init_Timer0_OVF();
 188:	0e 94 4d 00 	call	0x9a	; 0x9a <init_Timer0_OVF>
no_of_counts();
 18c:	0e 94 57 00 	call	0xae	; 0xae <no_of_counts>
set_ISR_callback(&scheduler);
 190:	8a e9       	ldi	r24, 0x9A	; 154
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0c 94 52 00 	jmp	0xa4	; 0xa4 <set_ISR_callback>

00000198 <scheduler_start>:

}

void scheduler_start(void){

sei();
 198:	78 94       	sei
 19a:	08 95       	ret

0000019c <task_create>:
 19c:	20 91 62 00 	lds	r18, 0x0062
 1a0:	36 e0       	ldi	r19, 0x06	; 6
 1a2:	23 9f       	mul	r18, r19
 1a4:	f0 01       	movw	r30, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	e9 59       	subi	r30, 0x99	; 153
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	60 83       	st	Z, r22
 1ae:	52 83       	std	Z+2, r21	; 0x02
 1b0:	41 83       	std	Z+1, r20	; 0x01
 1b2:	94 83       	std	Z+4, r25	; 0x04
 1b4:	83 83       	std	Z+3, r24	; 0x03
 1b6:	65 83       	std	Z+5, r22	; 0x05
 1b8:	2f 5f       	subi	r18, 0xFF	; 255
 1ba:	20 93 62 00 	sts	0x0062, r18
 1be:	08 95       	ret

000001c0 <main>:
}



int main(void){
DDRC=0xff;
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	84 bb       	out	0x14, r24	; 20

scheduler_intialize();
 1c4:	0e 94 c4 00 	call	0x188	; 0x188 <scheduler_intialize>
task_create(task0_led_toggle,5,Running);
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	65 e0       	ldi	r22, 0x05	; 5
 1ce:	8e e3       	ldi	r24, 0x3E	; 62
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 ce 00 	call	0x19c	; 0x19c <task_create>
task_create(task1_led_toggle,15,Running);
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	6f e0       	ldi	r22, 0x0F	; 15
 1dc:	83 e4       	ldi	r24, 0x43	; 67
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 ce 00 	call	0x19c	; 0x19c <task_create>
task_create(task2_led_toggle,20,Running);
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	64 e1       	ldi	r22, 0x14	; 20
 1ea:	88 e4       	ldi	r24, 0x48	; 72
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 ce 00 	call	0x19c	; 0x19c <task_create>
scheduler_start();
 1f2:	0e 94 cc 00 	call	0x198	; 0x198 <scheduler_start>

while(1){



}
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <main+0x36>

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
