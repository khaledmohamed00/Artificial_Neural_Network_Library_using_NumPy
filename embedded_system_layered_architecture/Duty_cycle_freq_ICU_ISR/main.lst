
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000d8a  00000e1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080007e  0080007e  00000e3c  2**0
                  ALLOC
  3 .stab         00001d94  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011ae  00000000  00000000  00002bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003d7e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003d90  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 38       	cpi	r26, 0x89	; 137
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b9 02 	call	0x572	; 0x572 <main>
  8a:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_Timer0PWM_OC0>:
#include<util/delay.h>
#include<avr/io.h>
#include <avr/interrupt.h>

void init_Timer0PWM_OC0(u8 ocro_value){
     DDRB|=(1<<3);
  92:	bb 9a       	sbi	0x17, 3	; 23
     //TCCR0|=(1<<5)|(1<<6)|(1<<4)|(1<<3);
     //TCCR0|=(1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<COM00);
     TCCR0 |= (1<<WGM00)|(1<<WGM01)       // Start timer0 without
  94:	93 b7       	in	r25, 0x33	; 51
  96:	99 66       	ori	r25, 0x69	; 105
  98:	93 bf       	out	0x33, r25	; 51
             |(1<<COM01)|(1<<CS00);
     OCR0=ocro_value;
  9a:	8c bf       	out	0x3c, r24	; 60
  9c:	08 95       	ret

0000009e <calculate_Duty_Cycle_Freq>:
     //TCCR0|=(1<<CS00);
}

 void calculate_Duty_Cycle_Freq(u16 *duty_cycle ){
  9e:	8f 92       	push	r8
  a0:	9f 92       	push	r9
  a2:	af 92       	push	r10
  a4:	bf 92       	push	r11
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	ec 01       	movw	r28, r24
u16 a,b,c;
//,high,period;
        TCCR1A = 0;
  b4:	1f bc       	out	0x2f, r1	; 47
        TCNT1=0;
  b6:	1d bc       	out	0x2d, r1	; 45
  b8:	1c bc       	out	0x2c, r1	; 44
		TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag) flag */
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	88 bf       	out	0x38, r24	; 56

		//TCCR1B = 0x41;  	/* Rising edge, no prescaler */
		TCCR1B|=(1<<CS10)|(1<<ICES1);
  be:	8e b5       	in	r24, 0x2e	; 46
  c0:	81 64       	ori	r24, 0x41	; 65
  c2:	8e bd       	out	0x2e, r24	; 46
		while ((TIFR&(1<<ICF1)) == 0);
  c4:	08 b6       	in	r0, 0x38	; 56
  c6:	05 fe       	sbrs	r0, 5
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <calculate_Duty_Cycle_Freq+0x26>
		a = ICR1;  		/* Take value of capture register */
  ca:	e6 b4       	in	r14, 0x26	; 38
  cc:	f7 b4       	in	r15, 0x27	; 39
		TIFR |= (1<<ICF1);  	/* Clear ICF flag */
  ce:	98 b7       	in	r25, 0x38	; 56
  d0:	90 62       	ori	r25, 0x20	; 32
  d2:	98 bf       	out	0x38, r25	; 56
		
		//TCCR1B = 0x01;  	/* Falling edge, no prescaler */
		TCCR1B &=~(1<<ICES1);
  d4:	9e b5       	in	r25, 0x2e	; 46
  d6:	9f 7b       	andi	r25, 0xBF	; 191
  d8:	9e bd       	out	0x2e, r25	; 46
		while ((TIFR&(1<<ICF1)) == 0);
  da:	08 b6       	in	r0, 0x38	; 56
  dc:	05 fe       	sbrs	r0, 5
  de:	fd cf       	rjmp	.-6      	; 0xda <calculate_Duty_Cycle_Freq+0x3c>
		b = ICR1;  		/* Take value of capture register */
  e0:	66 b5       	in	r22, 0x26	; 38
  e2:	77 b5       	in	r23, 0x27	; 39
		TIFR |= (1<<ICF1);  	/* Clear ICF flag */
  e4:	98 b7       	in	r25, 0x38	; 56
  e6:	90 62       	ori	r25, 0x20	; 32
  e8:	98 bf       	out	0x38, r25	; 56
		
		//TCCR1B = 0x41;  	/* Rising edge, no prescaler */
		TCCR1B|=(1<<ICES1);
  ea:	9e b5       	in	r25, 0x2e	; 46
  ec:	90 64       	ori	r25, 0x40	; 64
  ee:	9e bd       	out	0x2e, r25	; 46
		while ((TIFR&(1<<ICF1)) == 0);
  f0:	08 b6       	in	r0, 0x38	; 56
  f2:	05 fe       	sbrs	r0, 5
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <calculate_Duty_Cycle_Freq+0x52>
		c = ICR1;  		/* Take value of capture register */
  f6:	06 b5       	in	r16, 0x26	; 38
  f8:	17 b5       	in	r17, 0x27	; 39
		TIFR |= (1<<ICF1);  	/* Clear ICF flag */
  fa:	98 b7       	in	r25, 0x38	; 56
  fc:	90 62       	ori	r25, 0x20	; 32
  fe:	98 bf       	out	0x38, r25	; 56

		TCCR1B = 0;  		/* Stop the timer */
 100:	1e bc       	out	0x2e, r1	; 46
		
		if(a<b && b<c)  	/* Check for valid condition, 
 102:	e6 16       	cp	r14, r22
 104:	f7 06       	cpc	r15, r23
 106:	18 f5       	brcc	.+70     	; 0x14e <calculate_Duty_Cycle_Freq+0xb0>
 108:	60 17       	cp	r22, r16
 10a:	71 07       	cpc	r23, r17
 10c:	00 f5       	brcc	.+64     	; 0x14e <calculate_Duty_Cycle_Freq+0xb0>
					to avoid timer overflow reading */
		{
			 u16 High=b-a;
 10e:	6e 19       	sub	r22, r14
 110:	7f 09       	sbc	r23, r15
			 u16 Period=c-a;
			
			u16 Duty_cycle=(((float)High/(float)Period)*100);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 39 04 	call	0x872	; 0x872 <__floatunsisf>
 11a:	4b 01       	movw	r8, r22
 11c:	5c 01       	movw	r10, r24
		
		if(a<b && b<c)  	/* Check for valid condition, 
					to avoid timer overflow reading */
		{
			 u16 High=b-a;
			 u16 Period=c-a;
 11e:	c8 01       	movw	r24, r16
 120:	8e 19       	sub	r24, r14
 122:	9f 09       	sbc	r25, r15
			
			u16 Duty_cycle=(((float)High/(float)Period)*100);
 124:	bc 01       	movw	r22, r24
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 39 04 	call	0x872	; 0x872 <__floatunsisf>
 12e:	9b 01       	movw	r18, r22
 130:	ac 01       	movw	r20, r24
 132:	c5 01       	movw	r24, r10
 134:	b4 01       	movw	r22, r8
 136:	0e 94 91 03 	call	0x722	; 0x722 <__divsf3>
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	48 ec       	ldi	r20, 0xC8	; 200
 140:	52 e4       	ldi	r21, 0x42	; 66
 142:	0e 94 29 05 	call	0xa52	; 0xa52 <__mulsf3>
 146:	0e 94 0a 04 	call	0x814	; 0x814 <__fixunssfsi>
 14a:	79 83       	std	Y+1, r23	; 0x01
 14c:	68 83       	st	Y, r22
		else
	 {
		}


}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	ff 90       	pop	r15
 158:	ef 90       	pop	r14
 15a:	bf 90       	pop	r11
 15c:	af 90       	pop	r10
 15e:	9f 90       	pop	r9
 160:	8f 90       	pop	r8
 162:	08 95       	ret

00000164 <__vector_6>:
	   // }
	
	}


ISR(TIMER1_CAPT_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
if(state==0){
 172:	80 91 7e 00 	lds	r24, 0x007E
 176:	81 11       	cpse	r24, r1
 178:	0e c0       	rjmp	.+28     	; 0x196 <__vector_6+0x32>
//TCNT1=0;
a=ICR1;
 17a:	86 b5       	in	r24, 0x26	; 38
 17c:	97 b5       	in	r25, 0x27	; 39
 17e:	90 93 84 00 	sts	0x0084, r25
 182:	80 93 83 00 	sts	0x0083, r24

state++;
 186:	80 91 7e 00 	lds	r24, 0x007E
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	80 93 7e 00 	sts	0x007E, r24
TCCR1B &=~(1<<ICES1);
 190:	8e b5       	in	r24, 0x2e	; 46
 192:	8f 7b       	andi	r24, 0xBF	; 191
 194:	11 c0       	rjmp	.+34     	; 0x1b8 <__vector_6+0x54>

}
else if(state==1){
 196:	80 91 7e 00 	lds	r24, 0x007E
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	79 f4       	brne	.+30     	; 0x1bc <__vector_6+0x58>
b=ICR1;
 19e:	86 b5       	in	r24, 0x26	; 38
 1a0:	97 b5       	in	r25, 0x27	; 39
 1a2:	90 93 80 00 	sts	0x0080, r25
 1a6:	80 93 7f 00 	sts	0x007F, r24

state++;
 1aa:	80 91 7e 00 	lds	r24, 0x007E
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	80 93 7e 00 	sts	0x007E, r24

TCCR1B |=(1<<ICES1);
 1b4:	8e b5       	in	r24, 0x2e	; 46
 1b6:	80 64       	ori	r24, 0x40	; 64
 1b8:	8e bd       	out	0x2e, r24	; 46
 1ba:	0f c0       	rjmp	.+30     	; 0x1da <__vector_6+0x76>
}
else if(state==2){
 1bc:	80 91 7e 00 	lds	r24, 0x007E
 1c0:	82 30       	cpi	r24, 0x02	; 2
 1c2:	59 f4       	brne	.+22     	; 0x1da <__vector_6+0x76>
c=ICR1;
 1c4:	86 b5       	in	r24, 0x26	; 38
 1c6:	97 b5       	in	r25, 0x27	; 39
 1c8:	90 93 82 00 	sts	0x0082, r25
 1cc:	80 93 81 00 	sts	0x0081, r24
state++;
 1d0:	80 91 7e 00 	lds	r24, 0x007E
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	80 93 7e 00 	sts	0x007E, r24
//TCCR1B &=~(1<<ICES1);

}


}
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <ADC_Init>:
#include "ADC_register.h"

void ADC_Init (void)
{
	// ADC Enable
	SET_BIT(ADCSRA_Reg,7);
 1e8:	37 9a       	sbi	0x06, 7	; 6

	// Prescaler Configuration as 128
	SET_BIT(ADCSRA_Reg,2);
 1ea:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA_Reg,1);
 1ec:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA_Reg,0);
 1ee:	30 9a       	sbi	0x06, 0	; 6


	// Referance Voltage as AVCC with external capacitor
	CLR_BIT(ADMUX_Reg,7);
 1f0:	3f 98       	cbi	0x07, 7	; 7
	SET_BIT(ADMUX_Reg,6);
 1f2:	3e 9a       	sbi	0x07, 6	; 7

	// ADC Data Rgith Adjustment
	CLR_BIT(ADMUX_Reg,5);
 1f4:	3d 98       	cbi	0x07, 5	; 7
 1f6:	08 95       	ret

000001f8 <ADCu16_Read>:

u16 ADCu16_Read (u8 channel)
{
	// ADC Channel Selection
	channel &= 0x07;
	ADMUX_Reg &= 0xE0;
 1f8:	97 b1       	in	r25, 0x07	; 7
 1fa:	90 7e       	andi	r25, 0xE0	; 224
 1fc:	97 b9       	out	0x07, r25	; 7
	ADMUX_Reg |= channel;
 1fe:	97 b1       	in	r25, 0x07	; 7
}

u16 ADCu16_Read (u8 channel)
{
	// ADC Channel Selection
	channel &= 0x07;
 200:	87 70       	andi	r24, 0x07	; 7
	ADMUX_Reg &= 0xE0;
	ADMUX_Reg |= channel;
 202:	98 2b       	or	r25, r24
 204:	97 b9       	out	0x07, r25	; 7

	// Start Single Convertion
	SET_BIT(ADCSRA_Reg,6);
 206:	36 9a       	sbi	0x06, 6	; 6

	//wait for the conversion
	while(!(ADCSRA_Reg & (1<<4)));
 208:	34 9b       	sbis	0x06, 4	; 6
 20a:	fe cf       	rjmp	.-4      	; 0x208 <ADCu16_Read+0x10>

	//ADC Flag Clear
	SET_BIT(ADCSRA_Reg,4);
 20c:	34 9a       	sbi	0x06, 4	; 6

	return ADC;
 20e:	84 b1       	in	r24, 0x04	; 4
 210:	95 b1       	in	r25, 0x05	; 5
}
 212:	08 95       	ret

00000214 <LCD_cmd>:

void LCD_cmd(u8 cmd)
{


DIO_u8SetPortValue(LCD_DATA,cmd);
 214:	68 2f       	mov	r22, r24
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_u8SetPortValue>
DIO_u8SetPortValue(LCD_ctrl,(0<<rs)|(0<<rw)|(1<<en));
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_u8SetPortValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	8f ec       	ldi	r24, 0xCF	; 207
 226:	97 e0       	ldi	r25, 0x07	; 7
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_cmd+0x14>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_cmd+0x1a>
 22e:	00 00       	nop
_delay_ms(1);
DIO_u8SetPortValue(LCD_ctrl,(0<<rs)|(0<<rw)|(0<<en));
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_u8SetPortValue>
 238:	9f e7       	ldi	r25, 0x7F	; 127
 23a:	28 e3       	ldi	r18, 0x38	; 56
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	91 50       	subi	r25, 0x01	; 1
 240:	20 40       	sbci	r18, 0x00	; 0
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <LCD_cmd+0x2a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <LCD_cmd+0x34>
 248:	00 00       	nop
 24a:	08 95       	ret

0000024c <init_LCD>:
#include "DIO_int.h"
#include "LCD_int.h"
#include "LCD_config.h"
void init_LCD(void)
{
DIO_u8SetPortDirection(LCD_DATA,0xff);
 24c:	6f ef       	ldi	r22, 0xFF	; 255
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	0e 94 99 02 	call	0x532	; 0x532 <DIO_u8SetPortDirection>
DIO_u8SetPortDirection(LCD_ctrl,0x07);
 254:	67 e0       	ldi	r22, 0x07	; 7
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 99 02 	call	0x532	; 0x532 <DIO_u8SetPortDirection>

LCD_cmd(0x38);                            // initialization of 16X2 LCD in 8bit mode
 25c:	88 e3       	ldi	r24, 0x38	; 56
 25e:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
 262:	8f ec       	ldi	r24, 0xCF	; 207
 264:	97 e0       	ldi	r25, 0x07	; 7
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <init_LCD+0x1a>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <init_LCD+0x20>
 26c:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x01);                                 // clear LCD
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
 274:	8f ec       	ldi	r24, 0xCF	; 207
 276:	97 e0       	ldi	r25, 0x07	; 7
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <init_LCD+0x2c>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <init_LCD+0x32>
 27e:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x0E);                        // cursor ON
 280:	8e e0       	ldi	r24, 0x0E	; 14
 282:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
 286:	8f ec       	ldi	r24, 0xCF	; 207
 288:	97 e0       	ldi	r25, 0x07	; 7
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <init_LCD+0x3e>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <init_LCD+0x44>
 290:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x80);                     // —8 go to first line and –0 is for 0th position
 292:	80 e8       	ldi	r24, 0x80	; 128
 294:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
 298:	8f ec       	ldi	r24, 0xCF	; 207
 29a:	97 e0       	ldi	r25, 0x07	; 7
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <init_LCD+0x50>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <init_LCD+0x56>
 2a2:	00 00       	nop
 2a4:	08 95       	ret

000002a6 <LCD_write>:
}

void LCD_write(u8 data)
{

DIO_u8SetPortValue(LCD_DATA,data);
 2a6:	68 2f       	mov	r22, r24
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_u8SetPortValue>
DIO_u8SetPortValue(LCD_ctrl,(1<<rs)|(0<<rw)|(1<<en));
 2ae:	65 e0       	ldi	r22, 0x05	; 5
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_u8SetPortValue>
 2b6:	8f ec       	ldi	r24, 0xCF	; 207
 2b8:	97 e0       	ldi	r25, 0x07	; 7
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <LCD_write+0x14>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <LCD_write+0x1a>
 2c0:	00 00       	nop
_delay_ms(1);

DIO_u8SetPortValue(LCD_ctrl, (1<<rs)|(0<<rw)|(0<<en));
 2c2:	64 e0       	ldi	r22, 0x04	; 4
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_u8SetPortValue>
 2ca:	9f e7       	ldi	r25, 0x7F	; 127
 2cc:	28 e3       	ldi	r18, 0x38	; 56
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	91 50       	subi	r25, 0x01	; 1
 2d2:	20 40       	sbci	r18, 0x00	; 0
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <LCD_write+0x2a>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_write+0x34>
 2da:	00 00       	nop
 2dc:	08 95       	ret

000002de <LCD_write_string>:
return ;

}

void LCD_write_string(u8 *str)             //store address value of the string in pointer *str
{
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ec 01       	movw	r28, r24
int i=0;
while(str[i]!='\0')                               // loop will go on till the NULL character in the string
 2e4:	89 91       	ld	r24, Y+
 2e6:	88 23       	and	r24, r24
 2e8:	19 f0       	breq	.+6      	; 0x2f0 <LCD_write_string+0x12>
{
LCD_write(str[i]);                            // sending data on LCD byte by byte
 2ea:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_write>
 2ee:	fa cf       	rjmp	.-12     	; 0x2e4 <LCD_write_string+0x6>
i++;
}
return;
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <LCD_write_int>:

void LCD_write_int(u16 number){
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	18 2f       	mov	r17, r24
 304:	09 2f       	mov	r16, r25

s16 num=number;
 306:	68 2f       	mov	r22, r24
 308:	79 2f       	mov	r23, r25
s16 digits=0;
 30a:	c0 e0       	ldi	r28, 0x00	; 0
 30c:	d0 e0       	ldi	r29, 0x00	; 0
s16 index;
while(num>0){
digits++;
num/=10;
 30e:	ea e0       	ldi	r30, 0x0A	; 10
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	ce 01       	movw	r24, r28
 314:	01 96       	adiw	r24, 0x01	; 1
void LCD_write_int(u16 number){

s16 num=number;
s16 digits=0;
s16 index;
while(num>0){
 316:	16 16       	cp	r1, r22
 318:	17 06       	cpc	r1, r23
 31a:	34 f4       	brge	.+12     	; 0x328 <LCD_write_int+0x32>
 31c:	ec 01       	movw	r28, r24
digits++;
num/=10;
 31e:	cb 01       	movw	r24, r22
 320:	bf 01       	movw	r22, r30
 322:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__divmodhi4>
 326:	f5 cf       	rjmp	.-22     	; 0x312 <LCD_write_int+0x1c>
}
index=digits-1;
u8 * arr=malloc((digits+1)* sizeof(u8));
 328:	0e 94 96 05 	call	0xb2c	; 0xb2c <malloc>
 32c:	fc 01       	movw	r30, r24
while(index>=0){
 32e:	9e 01       	movw	r18, r28
s16 rem=number%10;
 330:	8a e0       	ldi	r24, 0x0A	; 10
 332:	e8 2e       	mov	r14, r24
 334:	f1 2c       	mov	r15, r1
 336:	21 50       	subi	r18, 0x01	; 1
 338:	31 09       	sbc	r19, r1
digits++;
num/=10;
}
index=digits-1;
u8 * arr=malloc((digits+1)* sizeof(u8));
while(index>=0){
 33a:	37 fd       	sbrc	r19, 7
 33c:	0d c0       	rjmp	.+26     	; 0x358 <LCD_write_int+0x62>
s16 rem=number%10;
number=number/10;
 33e:	81 2f       	mov	r24, r17
 340:	90 2f       	mov	r25, r16
 342:	b7 01       	movw	r22, r14
 344:	0e 94 47 03 	call	0x68e	; 0x68e <__udivmodhi4>
 348:	16 2f       	mov	r17, r22
 34a:	07 2f       	mov	r16, r23
 34c:	df 01       	movw	r26, r30
 34e:	a2 0f       	add	r26, r18
 350:	b3 1f       	adc	r27, r19
arr[index--]=rem+'0';
 352:	80 5d       	subi	r24, 0xD0	; 208
 354:	8c 93       	st	X, r24
 356:	ef cf       	rjmp	.-34     	; 0x336 <LCD_write_int+0x40>
}
arr[digits]='\0';
 358:	ce 0f       	add	r28, r30
 35a:	df 1f       	adc	r29, r31
 35c:	18 82       	st	Y, r1
LCD_write_string(arr);
 35e:	cf 01       	movw	r24, r30

}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	ff 90       	pop	r15
 36a:	ef 90       	pop	r14
s16 rem=number%10;
number=number/10;
arr[index--]=rem+'0';
}
arr[digits]='\0';
LCD_write_string(arr);
 36c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <LCD_write_string>

00000370 <LCD_write_double>:

}

void LCD_write_double(f64 number){
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
 378:	6b 01       	movw	r12, r22
 37a:	7c 01       	movw	r14, r24

s16 num=(s16)number;
 37c:	0e 94 03 04 	call	0x806	; 0x806 <__fixsfsi>

LCD_write_int(num);
 380:	cb 01       	movw	r24, r22
 382:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_write_int>
LCD_write('.');
 386:	8e e2       	ldi	r24, 0x2E	; 46
 388:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_write>
s16 factor=(s16)(fmod( number, 1.0 )*100);
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	40 e8       	ldi	r20, 0x80	; 128
 392:	5f e3       	ldi	r21, 0x3F	; 63
 394:	c7 01       	movw	r24, r14
 396:	b6 01       	movw	r22, r12
 398:	0e 94 81 04 	call	0x902	; 0x902 <fmod>
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	48 ec       	ldi	r20, 0xC8	; 200
 3a2:	52 e4       	ldi	r21, 0x42	; 66
 3a4:	0e 94 29 05 	call	0xa52	; 0xa52 <__mulsf3>
 3a8:	0e 94 03 04 	call	0x806	; 0x806 <__fixsfsi>
LCD_write_int(factor);
 3ac:	cb 01       	movw	r24, r22

}
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	df 90       	pop	r13
 3b4:	cf 90       	pop	r12
s16 num=(s16)number;

LCD_write_int(num);
LCD_write('.');
s16 factor=(s16)(fmod( number, 1.0 )*100);
LCD_write_int(factor);
 3b6:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <LCD_write_int>

000003ba <LCD_build_special_char>:

}

void LCD_build_special_char(u8 location,u8 *ptr){
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29

if(location<8){
 3c2:	88 30       	cpi	r24, 0x08	; 8
 3c4:	80 f4       	brcc	.+32     	; 0x3e6 <LCD_build_special_char+0x2c>
 3c6:	8b 01       	movw	r16, r22

LCD_cmd(0x40+location*8);
 3c8:	88 0f       	add	r24, r24
 3ca:	88 0f       	add	r24, r24
 3cc:	88 0f       	add	r24, r24
 3ce:	80 5c       	subi	r24, 0xC0	; 192
 3d0:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
 3d4:	e8 01       	movw	r28, r16
 3d6:	08 5f       	subi	r16, 0xF8	; 248
 3d8:	1f 4f       	sbci	r17, 0xFF	; 255
u8 i=0;
for(i=0;i<8;i++){
LCD_write(ptr[i]);
 3da:	89 91       	ld	r24, Y+
 3dc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_write>

if(location<8){

LCD_cmd(0x40+location*8);
u8 i=0;
for(i=0;i<8;i++){
 3e0:	c0 17       	cp	r28, r16
 3e2:	d1 07       	cpc	r29, r17
 3e4:	d1 f7       	brne	.-12     	; 0x3da <LCD_build_special_char+0x20>

}

}

}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	0f 91       	pop	r16
 3ee:	08 95       	ret

000003f0 <LCD_goto>:

void LCD_goto(u8 x,u8 y){

if(x<16){
 3f0:	80 31       	cpi	r24, 0x10	; 16
 3f2:	48 f4       	brcc	.+18     	; 0x406 <LCD_goto+0x16>

if(y==0){
 3f4:	61 11       	cpse	r22, r1
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <LCD_goto+0xc>
LCD_cmd(0x80+x);
 3f8:	80 58       	subi	r24, 0x80	; 128
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <LCD_goto+0x12>
}else if(y==1){
 3fc:	61 30       	cpi	r22, 0x01	; 1
 3fe:	19 f4       	brne	.+6      	; 0x406 <LCD_goto+0x16>
LCD_cmd(0xBF+x);
 400:	81 54       	subi	r24, 0x41	; 65
 402:	0c 94 0a 01 	jmp	0x214	; 0x214 <LCD_cmd>
 406:	08 95       	ret

00000408 <LCD_vidWriteU16>:
}

}

void LCD_vidWriteU16 (u16 u16ValCpy)
{
 408:	0f 93       	push	r16
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	00 d0       	rcall	.+0      	; 0x412 <LCD_vidWriteU16+0xa>
 412:	00 d0       	rcall	.+0      	; 0x414 <LCD_vidWriteU16+0xc>
 414:	00 d0       	rcall	.+0      	; 0x416 <LCD_vidWriteU16+0xe>
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
		u8 u8Iteration = 0;
		u8 u8DigitNumLoc = 0;
 41a:	10 e0       	ldi	r17, 0x00	; 0
		u8 u8aNumber[6];

		while(u16ValCpy != 0)
		{

			u8aNumber[u8DigitNumLoc++] = ((u16ValCpy % 10) + '0');
 41c:	2a e0       	ldi	r18, 0x0A	; 10
 41e:	30 e0       	ldi	r19, 0x00	; 0
{
		u8 u8Iteration = 0;
		u8 u8DigitNumLoc = 0;
		u8 u8aNumber[6];

		while(u16ValCpy != 0)
 420:	00 97       	sbiw	r24, 0x00	; 0
 422:	71 f0       	breq	.+28     	; 0x440 <LCD_vidWriteU16+0x38>
		{

			u8aNumber[u8DigitNumLoc++] = ((u16ValCpy % 10) + '0');
 424:	e1 e0       	ldi	r30, 0x01	; 1
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	ec 0f       	add	r30, r28
 42a:	fd 1f       	adc	r31, r29
 42c:	e1 0f       	add	r30, r17
 42e:	f1 1d       	adc	r31, r1
 430:	b9 01       	movw	r22, r18
 432:	0e 94 47 03 	call	0x68e	; 0x68e <__udivmodhi4>
 436:	80 5d       	subi	r24, 0xD0	; 208
 438:	80 83       	st	Z, r24
			u16ValCpy = u16ValCpy / 10;
 43a:	cb 01       	movw	r24, r22
		u8 u8aNumber[6];

		while(u16ValCpy != 0)
		{

			u8aNumber[u8DigitNumLoc++] = ((u16ValCpy % 10) + '0');
 43c:	1f 5f       	subi	r17, 0xFF	; 255
 43e:	f0 cf       	rjmp	.-32     	; 0x420 <LCD_vidWriteU16+0x18>
			u16ValCpy = u16ValCpy / 10;
		}

		u8Iteration = (u8DigitNumLoc-1);
 440:	0f ef       	ldi	r16, 0xFF	; 255
 442:	01 0f       	add	r16, r17
		while(u8Iteration >= 0 && u8Iteration < u8DigitNumLoc)
 444:	01 17       	cp	r16, r17
 446:	88 f4       	brcc	.+34     	; 0x46a <LCD_vidWriteU16+0x62>
		{
			/* Write Character on LCD */
			LCD_write(u8aNumber[u8Iteration]);
 448:	e1 e0       	ldi	r30, 0x01	; 1
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	ec 0f       	add	r30, r28
 44e:	fd 1f       	adc	r31, r29
 450:	e0 0f       	add	r30, r16
 452:	f1 1d       	adc	r31, r1
 454:	80 81       	ld	r24, Z
 456:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCD_write>
 45a:	8f e9       	ldi	r24, 0x9F	; 159
 45c:	9f e0       	ldi	r25, 0x0F	; 15
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <LCD_vidWriteU16+0x56>
 462:	00 c0       	rjmp	.+0      	; 0x464 <LCD_vidWriteU16+0x5c>
 464:	00 00       	nop
			/* Delay to let the LCD show the character */
			_delay_ms(2);
			u8Iteration = u8Iteration -1;
 466:	01 50       	subi	r16, 0x01	; 1
 468:	ed cf       	rjmp	.-38     	; 0x444 <LCD_vidWriteU16+0x3c>
		}
 46a:	26 96       	adiw	r28, 0x06	; 6
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	1f 91       	pop	r17
 47c:	0f 91       	pop	r16
 47e:	08 95       	ret

00000480 <DIO_u8SetPinValue>:
/**************************************************DIO_u8SetPinValue*******************************************************************************/
/**********************************************************************************************************************************/
/**********************************************************************************************************************************/
u8 DIO_u8SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy){

if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){
 480:	84 30       	cpi	r24, 0x04	; 4
 482:	d8 f4       	brcc	.+54     	; 0x4ba <DIO_u8SetPinValue+0x3a>
 484:	68 30       	cpi	r22, 0x08	; 8
 486:	c8 f4       	brcc	.+50     	; 0x4ba <DIO_u8SetPinValue+0x3a>
 488:	90 e0       	ldi	r25, 0x00	; 0

if(u8PinValCopy==HIGH){
SET_BIT(*PORT_Output[u8PortIdCopy],u8PinIdCopy);
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	fc 01       	movw	r30, r24
 490:	e0 5a       	subi	r30, 0xA0	; 160
 492:	ff 4f       	sbci	r31, 0xFF	; 255
 494:	01 90       	ld	r0, Z+
 496:	f0 81       	ld	r31, Z
 498:	e0 2d       	mov	r30, r0
 49a:	20 81       	ld	r18, Z
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <DIO_u8SetPinValue+0x24>
 4a2:	88 0f       	add	r24, r24
 4a4:	6a 95       	dec	r22
 4a6:	ea f7       	brpl	.-6      	; 0x4a2 <DIO_u8SetPinValue+0x22>
/**********************************************************************************************************************************/
u8 DIO_u8SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy){

if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){

if(u8PinValCopy==HIGH){
 4a8:	41 30       	cpi	r20, 0x01	; 1
 4aa:	11 f4       	brne	.+4      	; 0x4b0 <DIO_u8SetPinValue+0x30>
SET_BIT(*PORT_Output[u8PortIdCopy],u8PinIdCopy);
 4ac:	82 2b       	or	r24, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_u8SetPinValue+0x34>

}
else
{
CLR_BIT(*PORT_Output[u8PortIdCopy],u8PinIdCopy);
 4b0:	80 95       	com	r24
 4b2:	82 23       	and	r24, r18
 4b4:	80 83       	st	Z, r24
}

return SUCCESS;
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	08 95       	ret
}

else{

return ERROR;
 4ba:	8f ef       	ldi	r24, 0xFF	; 255

}



}
 4bc:	08 95       	ret

000004be <DIO_u8GetPinValue>:
/**********************************************************************************************************************************/

u8 DIO_u8GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy,u8* u8ptrPinValCopy){


if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){
 4be:	84 30       	cpi	r24, 0x04	; 4
 4c0:	b8 f4       	brcc	.+46     	; 0x4f0 <DIO_u8GetPinValue+0x32>
 4c2:	68 30       	cpi	r22, 0x08	; 8
 4c4:	a8 f4       	brcc	.+42     	; 0x4f0 <DIO_u8GetPinValue+0x32>
*u8ptrPinValCopy=GET_BIT(*PORT_Input[u8PortIdCopy],u8PinIdCopy);
 4c6:	e8 2f       	mov	r30, r24
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	e8 59       	subi	r30, 0x98	; 152
 4d0:	ff 4f       	sbci	r31, 0xFF	; 255
 4d2:	01 90       	ld	r0, Z+
 4d4:	f0 81       	ld	r31, Z
 4d6:	e0 2d       	mov	r30, r0
 4d8:	80 81       	ld	r24, Z
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_u8GetPinValue+0x24>
 4de:	95 95       	asr	r25
 4e0:	87 95       	ror	r24
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_u8GetPinValue+0x20>
 4e6:	81 70       	andi	r24, 0x01	; 1
 4e8:	fa 01       	movw	r30, r20
 4ea:	80 83       	st	Z, r24
return SUCCESS;
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	08 95       	ret
}

else{

return ERROR;
 4f0:	8f ef       	ldi	r24, 0xFF	; 255

}


}
 4f2:	08 95       	ret

000004f4 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){


if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){
 4f4:	84 30       	cpi	r24, 0x04	; 4
 4f6:	d8 f4       	brcc	.+54     	; 0x52e <DIO_u8SetPinDirection+0x3a>
 4f8:	68 30       	cpi	r22, 0x08	; 8
 4fa:	c8 f4       	brcc	.+50     	; 0x52e <DIO_u8SetPinDirection+0x3a>
 4fc:	90 e0       	ldi	r25, 0x00	; 0

if(u8PinDirCopy==HIGH)
{SET_BIT(*PORT_Direction[u8PortIdCopy],u8PinIdCopy);
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	fc 01       	movw	r30, r24
 504:	e0 59       	subi	r30, 0x90	; 144
 506:	ff 4f       	sbci	r31, 0xFF	; 255
 508:	01 90       	ld	r0, Z+
 50a:	f0 81       	ld	r31, Z
 50c:	e0 2d       	mov	r30, r0
 50e:	20 81       	ld	r18, Z
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	01 c0       	rjmp	.+2      	; 0x518 <DIO_u8SetPinDirection+0x24>
 516:	88 0f       	add	r24, r24
 518:	6a 95       	dec	r22
 51a:	ea f7       	brpl	.-6      	; 0x516 <DIO_u8SetPinDirection+0x22>
u8 DIO_u8SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){


if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){

if(u8PinDirCopy==HIGH)
 51c:	41 30       	cpi	r20, 0x01	; 1
 51e:	11 f4       	brne	.+4      	; 0x524 <DIO_u8SetPinDirection+0x30>
{SET_BIT(*PORT_Direction[u8PortIdCopy],u8PinIdCopy);
 520:	82 2b       	or	r24, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_u8SetPinDirection+0x34>
}
else
{
CLR_BIT(*PORT_Direction[u8PortIdCopy],u8PinIdCopy);
 524:	80 95       	com	r24
 526:	82 23       	and	r24, r18
 528:	80 83       	st	Z, r24
}

return SUCCESS;
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	08 95       	ret

}

else{

return ERROR;
 52e:	8f ef       	ldi	r24, 0xFF	; 255

}


}
 530:	08 95       	ret

00000532 <DIO_u8SetPortDirection>:



u8 DIO_u8SetPortDirection (u8 u8PortIdCopy, u8 u8PortDirCopy){

if(u8PortIdCopy<=PORTD){
 532:	84 30       	cpi	r24, 0x04	; 4
 534:	60 f4       	brcc	.+24     	; 0x54e <DIO_u8SetPortDirection+0x1c>

*PORT_Direction[u8PortIdCopy]=u8PortDirCopy;
 536:	e8 2f       	mov	r30, r24
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	ee 0f       	add	r30, r30
 53c:	ff 1f       	adc	r31, r31
 53e:	e0 59       	subi	r30, 0x90	; 144
 540:	ff 4f       	sbci	r31, 0xFF	; 255
 542:	01 90       	ld	r0, Z+
 544:	f0 81       	ld	r31, Z
 546:	e0 2d       	mov	r30, r0
 548:	60 83       	st	Z, r22


return SUCCESS;
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	08 95       	ret

}

else{

return ERROR;
 54e:	8f ef       	ldi	r24, 0xFF	; 255

}

}
 550:	08 95       	ret

00000552 <DIO_u8SetPortValue>:
 552:	84 30       	cpi	r24, 0x04	; 4
 554:	60 f4       	brcc	.+24     	; 0x56e <DIO_u8SetPortValue+0x1c>
 556:	e8 2f       	mov	r30, r24
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	ee 0f       	add	r30, r30
 55c:	ff 1f       	adc	r31, r31
 55e:	e0 5a       	subi	r30, 0xA0	; 160
 560:	ff 4f       	sbci	r31, 0xFF	; 255
 562:	01 90       	ld	r0, Z+
 564:	f0 81       	ld	r31, Z
 566:	e0 2d       	mov	r30, r0
 568:	60 83       	st	Z, r22
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	08 95       	ret
 56e:	8f ef       	ldi	r24, 0xFF	; 255
 570:	08 95       	ret

00000572 <main>:
volatile u8 state=0;
volatile u16 a,b,c;

int main (void){
//unsigned int a,b,c,high,period;
DDRD|=(1<<0);
 572:	88 9a       	sbi	0x11, 0	; 17
 u16 *duty_cycle;	
 init_LCD();
 574:	0e 94 26 01 	call	0x24c	; 0x24c <init_LCD>
 init_Timer0PWM_OC0(128);
 578:	80 e8       	ldi	r24, 0x80	; 128
 57a:	0e 94 49 00 	call	0x92	; 0x92 <init_Timer0PWM_OC0>
 ADC_Init();
 57e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <ADC_Init>
TCCR1A = 0;
 582:	1f bc       	out	0x2f, r1	; 47
TCNT1=0;
 584:	1d bc       	out	0x2d, r1	; 45
 586:	1c bc       	out	0x2c, r1	; 44
TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag) flag */
 588:	80 e2       	ldi	r24, 0x20	; 32
 58a:	88 bf       	out	0x38, r24	; 56

		//TCCR1B = 0x41;  	/* Rising edge, no prescaler */
TCCR1B|=(1<<CS10)|(1<<ICES1);
 58c:	8e b5       	in	r24, 0x2e	; 46
 58e:	81 64       	ori	r24, 0x41	; 65
 590:	8e bd       	out	0x2e, r24	; 46
	//PORTD = 0xFF;			/* Turn ON pull-up resistor */
TIMSK|=(1<<TICIE1);
 592:	89 b7       	in	r24, 0x39	; 57
 594:	80 62       	ori	r24, 0x20	; 32
 596:	89 bf       	out	0x39, r24	; 57
sei();	
 598:	78 94       	sei

	 		_delay_ms(100);

	 		LCD_cmd(0x01);
	 	}else{
	 		            TOG_BIT(PORTD,0);
 59a:	11 e0       	ldi	r17, 0x01	; 1
           
            
	 		 u16 on_time=b-a;
	 		 u16 period=c-a;
	 		 u16 d=((float)on_time/period)*100;
	 		 u16 f=F_CPU/period;
 59c:	c1 2c       	mov	r12, r1
 59e:	82 e1       	ldi	r24, 0x12	; 18
 5a0:	d8 2e       	mov	r13, r24
 5a2:	8a e7       	ldi	r24, 0x7A	; 122
 5a4:	e8 2e       	mov	r14, r24
 5a6:	f1 2c       	mov	r15, r1
TCCR1B|=(1<<CS10)|(1<<ICES1);
	//PORTD = 0xFF;			/* Turn ON pull-up resistor */
TIMSK|=(1<<TICIE1);
sei();	
	while(1)
	 {OCR0=ADCu16_Read(3);
 5a8:	83 e0       	ldi	r24, 0x03	; 3
 5aa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <ADCu16_Read>
 5ae:	8c bf       	out	0x3c, r24	; 60
// 		}


/********************************/
       
            if(state==3){
 5b0:	80 91 7e 00 	lds	r24, 0x007E
 5b4:	83 30       	cpi	r24, 0x03	; 3
 5b6:	c1 f7       	brne	.-16     	; 0x5a8 <main+0x36>
            cli();
 5b8:	f8 94       	cli
             state=0;
 5ba:	10 92 7e 00 	sts	0x007E, r1
            if(a<b && b<c) {
 5be:	20 91 83 00 	lds	r18, 0x0083
 5c2:	30 91 84 00 	lds	r19, 0x0084
 5c6:	80 91 7f 00 	lds	r24, 0x007F
 5ca:	90 91 80 00 	lds	r25, 0x0080
 5ce:	28 17       	cp	r18, r24
 5d0:	39 07       	cpc	r19, r25
 5d2:	08 f0       	brcs	.+2      	; 0x5d6 <main+0x64>
 5d4:	55 c0       	rjmp	.+170    	; 0x680 <main+0x10e>
 5d6:	20 91 7f 00 	lds	r18, 0x007F
 5da:	30 91 80 00 	lds	r19, 0x0080
 5de:	80 91 81 00 	lds	r24, 0x0081
 5e2:	90 91 82 00 	lds	r25, 0x0082
 5e6:	28 17       	cp	r18, r24
 5e8:	39 07       	cpc	r19, r25
 5ea:	08 f0       	brcs	.+2      	; 0x5ee <main+0x7c>
 5ec:	49 c0       	rjmp	.+146    	; 0x680 <main+0x10e>
           
            
	 		 u16 on_time=b-a;
 5ee:	80 91 7f 00 	lds	r24, 0x007F
 5f2:	90 91 80 00 	lds	r25, 0x0080
 5f6:	20 91 83 00 	lds	r18, 0x0083
 5fa:	30 91 84 00 	lds	r19, 0x0084
	 		 u16 period=c-a;
 5fe:	c0 91 81 00 	lds	r28, 0x0081
 602:	d0 91 82 00 	lds	r29, 0x0082
 606:	40 91 83 00 	lds	r20, 0x0083
 60a:	50 91 84 00 	lds	r21, 0x0084
 60e:	c4 1b       	sub	r28, r20
 610:	d5 0b       	sbc	r29, r21
            cli();
             state=0;
            if(a<b && b<c) {
           
            
	 		 u16 on_time=b-a;
 612:	82 1b       	sub	r24, r18
 614:	93 0b       	sbc	r25, r19
	 		 u16 period=c-a;
	 		 u16 d=((float)on_time/period)*100;
 616:	bc 01       	movw	r22, r24
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 39 04 	call	0x872	; 0x872 <__floatunsisf>
 620:	2b 01       	movw	r4, r22
 622:	3c 01       	movw	r6, r24
 624:	4e 01       	movw	r8, r28
 626:	a1 2c       	mov	r10, r1
 628:	b1 2c       	mov	r11, r1
 62a:	c5 01       	movw	r24, r10
 62c:	b4 01       	movw	r22, r8
 62e:	0e 94 39 04 	call	0x872	; 0x872 <__floatunsisf>
 632:	9b 01       	movw	r18, r22
 634:	ac 01       	movw	r20, r24
 636:	c3 01       	movw	r24, r6
 638:	b2 01       	movw	r22, r4
 63a:	0e 94 91 03 	call	0x722	; 0x722 <__divsf3>
 63e:	20 e0       	ldi	r18, 0x00	; 0
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	48 ec       	ldi	r20, 0xC8	; 200
 644:	52 e4       	ldi	r21, 0x42	; 66
 646:	0e 94 29 05 	call	0xa52	; 0xa52 <__mulsf3>
 64a:	0e 94 0a 04 	call	0x814	; 0x814 <__fixunssfsi>
	 		 u16 f=F_CPU/period;
	 		 LCD_write_int(d);
 64e:	cb 01       	movw	r24, r22
 650:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_write_int>
           
            
	 		 u16 on_time=b-a;
	 		 u16 period=c-a;
	 		 u16 d=((float)on_time/period)*100;
	 		 u16 f=F_CPU/period;
 654:	c7 01       	movw	r24, r14
 656:	b6 01       	movw	r22, r12
 658:	a5 01       	movw	r20, r10
 65a:	94 01       	movw	r18, r8
 65c:	0e 94 6f 03 	call	0x6de	; 0x6de <__udivmodsi4>
	 		 LCD_write_int(d);
	 		 LCD_write_int(f);
 660:	c9 01       	movw	r24, r18
 662:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_write_int>
 666:	2f ef       	ldi	r18, 0xFF	; 255
 668:	80 e7       	ldi	r24, 0x70	; 112
 66a:	92 e0       	ldi	r25, 0x02	; 2
 66c:	21 50       	subi	r18, 0x01	; 1
 66e:	80 40       	sbci	r24, 0x00	; 0
 670:	90 40       	sbci	r25, 0x00	; 0
 672:	e1 f7       	brne	.-8      	; 0x66c <main+0xfa>
 674:	00 c0       	rjmp	.+0      	; 0x676 <main+0x104>
 676:	00 00       	nop

	 		

	 		_delay_ms(100);

	 		LCD_cmd(0x01);
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_cmd>
/********************************/
       
            if(state==3){
            cli();
             state=0;
            if(a<b && b<c) {
 67e:	03 c0       	rjmp	.+6      	; 0x686 <main+0x114>

	 		_delay_ms(100);

	 		LCD_cmd(0x01);
	 	}else{
	 		            TOG_BIT(PORTD,0);
 680:	82 b3       	in	r24, 0x12	; 18
 682:	81 27       	eor	r24, r17
 684:	82 bb       	out	0x12, r24	; 18

	 	}
	 	TCNT1=0;
 686:	1d bc       	out	0x2d, r1	; 45
 688:	1c bc       	out	0x2c, r1	; 44
	 		sei();
 68a:	78 94       	sei
 68c:	8d cf       	rjmp	.-230    	; 0x5a8 <main+0x36>

0000068e <__udivmodhi4>:
 68e:	aa 1b       	sub	r26, r26
 690:	bb 1b       	sub	r27, r27
 692:	51 e1       	ldi	r21, 0x11	; 17
 694:	07 c0       	rjmp	.+14     	; 0x6a4 <__udivmodhi4_ep>

00000696 <__udivmodhi4_loop>:
 696:	aa 1f       	adc	r26, r26
 698:	bb 1f       	adc	r27, r27
 69a:	a6 17       	cp	r26, r22
 69c:	b7 07       	cpc	r27, r23
 69e:	10 f0       	brcs	.+4      	; 0x6a4 <__udivmodhi4_ep>
 6a0:	a6 1b       	sub	r26, r22
 6a2:	b7 0b       	sbc	r27, r23

000006a4 <__udivmodhi4_ep>:
 6a4:	88 1f       	adc	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	5a 95       	dec	r21
 6aa:	a9 f7       	brne	.-22     	; 0x696 <__udivmodhi4_loop>
 6ac:	80 95       	com	r24
 6ae:	90 95       	com	r25
 6b0:	bc 01       	movw	r22, r24
 6b2:	cd 01       	movw	r24, r26
 6b4:	08 95       	ret

000006b6 <__divmodhi4>:
 6b6:	97 fb       	bst	r25, 7
 6b8:	07 2e       	mov	r0, r23
 6ba:	16 f4       	brtc	.+4      	; 0x6c0 <__divmodhi4+0xa>
 6bc:	00 94       	com	r0
 6be:	07 d0       	rcall	.+14     	; 0x6ce <__divmodhi4_neg1>
 6c0:	77 fd       	sbrc	r23, 7
 6c2:	09 d0       	rcall	.+18     	; 0x6d6 <__divmodhi4_neg2>
 6c4:	0e 94 47 03 	call	0x68e	; 0x68e <__udivmodhi4>
 6c8:	07 fc       	sbrc	r0, 7
 6ca:	05 d0       	rcall	.+10     	; 0x6d6 <__divmodhi4_neg2>
 6cc:	3e f4       	brtc	.+14     	; 0x6dc <__divmodhi4_exit>

000006ce <__divmodhi4_neg1>:
 6ce:	90 95       	com	r25
 6d0:	81 95       	neg	r24
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	08 95       	ret

000006d6 <__divmodhi4_neg2>:
 6d6:	70 95       	com	r23
 6d8:	61 95       	neg	r22
 6da:	7f 4f       	sbci	r23, 0xFF	; 255

000006dc <__divmodhi4_exit>:
 6dc:	08 95       	ret

000006de <__udivmodsi4>:
 6de:	a1 e2       	ldi	r26, 0x21	; 33
 6e0:	1a 2e       	mov	r1, r26
 6e2:	aa 1b       	sub	r26, r26
 6e4:	bb 1b       	sub	r27, r27
 6e6:	fd 01       	movw	r30, r26
 6e8:	0d c0       	rjmp	.+26     	; 0x704 <__udivmodsi4_ep>

000006ea <__udivmodsi4_loop>:
 6ea:	aa 1f       	adc	r26, r26
 6ec:	bb 1f       	adc	r27, r27
 6ee:	ee 1f       	adc	r30, r30
 6f0:	ff 1f       	adc	r31, r31
 6f2:	a2 17       	cp	r26, r18
 6f4:	b3 07       	cpc	r27, r19
 6f6:	e4 07       	cpc	r30, r20
 6f8:	f5 07       	cpc	r31, r21
 6fa:	20 f0       	brcs	.+8      	; 0x704 <__udivmodsi4_ep>
 6fc:	a2 1b       	sub	r26, r18
 6fe:	b3 0b       	sbc	r27, r19
 700:	e4 0b       	sbc	r30, r20
 702:	f5 0b       	sbc	r31, r21

00000704 <__udivmodsi4_ep>:
 704:	66 1f       	adc	r22, r22
 706:	77 1f       	adc	r23, r23
 708:	88 1f       	adc	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	1a 94       	dec	r1
 70e:	69 f7       	brne	.-38     	; 0x6ea <__udivmodsi4_loop>
 710:	60 95       	com	r22
 712:	70 95       	com	r23
 714:	80 95       	com	r24
 716:	90 95       	com	r25
 718:	9b 01       	movw	r18, r22
 71a:	ac 01       	movw	r20, r24
 71c:	bd 01       	movw	r22, r26
 71e:	cf 01       	movw	r24, r30
 720:	08 95       	ret

00000722 <__divsf3>:
 722:	0e 94 a5 03 	call	0x74a	; 0x74a <__divsf3x>
 726:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_round>
 72a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__fp_pscB>
 72e:	58 f0       	brcs	.+22     	; 0x746 <__divsf3+0x24>
 730:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fp_pscA>
 734:	40 f0       	brcs	.+16     	; 0x746 <__divsf3+0x24>
 736:	29 f4       	brne	.+10     	; 0x742 <__divsf3+0x20>
 738:	5f 3f       	cpi	r21, 0xFF	; 255
 73a:	29 f0       	breq	.+10     	; 0x746 <__divsf3+0x24>
 73c:	0c 94 ca 04 	jmp	0x994	; 0x994 <__fp_inf>
 740:	51 11       	cpse	r21, r1
 742:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>
 746:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_nan>

0000074a <__divsf3x>:
 74a:	0e 94 00 05 	call	0xa00	; 0xa00 <__fp_split3>
 74e:	68 f3       	brcs	.-38     	; 0x72a <__divsf3+0x8>

00000750 <__divsf3_pse>:
 750:	99 23       	and	r25, r25
 752:	b1 f3       	breq	.-20     	; 0x740 <__divsf3+0x1e>
 754:	55 23       	and	r21, r21
 756:	91 f3       	breq	.-28     	; 0x73c <__divsf3+0x1a>
 758:	95 1b       	sub	r25, r21
 75a:	55 0b       	sbc	r21, r21
 75c:	bb 27       	eor	r27, r27
 75e:	aa 27       	eor	r26, r26
 760:	62 17       	cp	r22, r18
 762:	73 07       	cpc	r23, r19
 764:	84 07       	cpc	r24, r20
 766:	38 f0       	brcs	.+14     	; 0x776 <__divsf3_pse+0x26>
 768:	9f 5f       	subi	r25, 0xFF	; 255
 76a:	5f 4f       	sbci	r21, 0xFF	; 255
 76c:	22 0f       	add	r18, r18
 76e:	33 1f       	adc	r19, r19
 770:	44 1f       	adc	r20, r20
 772:	aa 1f       	adc	r26, r26
 774:	a9 f3       	breq	.-22     	; 0x760 <__divsf3_pse+0x10>
 776:	35 d0       	rcall	.+106    	; 0x7e2 <__divsf3_pse+0x92>
 778:	0e 2e       	mov	r0, r30
 77a:	3a f0       	brmi	.+14     	; 0x78a <__divsf3_pse+0x3a>
 77c:	e0 e8       	ldi	r30, 0x80	; 128
 77e:	32 d0       	rcall	.+100    	; 0x7e4 <__divsf3_pse+0x94>
 780:	91 50       	subi	r25, 0x01	; 1
 782:	50 40       	sbci	r21, 0x00	; 0
 784:	e6 95       	lsr	r30
 786:	00 1c       	adc	r0, r0
 788:	ca f7       	brpl	.-14     	; 0x77c <__divsf3_pse+0x2c>
 78a:	2b d0       	rcall	.+86     	; 0x7e2 <__divsf3_pse+0x92>
 78c:	fe 2f       	mov	r31, r30
 78e:	29 d0       	rcall	.+82     	; 0x7e2 <__divsf3_pse+0x92>
 790:	66 0f       	add	r22, r22
 792:	77 1f       	adc	r23, r23
 794:	88 1f       	adc	r24, r24
 796:	bb 1f       	adc	r27, r27
 798:	26 17       	cp	r18, r22
 79a:	37 07       	cpc	r19, r23
 79c:	48 07       	cpc	r20, r24
 79e:	ab 07       	cpc	r26, r27
 7a0:	b0 e8       	ldi	r27, 0x80	; 128
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <__divsf3_pse+0x56>
 7a4:	bb 0b       	sbc	r27, r27
 7a6:	80 2d       	mov	r24, r0
 7a8:	bf 01       	movw	r22, r30
 7aa:	ff 27       	eor	r31, r31
 7ac:	93 58       	subi	r25, 0x83	; 131
 7ae:	5f 4f       	sbci	r21, 0xFF	; 255
 7b0:	3a f0       	brmi	.+14     	; 0x7c0 <__divsf3_pse+0x70>
 7b2:	9e 3f       	cpi	r25, 0xFE	; 254
 7b4:	51 05       	cpc	r21, r1
 7b6:	78 f0       	brcs	.+30     	; 0x7d6 <__divsf3_pse+0x86>
 7b8:	0c 94 ca 04 	jmp	0x994	; 0x994 <__fp_inf>
 7bc:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>
 7c0:	5f 3f       	cpi	r21, 0xFF	; 255
 7c2:	e4 f3       	brlt	.-8      	; 0x7bc <__divsf3_pse+0x6c>
 7c4:	98 3e       	cpi	r25, 0xE8	; 232
 7c6:	d4 f3       	brlt	.-12     	; 0x7bc <__divsf3_pse+0x6c>
 7c8:	86 95       	lsr	r24
 7ca:	77 95       	ror	r23
 7cc:	67 95       	ror	r22
 7ce:	b7 95       	ror	r27
 7d0:	f7 95       	ror	r31
 7d2:	9f 5f       	subi	r25, 0xFF	; 255
 7d4:	c9 f7       	brne	.-14     	; 0x7c8 <__divsf3_pse+0x78>
 7d6:	88 0f       	add	r24, r24
 7d8:	91 1d       	adc	r25, r1
 7da:	96 95       	lsr	r25
 7dc:	87 95       	ror	r24
 7de:	97 f9       	bld	r25, 7
 7e0:	08 95       	ret
 7e2:	e1 e0       	ldi	r30, 0x01	; 1
 7e4:	66 0f       	add	r22, r22
 7e6:	77 1f       	adc	r23, r23
 7e8:	88 1f       	adc	r24, r24
 7ea:	bb 1f       	adc	r27, r27
 7ec:	62 17       	cp	r22, r18
 7ee:	73 07       	cpc	r23, r19
 7f0:	84 07       	cpc	r24, r20
 7f2:	ba 07       	cpc	r27, r26
 7f4:	20 f0       	brcs	.+8      	; 0x7fe <__divsf3_pse+0xae>
 7f6:	62 1b       	sub	r22, r18
 7f8:	73 0b       	sbc	r23, r19
 7fa:	84 0b       	sbc	r24, r20
 7fc:	ba 0b       	sbc	r27, r26
 7fe:	ee 1f       	adc	r30, r30
 800:	88 f7       	brcc	.-30     	; 0x7e4 <__divsf3_pse+0x94>
 802:	e0 95       	com	r30
 804:	08 95       	ret

00000806 <__fixsfsi>:
 806:	0e 94 0a 04 	call	0x814	; 0x814 <__fixunssfsi>
 80a:	68 94       	set
 80c:	b1 11       	cpse	r27, r1
 80e:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>
 812:	08 95       	ret

00000814 <__fixunssfsi>:
 814:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_splitA>
 818:	88 f0       	brcs	.+34     	; 0x83c <__fixunssfsi+0x28>
 81a:	9f 57       	subi	r25, 0x7F	; 127
 81c:	98 f0       	brcs	.+38     	; 0x844 <__fixunssfsi+0x30>
 81e:	b9 2f       	mov	r27, r25
 820:	99 27       	eor	r25, r25
 822:	b7 51       	subi	r27, 0x17	; 23
 824:	b0 f0       	brcs	.+44     	; 0x852 <__fixunssfsi+0x3e>
 826:	e1 f0       	breq	.+56     	; 0x860 <__stack+0x1>
 828:	66 0f       	add	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	1a f0       	brmi	.+6      	; 0x838 <__fixunssfsi+0x24>
 832:	ba 95       	dec	r27
 834:	c9 f7       	brne	.-14     	; 0x828 <__fixunssfsi+0x14>
 836:	14 c0       	rjmp	.+40     	; 0x860 <__stack+0x1>
 838:	b1 30       	cpi	r27, 0x01	; 1
 83a:	91 f0       	breq	.+36     	; 0x860 <__stack+0x1>
 83c:	0e 94 22 05 	call	0xa44	; 0xa44 <__fp_zero>
 840:	b1 e0       	ldi	r27, 0x01	; 1
 842:	08 95       	ret
 844:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_zero>
 848:	67 2f       	mov	r22, r23
 84a:	78 2f       	mov	r23, r24
 84c:	88 27       	eor	r24, r24
 84e:	b8 5f       	subi	r27, 0xF8	; 248
 850:	39 f0       	breq	.+14     	; 0x860 <__stack+0x1>
 852:	b9 3f       	cpi	r27, 0xF9	; 249
 854:	cc f3       	brlt	.-14     	; 0x848 <__fixunssfsi+0x34>
 856:	86 95       	lsr	r24
 858:	77 95       	ror	r23
 85a:	67 95       	ror	r22
 85c:	b3 95       	inc	r27
 85e:	d9 f7       	brne	.-10     	; 0x856 <__fixunssfsi+0x42>
 860:	3e f4       	brtc	.+14     	; 0x870 <__stack+0x11>
 862:	90 95       	com	r25
 864:	80 95       	com	r24
 866:	70 95       	com	r23
 868:	61 95       	neg	r22
 86a:	7f 4f       	sbci	r23, 0xFF	; 255
 86c:	8f 4f       	sbci	r24, 0xFF	; 255
 86e:	9f 4f       	sbci	r25, 0xFF	; 255
 870:	08 95       	ret

00000872 <__floatunsisf>:
 872:	e8 94       	clt
 874:	09 c0       	rjmp	.+18     	; 0x888 <__floatsisf+0x12>

00000876 <__floatsisf>:
 876:	97 fb       	bst	r25, 7
 878:	3e f4       	brtc	.+14     	; 0x888 <__floatsisf+0x12>
 87a:	90 95       	com	r25
 87c:	80 95       	com	r24
 87e:	70 95       	com	r23
 880:	61 95       	neg	r22
 882:	7f 4f       	sbci	r23, 0xFF	; 255
 884:	8f 4f       	sbci	r24, 0xFF	; 255
 886:	9f 4f       	sbci	r25, 0xFF	; 255
 888:	99 23       	and	r25, r25
 88a:	a9 f0       	breq	.+42     	; 0x8b6 <__floatsisf+0x40>
 88c:	f9 2f       	mov	r31, r25
 88e:	96 e9       	ldi	r25, 0x96	; 150
 890:	bb 27       	eor	r27, r27
 892:	93 95       	inc	r25
 894:	f6 95       	lsr	r31
 896:	87 95       	ror	r24
 898:	77 95       	ror	r23
 89a:	67 95       	ror	r22
 89c:	b7 95       	ror	r27
 89e:	f1 11       	cpse	r31, r1
 8a0:	f8 cf       	rjmp	.-16     	; 0x892 <__floatsisf+0x1c>
 8a2:	fa f4       	brpl	.+62     	; 0x8e2 <__floatsisf+0x6c>
 8a4:	bb 0f       	add	r27, r27
 8a6:	11 f4       	brne	.+4      	; 0x8ac <__floatsisf+0x36>
 8a8:	60 ff       	sbrs	r22, 0
 8aa:	1b c0       	rjmp	.+54     	; 0x8e2 <__floatsisf+0x6c>
 8ac:	6f 5f       	subi	r22, 0xFF	; 255
 8ae:	7f 4f       	sbci	r23, 0xFF	; 255
 8b0:	8f 4f       	sbci	r24, 0xFF	; 255
 8b2:	9f 4f       	sbci	r25, 0xFF	; 255
 8b4:	16 c0       	rjmp	.+44     	; 0x8e2 <__floatsisf+0x6c>
 8b6:	88 23       	and	r24, r24
 8b8:	11 f0       	breq	.+4      	; 0x8be <__floatsisf+0x48>
 8ba:	96 e9       	ldi	r25, 0x96	; 150
 8bc:	11 c0       	rjmp	.+34     	; 0x8e0 <__floatsisf+0x6a>
 8be:	77 23       	and	r23, r23
 8c0:	21 f0       	breq	.+8      	; 0x8ca <__floatsisf+0x54>
 8c2:	9e e8       	ldi	r25, 0x8E	; 142
 8c4:	87 2f       	mov	r24, r23
 8c6:	76 2f       	mov	r23, r22
 8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <__floatsisf+0x5e>
 8ca:	66 23       	and	r22, r22
 8cc:	71 f0       	breq	.+28     	; 0x8ea <__floatsisf+0x74>
 8ce:	96 e8       	ldi	r25, 0x86	; 134
 8d0:	86 2f       	mov	r24, r22
 8d2:	70 e0       	ldi	r23, 0x00	; 0
 8d4:	60 e0       	ldi	r22, 0x00	; 0
 8d6:	2a f0       	brmi	.+10     	; 0x8e2 <__floatsisf+0x6c>
 8d8:	9a 95       	dec	r25
 8da:	66 0f       	add	r22, r22
 8dc:	77 1f       	adc	r23, r23
 8de:	88 1f       	adc	r24, r24
 8e0:	da f7       	brpl	.-10     	; 0x8d8 <__floatsisf+0x62>
 8e2:	88 0f       	add	r24, r24
 8e4:	96 95       	lsr	r25
 8e6:	87 95       	ror	r24
 8e8:	97 f9       	bld	r25, 7
 8ea:	08 95       	ret
 8ec:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fp_pscA>
 8f0:	20 f0       	brcs	.+8      	; 0x8fa <__floatsisf+0x84>
 8f2:	19 f0       	breq	.+6      	; 0x8fa <__floatsisf+0x84>
 8f4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__fp_pscB>
 8f8:	50 f4       	brcc	.+20     	; 0x90e <fmod+0xc>
 8fa:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_nan>
 8fe:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>

00000902 <fmod>:
 902:	e9 2f       	mov	r30, r25
 904:	0e 94 00 05 	call	0xa00	; 0xa00 <__fp_split3>
 908:	88 f3       	brcs	.-30     	; 0x8ec <__floatsisf+0x76>
 90a:	55 23       	and	r21, r21
 90c:	b1 f3       	breq	.-20     	; 0x8fa <__floatsisf+0x84>
 90e:	e7 fb       	bst	r30, 7
 910:	62 17       	cp	r22, r18
 912:	73 07       	cpc	r23, r19
 914:	84 07       	cpc	r24, r20
 916:	95 07       	cpc	r25, r21
 918:	a8 f1       	brcs	.+106    	; 0x984 <fmod+0x82>
 91a:	89 f3       	breq	.-30     	; 0x8fe <__floatsisf+0x88>
 91c:	e9 2f       	mov	r30, r25
 91e:	ff 27       	eor	r31, r31
 920:	88 23       	and	r24, r24
 922:	2a f0       	brmi	.+10     	; 0x92e <fmod+0x2c>
 924:	31 97       	sbiw	r30, 0x01	; 1
 926:	66 0f       	add	r22, r22
 928:	77 1f       	adc	r23, r23
 92a:	88 1f       	adc	r24, r24
 92c:	da f7       	brpl	.-10     	; 0x924 <fmod+0x22>
 92e:	95 2f       	mov	r25, r21
 930:	55 27       	eor	r21, r21
 932:	44 23       	and	r20, r20
 934:	32 f0       	brmi	.+12     	; 0x942 <fmod+0x40>
 936:	91 50       	subi	r25, 0x01	; 1
 938:	50 40       	sbci	r21, 0x00	; 0
 93a:	22 0f       	add	r18, r18
 93c:	33 1f       	adc	r19, r19
 93e:	44 1f       	adc	r20, r20
 940:	d2 f7       	brpl	.-12     	; 0x936 <fmod+0x34>
 942:	bb 27       	eor	r27, r27
 944:	e9 1b       	sub	r30, r25
 946:	f5 0b       	sbc	r31, r21
 948:	62 1b       	sub	r22, r18
 94a:	73 0b       	sbc	r23, r19
 94c:	84 0b       	sbc	r24, r20
 94e:	b1 09       	sbc	r27, r1
 950:	b1 f2       	breq	.-84     	; 0x8fe <__floatsisf+0x88>
 952:	22 f4       	brpl	.+8      	; 0x95c <fmod+0x5a>
 954:	62 0f       	add	r22, r18
 956:	73 1f       	adc	r23, r19
 958:	84 1f       	adc	r24, r20
 95a:	b1 1d       	adc	r27, r1
 95c:	31 97       	sbiw	r30, 0x01	; 1
 95e:	2a f0       	brmi	.+10     	; 0x96a <fmod+0x68>
 960:	66 0f       	add	r22, r22
 962:	77 1f       	adc	r23, r23
 964:	88 1f       	adc	r24, r24
 966:	bb 1f       	adc	r27, r27
 968:	ef cf       	rjmp	.-34     	; 0x948 <fmod+0x46>
 96a:	91 50       	subi	r25, 0x01	; 1
 96c:	50 40       	sbci	r21, 0x00	; 0
 96e:	62 f0       	brmi	.+24     	; 0x988 <fmod+0x86>
 970:	41 f0       	breq	.+16     	; 0x982 <fmod+0x80>
 972:	88 23       	and	r24, r24
 974:	32 f0       	brmi	.+12     	; 0x982 <fmod+0x80>
 976:	66 0f       	add	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	88 1f       	adc	r24, r24
 97c:	91 50       	subi	r25, 0x01	; 1
 97e:	50 40       	sbci	r21, 0x00	; 0
 980:	c1 f7       	brne	.-16     	; 0x972 <fmod+0x70>
 982:	93 95       	inc	r25
 984:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__fp_mpack>
 988:	86 95       	lsr	r24
 98a:	77 95       	ror	r23
 98c:	67 95       	ror	r22
 98e:	9f 5f       	subi	r25, 0xFF	; 255
 990:	d9 f7       	brne	.-10     	; 0x988 <fmod+0x86>
 992:	f7 cf       	rjmp	.-18     	; 0x982 <fmod+0x80>

00000994 <__fp_inf>:
 994:	97 f9       	bld	r25, 7
 996:	9f 67       	ori	r25, 0x7F	; 127
 998:	80 e8       	ldi	r24, 0x80	; 128
 99a:	70 e0       	ldi	r23, 0x00	; 0
 99c:	60 e0       	ldi	r22, 0x00	; 0
 99e:	08 95       	ret

000009a0 <__fp_mpack>:
 9a0:	9f 3f       	cpi	r25, 0xFF	; 255
 9a2:	31 f0       	breq	.+12     	; 0x9b0 <__fp_mpack_finite+0xc>

000009a4 <__fp_mpack_finite>:
 9a4:	91 50       	subi	r25, 0x01	; 1
 9a6:	20 f4       	brcc	.+8      	; 0x9b0 <__fp_mpack_finite+0xc>
 9a8:	87 95       	ror	r24
 9aa:	77 95       	ror	r23
 9ac:	67 95       	ror	r22
 9ae:	b7 95       	ror	r27
 9b0:	88 0f       	add	r24, r24
 9b2:	91 1d       	adc	r25, r1
 9b4:	96 95       	lsr	r25
 9b6:	87 95       	ror	r24
 9b8:	97 f9       	bld	r25, 7
 9ba:	08 95       	ret

000009bc <__fp_nan>:
 9bc:	9f ef       	ldi	r25, 0xFF	; 255
 9be:	80 ec       	ldi	r24, 0xC0	; 192
 9c0:	08 95       	ret

000009c2 <__fp_pscA>:
 9c2:	00 24       	eor	r0, r0
 9c4:	0a 94       	dec	r0
 9c6:	16 16       	cp	r1, r22
 9c8:	17 06       	cpc	r1, r23
 9ca:	18 06       	cpc	r1, r24
 9cc:	09 06       	cpc	r0, r25
 9ce:	08 95       	ret

000009d0 <__fp_pscB>:
 9d0:	00 24       	eor	r0, r0
 9d2:	0a 94       	dec	r0
 9d4:	12 16       	cp	r1, r18
 9d6:	13 06       	cpc	r1, r19
 9d8:	14 06       	cpc	r1, r20
 9da:	05 06       	cpc	r0, r21
 9dc:	08 95       	ret

000009de <__fp_round>:
 9de:	09 2e       	mov	r0, r25
 9e0:	03 94       	inc	r0
 9e2:	00 0c       	add	r0, r0
 9e4:	11 f4       	brne	.+4      	; 0x9ea <__fp_round+0xc>
 9e6:	88 23       	and	r24, r24
 9e8:	52 f0       	brmi	.+20     	; 0x9fe <__fp_round+0x20>
 9ea:	bb 0f       	add	r27, r27
 9ec:	40 f4       	brcc	.+16     	; 0x9fe <__fp_round+0x20>
 9ee:	bf 2b       	or	r27, r31
 9f0:	11 f4       	brne	.+4      	; 0x9f6 <__fp_round+0x18>
 9f2:	60 ff       	sbrs	r22, 0
 9f4:	04 c0       	rjmp	.+8      	; 0x9fe <__fp_round+0x20>
 9f6:	6f 5f       	subi	r22, 0xFF	; 255
 9f8:	7f 4f       	sbci	r23, 0xFF	; 255
 9fa:	8f 4f       	sbci	r24, 0xFF	; 255
 9fc:	9f 4f       	sbci	r25, 0xFF	; 255
 9fe:	08 95       	ret

00000a00 <__fp_split3>:
 a00:	57 fd       	sbrc	r21, 7
 a02:	90 58       	subi	r25, 0x80	; 128
 a04:	44 0f       	add	r20, r20
 a06:	55 1f       	adc	r21, r21
 a08:	59 f0       	breq	.+22     	; 0xa20 <__fp_splitA+0x10>
 a0a:	5f 3f       	cpi	r21, 0xFF	; 255
 a0c:	71 f0       	breq	.+28     	; 0xa2a <__fp_splitA+0x1a>
 a0e:	47 95       	ror	r20

00000a10 <__fp_splitA>:
 a10:	88 0f       	add	r24, r24
 a12:	97 fb       	bst	r25, 7
 a14:	99 1f       	adc	r25, r25
 a16:	61 f0       	breq	.+24     	; 0xa30 <__fp_splitA+0x20>
 a18:	9f 3f       	cpi	r25, 0xFF	; 255
 a1a:	79 f0       	breq	.+30     	; 0xa3a <__fp_splitA+0x2a>
 a1c:	87 95       	ror	r24
 a1e:	08 95       	ret
 a20:	12 16       	cp	r1, r18
 a22:	13 06       	cpc	r1, r19
 a24:	14 06       	cpc	r1, r20
 a26:	55 1f       	adc	r21, r21
 a28:	f2 cf       	rjmp	.-28     	; 0xa0e <__fp_split3+0xe>
 a2a:	46 95       	lsr	r20
 a2c:	f1 df       	rcall	.-30     	; 0xa10 <__fp_splitA>
 a2e:	08 c0       	rjmp	.+16     	; 0xa40 <__fp_splitA+0x30>
 a30:	16 16       	cp	r1, r22
 a32:	17 06       	cpc	r1, r23
 a34:	18 06       	cpc	r1, r24
 a36:	99 1f       	adc	r25, r25
 a38:	f1 cf       	rjmp	.-30     	; 0xa1c <__fp_splitA+0xc>
 a3a:	86 95       	lsr	r24
 a3c:	71 05       	cpc	r23, r1
 a3e:	61 05       	cpc	r22, r1
 a40:	08 94       	sec
 a42:	08 95       	ret

00000a44 <__fp_zero>:
 a44:	e8 94       	clt

00000a46 <__fp_szero>:
 a46:	bb 27       	eor	r27, r27
 a48:	66 27       	eor	r22, r22
 a4a:	77 27       	eor	r23, r23
 a4c:	cb 01       	movw	r24, r22
 a4e:	97 f9       	bld	r25, 7
 a50:	08 95       	ret

00000a52 <__mulsf3>:
 a52:	0e 94 3c 05 	call	0xa78	; 0xa78 <__mulsf3x>
 a56:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_round>
 a5a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fp_pscA>
 a5e:	38 f0       	brcs	.+14     	; 0xa6e <__mulsf3+0x1c>
 a60:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__fp_pscB>
 a64:	20 f0       	brcs	.+8      	; 0xa6e <__mulsf3+0x1c>
 a66:	95 23       	and	r25, r21
 a68:	11 f0       	breq	.+4      	; 0xa6e <__mulsf3+0x1c>
 a6a:	0c 94 ca 04 	jmp	0x994	; 0x994 <__fp_inf>
 a6e:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_nan>
 a72:	11 24       	eor	r1, r1
 a74:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>

00000a78 <__mulsf3x>:
 a78:	0e 94 00 05 	call	0xa00	; 0xa00 <__fp_split3>
 a7c:	70 f3       	brcs	.-36     	; 0xa5a <__mulsf3+0x8>

00000a7e <__mulsf3_pse>:
 a7e:	95 9f       	mul	r25, r21
 a80:	c1 f3       	breq	.-16     	; 0xa72 <__mulsf3+0x20>
 a82:	95 0f       	add	r25, r21
 a84:	50 e0       	ldi	r21, 0x00	; 0
 a86:	55 1f       	adc	r21, r21
 a88:	62 9f       	mul	r22, r18
 a8a:	f0 01       	movw	r30, r0
 a8c:	72 9f       	mul	r23, r18
 a8e:	bb 27       	eor	r27, r27
 a90:	f0 0d       	add	r31, r0
 a92:	b1 1d       	adc	r27, r1
 a94:	63 9f       	mul	r22, r19
 a96:	aa 27       	eor	r26, r26
 a98:	f0 0d       	add	r31, r0
 a9a:	b1 1d       	adc	r27, r1
 a9c:	aa 1f       	adc	r26, r26
 a9e:	64 9f       	mul	r22, r20
 aa0:	66 27       	eor	r22, r22
 aa2:	b0 0d       	add	r27, r0
 aa4:	a1 1d       	adc	r26, r1
 aa6:	66 1f       	adc	r22, r22
 aa8:	82 9f       	mul	r24, r18
 aaa:	22 27       	eor	r18, r18
 aac:	b0 0d       	add	r27, r0
 aae:	a1 1d       	adc	r26, r1
 ab0:	62 1f       	adc	r22, r18
 ab2:	73 9f       	mul	r23, r19
 ab4:	b0 0d       	add	r27, r0
 ab6:	a1 1d       	adc	r26, r1
 ab8:	62 1f       	adc	r22, r18
 aba:	83 9f       	mul	r24, r19
 abc:	a0 0d       	add	r26, r0
 abe:	61 1d       	adc	r22, r1
 ac0:	22 1f       	adc	r18, r18
 ac2:	74 9f       	mul	r23, r20
 ac4:	33 27       	eor	r19, r19
 ac6:	a0 0d       	add	r26, r0
 ac8:	61 1d       	adc	r22, r1
 aca:	23 1f       	adc	r18, r19
 acc:	84 9f       	mul	r24, r20
 ace:	60 0d       	add	r22, r0
 ad0:	21 1d       	adc	r18, r1
 ad2:	82 2f       	mov	r24, r18
 ad4:	76 2f       	mov	r23, r22
 ad6:	6a 2f       	mov	r22, r26
 ad8:	11 24       	eor	r1, r1
 ada:	9f 57       	subi	r25, 0x7F	; 127
 adc:	50 40       	sbci	r21, 0x00	; 0
 ade:	9a f0       	brmi	.+38     	; 0xb06 <__mulsf3_pse+0x88>
 ae0:	f1 f0       	breq	.+60     	; 0xb1e <__mulsf3_pse+0xa0>
 ae2:	88 23       	and	r24, r24
 ae4:	4a f0       	brmi	.+18     	; 0xaf8 <__mulsf3_pse+0x7a>
 ae6:	ee 0f       	add	r30, r30
 ae8:	ff 1f       	adc	r31, r31
 aea:	bb 1f       	adc	r27, r27
 aec:	66 1f       	adc	r22, r22
 aee:	77 1f       	adc	r23, r23
 af0:	88 1f       	adc	r24, r24
 af2:	91 50       	subi	r25, 0x01	; 1
 af4:	50 40       	sbci	r21, 0x00	; 0
 af6:	a9 f7       	brne	.-22     	; 0xae2 <__mulsf3_pse+0x64>
 af8:	9e 3f       	cpi	r25, 0xFE	; 254
 afa:	51 05       	cpc	r21, r1
 afc:	80 f0       	brcs	.+32     	; 0xb1e <__mulsf3_pse+0xa0>
 afe:	0c 94 ca 04 	jmp	0x994	; 0x994 <__fp_inf>
 b02:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__fp_szero>
 b06:	5f 3f       	cpi	r21, 0xFF	; 255
 b08:	e4 f3       	brlt	.-8      	; 0xb02 <__mulsf3_pse+0x84>
 b0a:	98 3e       	cpi	r25, 0xE8	; 232
 b0c:	d4 f3       	brlt	.-12     	; 0xb02 <__mulsf3_pse+0x84>
 b0e:	86 95       	lsr	r24
 b10:	77 95       	ror	r23
 b12:	67 95       	ror	r22
 b14:	b7 95       	ror	r27
 b16:	f7 95       	ror	r31
 b18:	e7 95       	ror	r30
 b1a:	9f 5f       	subi	r25, 0xFF	; 255
 b1c:	c1 f7       	brne	.-16     	; 0xb0e <__mulsf3_pse+0x90>
 b1e:	fe 2b       	or	r31, r30
 b20:	88 0f       	add	r24, r24
 b22:	91 1d       	adc	r25, r1
 b24:	96 95       	lsr	r25
 b26:	87 95       	ror	r24
 b28:	97 f9       	bld	r25, 7
 b2a:	08 95       	ret

00000b2c <malloc>:
 b2c:	cf 93       	push	r28
 b2e:	df 93       	push	r29
 b30:	82 30       	cpi	r24, 0x02	; 2
 b32:	91 05       	cpc	r25, r1
 b34:	10 f4       	brcc	.+4      	; 0xb3a <malloc+0xe>
 b36:	82 e0       	ldi	r24, 0x02	; 2
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	e0 91 87 00 	lds	r30, 0x0087
 b3e:	f0 91 88 00 	lds	r31, 0x0088
 b42:	20 e0       	ldi	r18, 0x00	; 0
 b44:	30 e0       	ldi	r19, 0x00	; 0
 b46:	c0 e0       	ldi	r28, 0x00	; 0
 b48:	d0 e0       	ldi	r29, 0x00	; 0
 b4a:	30 97       	sbiw	r30, 0x00	; 0
 b4c:	11 f1       	breq	.+68     	; 0xb92 <malloc+0x66>
 b4e:	40 81       	ld	r20, Z
 b50:	51 81       	ldd	r21, Z+1	; 0x01
 b52:	48 17       	cp	r20, r24
 b54:	59 07       	cpc	r21, r25
 b56:	c0 f0       	brcs	.+48     	; 0xb88 <malloc+0x5c>
 b58:	48 17       	cp	r20, r24
 b5a:	59 07       	cpc	r21, r25
 b5c:	61 f4       	brne	.+24     	; 0xb76 <malloc+0x4a>
 b5e:	82 81       	ldd	r24, Z+2	; 0x02
 b60:	93 81       	ldd	r25, Z+3	; 0x03
 b62:	20 97       	sbiw	r28, 0x00	; 0
 b64:	19 f0       	breq	.+6      	; 0xb6c <malloc+0x40>
 b66:	9b 83       	std	Y+3, r25	; 0x03
 b68:	8a 83       	std	Y+2, r24	; 0x02
 b6a:	2b c0       	rjmp	.+86     	; 0xbc2 <malloc+0x96>
 b6c:	90 93 88 00 	sts	0x0088, r25
 b70:	80 93 87 00 	sts	0x0087, r24
 b74:	26 c0       	rjmp	.+76     	; 0xbc2 <malloc+0x96>
 b76:	21 15       	cp	r18, r1
 b78:	31 05       	cpc	r19, r1
 b7a:	19 f0       	breq	.+6      	; 0xb82 <malloc+0x56>
 b7c:	42 17       	cp	r20, r18
 b7e:	53 07       	cpc	r21, r19
 b80:	18 f4       	brcc	.+6      	; 0xb88 <malloc+0x5c>
 b82:	9a 01       	movw	r18, r20
 b84:	be 01       	movw	r22, r28
 b86:	df 01       	movw	r26, r30
 b88:	ef 01       	movw	r28, r30
 b8a:	02 80       	ldd	r0, Z+2	; 0x02
 b8c:	f3 81       	ldd	r31, Z+3	; 0x03
 b8e:	e0 2d       	mov	r30, r0
 b90:	dc cf       	rjmp	.-72     	; 0xb4a <malloc+0x1e>
 b92:	21 15       	cp	r18, r1
 b94:	31 05       	cpc	r19, r1
 b96:	09 f1       	breq	.+66     	; 0xbda <malloc+0xae>
 b98:	28 1b       	sub	r18, r24
 b9a:	39 0b       	sbc	r19, r25
 b9c:	24 30       	cpi	r18, 0x04	; 4
 b9e:	31 05       	cpc	r19, r1
 ba0:	90 f4       	brcc	.+36     	; 0xbc6 <malloc+0x9a>
 ba2:	12 96       	adiw	r26, 0x02	; 2
 ba4:	8d 91       	ld	r24, X+
 ba6:	9c 91       	ld	r25, X
 ba8:	13 97       	sbiw	r26, 0x03	; 3
 baa:	61 15       	cp	r22, r1
 bac:	71 05       	cpc	r23, r1
 bae:	21 f0       	breq	.+8      	; 0xbb8 <malloc+0x8c>
 bb0:	fb 01       	movw	r30, r22
 bb2:	93 83       	std	Z+3, r25	; 0x03
 bb4:	82 83       	std	Z+2, r24	; 0x02
 bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <malloc+0x94>
 bb8:	90 93 88 00 	sts	0x0088, r25
 bbc:	80 93 87 00 	sts	0x0087, r24
 bc0:	fd 01       	movw	r30, r26
 bc2:	32 96       	adiw	r30, 0x02	; 2
 bc4:	44 c0       	rjmp	.+136    	; 0xc4e <malloc+0x122>
 bc6:	fd 01       	movw	r30, r26
 bc8:	e2 0f       	add	r30, r18
 bca:	f3 1f       	adc	r31, r19
 bcc:	81 93       	st	Z+, r24
 bce:	91 93       	st	Z+, r25
 bd0:	22 50       	subi	r18, 0x02	; 2
 bd2:	31 09       	sbc	r19, r1
 bd4:	2d 93       	st	X+, r18
 bd6:	3c 93       	st	X, r19
 bd8:	3a c0       	rjmp	.+116    	; 0xc4e <malloc+0x122>
 bda:	20 91 85 00 	lds	r18, 0x0085
 bde:	30 91 86 00 	lds	r19, 0x0086
 be2:	23 2b       	or	r18, r19
 be4:	41 f4       	brne	.+16     	; 0xbf6 <malloc+0xca>
 be6:	20 91 7a 00 	lds	r18, 0x007A
 bea:	30 91 7b 00 	lds	r19, 0x007B
 bee:	30 93 86 00 	sts	0x0086, r19
 bf2:	20 93 85 00 	sts	0x0085, r18
 bf6:	20 91 78 00 	lds	r18, 0x0078
 bfa:	30 91 79 00 	lds	r19, 0x0079
 bfe:	21 15       	cp	r18, r1
 c00:	31 05       	cpc	r19, r1
 c02:	41 f4       	brne	.+16     	; 0xc14 <malloc+0xe8>
 c04:	2d b7       	in	r18, 0x3d	; 61
 c06:	3e b7       	in	r19, 0x3e	; 62
 c08:	40 91 7c 00 	lds	r20, 0x007C
 c0c:	50 91 7d 00 	lds	r21, 0x007D
 c10:	24 1b       	sub	r18, r20
 c12:	35 0b       	sbc	r19, r21
 c14:	e0 91 85 00 	lds	r30, 0x0085
 c18:	f0 91 86 00 	lds	r31, 0x0086
 c1c:	e2 17       	cp	r30, r18
 c1e:	f3 07       	cpc	r31, r19
 c20:	a0 f4       	brcc	.+40     	; 0xc4a <malloc+0x11e>
 c22:	2e 1b       	sub	r18, r30
 c24:	3f 0b       	sbc	r19, r31
 c26:	28 17       	cp	r18, r24
 c28:	39 07       	cpc	r19, r25
 c2a:	78 f0       	brcs	.+30     	; 0xc4a <malloc+0x11e>
 c2c:	ac 01       	movw	r20, r24
 c2e:	4e 5f       	subi	r20, 0xFE	; 254
 c30:	5f 4f       	sbci	r21, 0xFF	; 255
 c32:	24 17       	cp	r18, r20
 c34:	35 07       	cpc	r19, r21
 c36:	48 f0       	brcs	.+18     	; 0xc4a <malloc+0x11e>
 c38:	4e 0f       	add	r20, r30
 c3a:	5f 1f       	adc	r21, r31
 c3c:	50 93 86 00 	sts	0x0086, r21
 c40:	40 93 85 00 	sts	0x0085, r20
 c44:	81 93       	st	Z+, r24
 c46:	91 93       	st	Z+, r25
 c48:	02 c0       	rjmp	.+4      	; 0xc4e <malloc+0x122>
 c4a:	e0 e0       	ldi	r30, 0x00	; 0
 c4c:	f0 e0       	ldi	r31, 0x00	; 0
 c4e:	cf 01       	movw	r24, r30
 c50:	df 91       	pop	r29
 c52:	cf 91       	pop	r28
 c54:	08 95       	ret

00000c56 <free>:
 c56:	0f 93       	push	r16
 c58:	1f 93       	push	r17
 c5a:	cf 93       	push	r28
 c5c:	df 93       	push	r29
 c5e:	00 97       	sbiw	r24, 0x00	; 0
 c60:	09 f4       	brne	.+2      	; 0xc64 <free+0xe>
 c62:	8c c0       	rjmp	.+280    	; 0xd7c <free+0x126>
 c64:	fc 01       	movw	r30, r24
 c66:	32 97       	sbiw	r30, 0x02	; 2
 c68:	13 82       	std	Z+3, r1	; 0x03
 c6a:	12 82       	std	Z+2, r1	; 0x02
 c6c:	00 91 87 00 	lds	r16, 0x0087
 c70:	10 91 88 00 	lds	r17, 0x0088
 c74:	01 15       	cp	r16, r1
 c76:	11 05       	cpc	r17, r1
 c78:	81 f4       	brne	.+32     	; 0xc9a <free+0x44>
 c7a:	20 81       	ld	r18, Z
 c7c:	31 81       	ldd	r19, Z+1	; 0x01
 c7e:	82 0f       	add	r24, r18
 c80:	93 1f       	adc	r25, r19
 c82:	20 91 85 00 	lds	r18, 0x0085
 c86:	30 91 86 00 	lds	r19, 0x0086
 c8a:	28 17       	cp	r18, r24
 c8c:	39 07       	cpc	r19, r25
 c8e:	79 f5       	brne	.+94     	; 0xcee <free+0x98>
 c90:	f0 93 86 00 	sts	0x0086, r31
 c94:	e0 93 85 00 	sts	0x0085, r30
 c98:	71 c0       	rjmp	.+226    	; 0xd7c <free+0x126>
 c9a:	d8 01       	movw	r26, r16
 c9c:	40 e0       	ldi	r20, 0x00	; 0
 c9e:	50 e0       	ldi	r21, 0x00	; 0
 ca0:	ae 17       	cp	r26, r30
 ca2:	bf 07       	cpc	r27, r31
 ca4:	50 f4       	brcc	.+20     	; 0xcba <free+0x64>
 ca6:	12 96       	adiw	r26, 0x02	; 2
 ca8:	2d 91       	ld	r18, X+
 caa:	3c 91       	ld	r19, X
 cac:	13 97       	sbiw	r26, 0x03	; 3
 cae:	ad 01       	movw	r20, r26
 cb0:	21 15       	cp	r18, r1
 cb2:	31 05       	cpc	r19, r1
 cb4:	09 f1       	breq	.+66     	; 0xcf8 <free+0xa2>
 cb6:	d9 01       	movw	r26, r18
 cb8:	f3 cf       	rjmp	.-26     	; 0xca0 <free+0x4a>
 cba:	9d 01       	movw	r18, r26
 cbc:	da 01       	movw	r26, r20
 cbe:	33 83       	std	Z+3, r19	; 0x03
 cc0:	22 83       	std	Z+2, r18	; 0x02
 cc2:	60 81       	ld	r22, Z
 cc4:	71 81       	ldd	r23, Z+1	; 0x01
 cc6:	86 0f       	add	r24, r22
 cc8:	97 1f       	adc	r25, r23
 cca:	82 17       	cp	r24, r18
 ccc:	93 07       	cpc	r25, r19
 cce:	69 f4       	brne	.+26     	; 0xcea <free+0x94>
 cd0:	ec 01       	movw	r28, r24
 cd2:	28 81       	ld	r18, Y
 cd4:	39 81       	ldd	r19, Y+1	; 0x01
 cd6:	26 0f       	add	r18, r22
 cd8:	37 1f       	adc	r19, r23
 cda:	2e 5f       	subi	r18, 0xFE	; 254
 cdc:	3f 4f       	sbci	r19, 0xFF	; 255
 cde:	31 83       	std	Z+1, r19	; 0x01
 ce0:	20 83       	st	Z, r18
 ce2:	8a 81       	ldd	r24, Y+2	; 0x02
 ce4:	9b 81       	ldd	r25, Y+3	; 0x03
 ce6:	93 83       	std	Z+3, r25	; 0x03
 ce8:	82 83       	std	Z+2, r24	; 0x02
 cea:	45 2b       	or	r20, r21
 cec:	29 f4       	brne	.+10     	; 0xcf8 <free+0xa2>
 cee:	f0 93 88 00 	sts	0x0088, r31
 cf2:	e0 93 87 00 	sts	0x0087, r30
 cf6:	42 c0       	rjmp	.+132    	; 0xd7c <free+0x126>
 cf8:	13 96       	adiw	r26, 0x03	; 3
 cfa:	fc 93       	st	X, r31
 cfc:	ee 93       	st	-X, r30
 cfe:	12 97       	sbiw	r26, 0x02	; 2
 d00:	ed 01       	movw	r28, r26
 d02:	49 91       	ld	r20, Y+
 d04:	59 91       	ld	r21, Y+
 d06:	9e 01       	movw	r18, r28
 d08:	24 0f       	add	r18, r20
 d0a:	35 1f       	adc	r19, r21
 d0c:	e2 17       	cp	r30, r18
 d0e:	f3 07       	cpc	r31, r19
 d10:	71 f4       	brne	.+28     	; 0xd2e <free+0xd8>
 d12:	80 81       	ld	r24, Z
 d14:	91 81       	ldd	r25, Z+1	; 0x01
 d16:	84 0f       	add	r24, r20
 d18:	95 1f       	adc	r25, r21
 d1a:	02 96       	adiw	r24, 0x02	; 2
 d1c:	11 96       	adiw	r26, 0x01	; 1
 d1e:	9c 93       	st	X, r25
 d20:	8e 93       	st	-X, r24
 d22:	82 81       	ldd	r24, Z+2	; 0x02
 d24:	93 81       	ldd	r25, Z+3	; 0x03
 d26:	13 96       	adiw	r26, 0x03	; 3
 d28:	9c 93       	st	X, r25
 d2a:	8e 93       	st	-X, r24
 d2c:	12 97       	sbiw	r26, 0x02	; 2
 d2e:	e0 e0       	ldi	r30, 0x00	; 0
 d30:	f0 e0       	ldi	r31, 0x00	; 0
 d32:	d8 01       	movw	r26, r16
 d34:	12 96       	adiw	r26, 0x02	; 2
 d36:	8d 91       	ld	r24, X+
 d38:	9c 91       	ld	r25, X
 d3a:	13 97       	sbiw	r26, 0x03	; 3
 d3c:	00 97       	sbiw	r24, 0x00	; 0
 d3e:	19 f0       	breq	.+6      	; 0xd46 <free+0xf0>
 d40:	f8 01       	movw	r30, r16
 d42:	8c 01       	movw	r16, r24
 d44:	f6 cf       	rjmp	.-20     	; 0xd32 <free+0xdc>
 d46:	8d 91       	ld	r24, X+
 d48:	9c 91       	ld	r25, X
 d4a:	98 01       	movw	r18, r16
 d4c:	2e 5f       	subi	r18, 0xFE	; 254
 d4e:	3f 4f       	sbci	r19, 0xFF	; 255
 d50:	82 0f       	add	r24, r18
 d52:	93 1f       	adc	r25, r19
 d54:	20 91 85 00 	lds	r18, 0x0085
 d58:	30 91 86 00 	lds	r19, 0x0086
 d5c:	28 17       	cp	r18, r24
 d5e:	39 07       	cpc	r19, r25
 d60:	69 f4       	brne	.+26     	; 0xd7c <free+0x126>
 d62:	30 97       	sbiw	r30, 0x00	; 0
 d64:	29 f4       	brne	.+10     	; 0xd70 <free+0x11a>
 d66:	10 92 88 00 	sts	0x0088, r1
 d6a:	10 92 87 00 	sts	0x0087, r1
 d6e:	02 c0       	rjmp	.+4      	; 0xd74 <free+0x11e>
 d70:	13 82       	std	Z+3, r1	; 0x03
 d72:	12 82       	std	Z+2, r1	; 0x02
 d74:	10 93 86 00 	sts	0x0086, r17
 d78:	00 93 85 00 	sts	0x0085, r16
 d7c:	df 91       	pop	r29
 d7e:	cf 91       	pop	r28
 d80:	1f 91       	pop	r17
 d82:	0f 91       	pop	r16
 d84:	08 95       	ret

00000d86 <_exit>:
 d86:	f8 94       	cli

00000d88 <__stop_program>:
 d88:	ff cf       	rjmp	.-2      	; 0xd88 <__stop_program>
