
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000123c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  0000123c  000012d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080008e  0080008e  000012fe  2**0
                  ALLOC
  3 .stab         00001d28  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001118  00000000  00000000  00003028  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004140  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004154  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__divsf3_pse+0x4>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	ec e3       	ldi	r30, 0x3C	; 60
      ea:	f2 e1       	ldi	r31, 0x12	; 18
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	ae 38       	cpi	r26, 0x8E	; 142
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	ae e8       	ldi	r26, 0x8E	; 142
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a2 39       	cpi	r26, 0x92	; 146
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 b2 03 	call	0x764	; 0x764 <main>
     10c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <KPD_u8GetPressedKey>:
/*              pressed at the same time                               	     		   */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
u8 KPD_u8GetPressedKey(void)
{
     114:	df 92       	push	r13
     116:	ef 92       	push	r14
     118:	ff 92       	push	r15
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	9e e7       	ldi	r25, 0x7E	; 126
     124:	e9 2e       	mov	r14, r25
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	f9 2e       	mov	r15, r25

  u8 LOC_u8Row;
  u8 LOC_u8Retrun = NOT_PRESSED;
  do{
  /* Initialize the switch status to NOT Pressed                                                                     */
   LOC_u8Retrun = NOT_PRESSED;
     12a:	de e4       	ldi	r29, 0x4E	; 78

  /* Looping on columns of the Key Pad                                                                               */
  for (LOC_u8Column = 0 + COL_INIT; LOC_u8Column < COL_FIN; LOC_u8Column++)
     12c:	c0 e0       	ldi	r28, 0x00	; 0
  {
    /* Activate the Column                                                                                           */
    DIO_SetPinValue(PORT, LOC_u8Column, LOW);
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	6c 2f       	mov	r22, r28
     132:	83 e0       	ldi	r24, 0x03	; 3
     134:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_SetPinValue>
     138:	00 e0       	ldi	r16, 0x00	; 0
     13a:	10 e0       	ldi	r17, 0x00	; 0
     13c:	84 e0       	ldi	r24, 0x04	; 4
     13e:	d8 2e       	mov	r13, r24
     140:	d0 0e       	add	r13, r16

    /* Loop on the rows of the Key Pad                                                                               */
    for (LOC_u8Row = 0 + ROW_INIT; LOC_u8Row < ROW_FIN; LOC_u8Row++)
    {
      /* Check the status of the switch                                                                              */
      if (!DIO_GetPinValue(PORT, LOC_u8Row))
     142:	6d 2d       	mov	r22, r13
     144:	83 e0       	ldi	r24, 0x03	; 3
     146:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_GetPinValue>
     14a:	81 11       	cpse	r24, r1
     14c:	10 c0       	rjmp	.+32     	; 0x16e <KPD_u8GetPressedKey+0x5a>
     14e:	f7 01       	movw	r30, r14
     150:	e0 0f       	add	r30, r16
     152:	f1 1f       	adc	r31, r17
      {
        /* Get the value of the currently pressed switch                                                             */
        LOC_u8Retrun = KPD_au8SwitchVal[LOC_u8Column - COL_INIT][LOC_u8Row - ROW_INIT];
     154:	d0 81       	ld	r29, Z

        /* Wait until the switch is released (Single Press)                                                          */
        while (!DIO_GetPinValue(PORT, LOC_u8Row))
     156:	6d 2d       	mov	r22, r13
     158:	83 e0       	ldi	r24, 0x03	; 3
     15a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_GetPinValue>
     15e:	88 23       	and	r24, r24
     160:	d1 f3       	breq	.-12     	; 0x156 <KPD_u8GetPressedKey+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     162:	8f e1       	ldi	r24, 0x1F	; 31
     164:	9e e4       	ldi	r25, 0x4E	; 78
     166:	01 97       	sbiw	r24, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <KPD_u8GetPressedKey+0x52>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <KPD_u8GetPressedKey+0x58>
     16c:	00 00       	nop
     16e:	0f 5f       	subi	r16, 0xFF	; 255
     170:	1f 4f       	sbci	r17, 0xFF	; 255
  {
    /* Activate the Column                                                                                           */
    DIO_SetPinValue(PORT, LOC_u8Column, LOW);

    /* Loop on the rows of the Key Pad                                                                               */
    for (LOC_u8Row = 0 + ROW_INIT; LOC_u8Row < ROW_FIN; LOC_u8Row++)
     172:	04 30       	cpi	r16, 0x04	; 4
     174:	11 05       	cpc	r17, r1
     176:	11 f7       	brne	.-60     	; 0x13c <KPD_u8GetPressedKey+0x28>

      }
    }

    /* Deactivate the Column                                                                                         */
    DIO_SetPinValue(PORT, LOC_u8Column, HIGH);
     178:	41 e0       	ldi	r20, 0x01	; 1
     17a:	6c 2f       	mov	r22, r28
     17c:	83 e0       	ldi	r24, 0x03	; 3
     17e:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_SetPinValue>
  do{
  /* Initialize the switch status to NOT Pressed                                                                     */
   LOC_u8Retrun = NOT_PRESSED;

  /* Looping on columns of the Key Pad                                                                               */
  for (LOC_u8Column = 0 + COL_INIT; LOC_u8Column < COL_FIN; LOC_u8Column++)
     182:	cf 5f       	subi	r28, 0xFF	; 255
     184:	94 e0       	ldi	r25, 0x04	; 4
     186:	e9 0e       	add	r14, r25
     188:	f1 1c       	adc	r15, r1
     18a:	c4 30       	cpi	r28, 0x04	; 4
     18c:	81 f6       	brne	.-96     	; 0x12e <KPD_u8GetPressedKey+0x1a>
    }

    /* Deactivate the Column                                                                                         */
    DIO_SetPinValue(PORT, LOC_u8Column, HIGH);
  }
  }while(LOC_u8Retrun == NOT_PRESSED);
     18e:	de 34       	cpi	r29, 0x4E	; 78
     190:	41 f2       	breq	.-112    	; 0x122 <KPD_u8GetPressedKey+0xe>
  return LOC_u8Retrun;
}
     192:	8d 2f       	mov	r24, r29
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	df 90       	pop	r13
     1a2:	08 95       	ret

000001a4 <LCD_cmd>:

void LCD_cmd(u8 cmd)
{


DIO_SetPortValue(LCD_DATA,cmd);
     1a4:	68 2f       	mov	r22, r24
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_SetPortValue>
DIO_SetPortValue(ctrl,(0<<rs)|(0<<rw)|(1<<en));
     1ac:	64 e0       	ldi	r22, 0x04	; 4
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_SetPortValue>
     1b4:	8f ec       	ldi	r24, 0xCF	; 207
     1b6:	97 e0       	ldi	r25, 0x07	; 7
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_cmd+0x14>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_cmd+0x1a>
     1be:	00 00       	nop
_delay_ms(1);
DIO_SetPortValue(ctrl,(0<<rs)|(0<<rw)|(0<<en));
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_SetPortValue>
     1c8:	9f e7       	ldi	r25, 0x7F	; 127
     1ca:	28 e3       	ldi	r18, 0x38	; 56
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	91 50       	subi	r25, 0x01	; 1
     1d0:	20 40       	sbci	r18, 0x00	; 0
     1d2:	80 40       	sbci	r24, 0x00	; 0
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <LCD_cmd+0x2a>
     1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_cmd+0x34>
     1d8:	00 00       	nop
     1da:	08 95       	ret

000001dc <init_LCD>:
#include "DIO_int.h"
#include "lcd_int.h"

void init_LCD(void)
{
DIO_SetPortDirection(LCD_DDR,0xff);
     1dc:	6f ef       	ldi	r22, 0xFF	; 255
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	0e 94 19 02 	call	0x432	; 0x432 <DIO_SetPortDirection>
DIO_SetPortDirection(ctrl_DDR,0x07);
     1e4:	67 e0       	ldi	r22, 0x07	; 7
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	0e 94 19 02 	call	0x432	; 0x432 <DIO_SetPortDirection>
LCD_cmd(0x38);                            // initialization of 16X2 LCD in 8bit mode
     1ec:	88 e3       	ldi	r24, 0x38	; 56
     1ee:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     1f2:	8f ec       	ldi	r24, 0xCF	; 207
     1f4:	97 e0       	ldi	r25, 0x07	; 7
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <init_LCD+0x1a>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <init_LCD+0x20>
     1fc:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x01);                                 // clear LCD
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     204:	8f ec       	ldi	r24, 0xCF	; 207
     206:	97 e0       	ldi	r25, 0x07	; 7
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <init_LCD+0x2c>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <init_LCD+0x32>
     20e:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x0E);                        // cursor ON
     210:	8e e0       	ldi	r24, 0x0E	; 14
     212:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     216:	8f ec       	ldi	r24, 0xCF	; 207
     218:	97 e0       	ldi	r25, 0x07	; 7
     21a:	01 97       	sbiw	r24, 0x01	; 1
     21c:	f1 f7       	brne	.-4      	; 0x21a <init_LCD+0x3e>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <init_LCD+0x44>
     220:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x80);                     // —8 go to first line and –0 is for 0th position
     222:	80 e8       	ldi	r24, 0x80	; 128
     224:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     228:	8f ec       	ldi	r24, 0xCF	; 207
     22a:	97 e0       	ldi	r25, 0x07	; 7
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <init_LCD+0x50>
     230:	00 c0       	rjmp	.+0      	; 0x232 <init_LCD+0x56>
     232:	00 00       	nop
     234:	08 95       	ret

00000236 <LCD_write>:
}

void LCD_write(u8 data)
{

DIO_SetPortValue(LCD_DATA,data);
     236:	68 2f       	mov	r22, r24
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_SetPortValue>
DIO_SetPortValue(ctrl,(1<<rs)|(0<<rw)|(1<<en));
     23e:	65 e0       	ldi	r22, 0x05	; 5
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_SetPortValue>
     246:	8f ec       	ldi	r24, 0xCF	; 207
     248:	97 e0       	ldi	r25, 0x07	; 7
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_write+0x14>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_write+0x1a>
     250:	00 00       	nop
_delay_ms(1);
DIO_SetPortValue(ctrl, (1<<rs)|(0<<rw)|(0<<en));
     252:	61 e0       	ldi	r22, 0x01	; 1
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_SetPortValue>
     25a:	9f e7       	ldi	r25, 0x7F	; 127
     25c:	28 e3       	ldi	r18, 0x38	; 56
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	91 50       	subi	r25, 0x01	; 1
     262:	20 40       	sbci	r18, 0x00	; 0
     264:	80 40       	sbci	r24, 0x00	; 0
     266:	e1 f7       	brne	.-8      	; 0x260 <LCD_write+0x2a>
     268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_write+0x34>
     26a:	00 00       	nop
     26c:	08 95       	ret

0000026e <LCD_write_string>:
return ;

}

void LCD_write_string(u8 *str)             //store address value of the string in pointer *str
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
int i=0;
while(str[i]!='\0')                               // loop will go on till the NULL character in the string
     274:	89 91       	ld	r24, Y+
     276:	88 23       	and	r24, r24
     278:	19 f0       	breq	.+6      	; 0x280 <LCD_write_string+0x12>
{
LCD_write(str[i]);                            // sending data on LCD byte by byte
     27a:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_write>
     27e:	fa cf       	rjmp	.-12     	; 0x274 <LCD_write_string+0x6>
i++;
}
return;
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <LCD_write_int>:

void LCD_write_int(s16 number){
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	18 2f       	mov	r17, r24
     294:	09 2f       	mov	r16, r25

s16 num=number;
     296:	68 2f       	mov	r22, r24
     298:	79 2f       	mov	r23, r25
s16 digits=0;
     29a:	c0 e0       	ldi	r28, 0x00	; 0
     29c:	d0 e0       	ldi	r29, 0x00	; 0
s16 index;
while(num>0){
digits++;
num/=10;
     29e:	ea e0       	ldi	r30, 0x0A	; 10
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	ce 01       	movw	r24, r28
     2a4:	01 96       	adiw	r24, 0x01	; 1
void LCD_write_int(s16 number){

s16 num=number;
s16 digits=0;
s16 index;
while(num>0){
     2a6:	16 16       	cp	r1, r22
     2a8:	17 06       	cpc	r1, r23
     2aa:	34 f4       	brge	.+12     	; 0x2b8 <LCD_write_int+0x32>
     2ac:	ec 01       	movw	r28, r24
digits++;
num/=10;
     2ae:	cb 01       	movw	r24, r22
     2b0:	bf 01       	movw	r22, r30
     2b2:	0e 94 b5 03 	call	0x76a	; 0x76a <__divmodhi4>
     2b6:	f5 cf       	rjmp	.-22     	; 0x2a2 <LCD_write_int+0x1c>
}
index=digits-1;
u8 * arr=malloc((digits+1)* sizeof(u8));
     2b8:	0e 94 ef 07 	call	0xfde	; 0xfde <malloc>
     2bc:	fc 01       	movw	r30, r24
while(index>=0){
     2be:	9e 01       	movw	r18, r28
s16 rem=number%10;
     2c0:	8a e0       	ldi	r24, 0x0A	; 10
     2c2:	e8 2e       	mov	r14, r24
     2c4:	f1 2c       	mov	r15, r1
     2c6:	21 50       	subi	r18, 0x01	; 1
     2c8:	31 09       	sbc	r19, r1
digits++;
num/=10;
}
index=digits-1;
u8 * arr=malloc((digits+1)* sizeof(u8));
while(index>=0){
     2ca:	37 fd       	sbrc	r19, 7
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <LCD_write_int+0x62>
s16 rem=number%10;
number=number/10;
     2ce:	81 2f       	mov	r24, r17
     2d0:	90 2f       	mov	r25, r16
     2d2:	b7 01       	movw	r22, r14
     2d4:	0e 94 b5 03 	call	0x76a	; 0x76a <__divmodhi4>
     2d8:	16 2f       	mov	r17, r22
     2da:	07 2f       	mov	r16, r23
     2dc:	df 01       	movw	r26, r30
     2de:	a2 0f       	add	r26, r18
     2e0:	b3 1f       	adc	r27, r19
arr[index--]=rem+'0';
     2e2:	80 5d       	subi	r24, 0xD0	; 208
     2e4:	8c 93       	st	X, r24
     2e6:	ef cf       	rjmp	.-34     	; 0x2c6 <LCD_write_int+0x40>
}
arr[digits]='\0';
     2e8:	ce 0f       	add	r28, r30
     2ea:	df 1f       	adc	r29, r31
     2ec:	18 82       	st	Y, r1
LCD_write_string(arr);
     2ee:	cf 01       	movw	r24, r30

}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
s16 rem=number%10;
number=number/10;
arr[index--]=rem+'0';
}
arr[digits]='\0';
LCD_write_string(arr);
     2fc:	0c 94 37 01 	jmp	0x26e	; 0x26e <LCD_write_string>

00000300 <LCD_write_double>:

}

void LCD_write_double(f64 number){
     300:	cf 92       	push	r12
     302:	df 92       	push	r13
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	6b 01       	movw	r12, r22
     30a:	7c 01       	movw	r14, r24

s16 num=(s16)number;
     30c:	0e 94 c1 04 	call	0x982	; 0x982 <__fixsfsi>

LCD_write_int(num);
     310:	cb 01       	movw	r24, r22
     312:	0e 94 43 01 	call	0x286	; 0x286 <LCD_write_int>
LCD_write('.');
     316:	8e e2       	ldi	r24, 0x2E	; 46
     318:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_write>
s16 factor=(s16)(fmod( number, 1.0 )*100);
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	40 e8       	ldi	r20, 0x80	; 128
     322:	5f e3       	ldi	r21, 0x3F	; 63
     324:	c7 01       	movw	r24, r14
     326:	b6 01       	movw	r22, r12
     328:	0e 94 3f 05 	call	0xa7e	; 0xa7e <fmod>
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	48 ec       	ldi	r20, 0xC8	; 200
     332:	52 e4       	ldi	r21, 0x42	; 66
     334:	0e 94 0b 06 	call	0xc16	; 0xc16 <__mulsf3>
     338:	0e 94 c1 04 	call	0x982	; 0x982 <__fixsfsi>
LCD_write_int(factor);
     33c:	cb 01       	movw	r24, r22

}
     33e:	ff 90       	pop	r15
     340:	ef 90       	pop	r14
     342:	df 90       	pop	r13
     344:	cf 90       	pop	r12
s16 num=(s16)number;

LCD_write_int(num);
LCD_write('.');
s16 factor=(s16)(fmod( number, 1.0 )*100);
LCD_write_int(factor);
     346:	0c 94 43 01 	jmp	0x286	; 0x286 <LCD_write_int>

0000034a <DIO_SetPinValue>:

/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	58 f5       	brcc	.+86     	; 0x3a4 <DIO_SetPinValue+0x5a>
     34e:	68 30       	cpi	r22, 0x08	; 8
     350:	48 f5       	brcc	.+82     	; 0x3a4 <DIO_SetPinValue+0x5a>
	{
		if (u8PinValCopy == HIGH)
     352:	41 30       	cpi	r20, 0x01	; 1
     354:	91 f4       	brne	.+36     	; 0x37a <DIO_SetPinValue+0x30>
		{
			SET_BIT(*DIO_OutRegisters[u8PortIdCopy],u8PinIdCopy);
     356:	e8 2f       	mov	r30, r24
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	ee 0f       	add	r30, r30
     35c:	ff 1f       	adc	r31, r31
     35e:	e0 59       	subi	r30, 0x90	; 144
     360:	ff 4f       	sbci	r31, 0xFF	; 255
     362:	01 90       	ld	r0, Z+
     364:	f0 81       	ld	r31, Z
     366:	e0 2d       	mov	r30, r0
     368:	20 81       	ld	r18, Z
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	01 c0       	rjmp	.+2      	; 0x372 <DIO_SetPinValue+0x28>
     370:	88 0f       	add	r24, r24
     372:	6a 95       	dec	r22
     374:	ea f7       	brpl	.-6      	; 0x370 <DIO_SetPinValue+0x26>
     376:	82 2b       	or	r24, r18
     378:	14 c0       	rjmp	.+40     	; 0x3a2 <DIO_SetPinValue+0x58>
		}
		
		else if (u8PinValCopy == LOW)
     37a:	41 11       	cpse	r20, r1
     37c:	13 c0       	rjmp	.+38     	; 0x3a4 <DIO_SetPinValue+0x5a>
		{
			CLR_BIT(*DIO_OutRegisters[u8PortIdCopy],u8PinIdCopy);	
     37e:	e8 2f       	mov	r30, r24
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	ee 0f       	add	r30, r30
     384:	ff 1f       	adc	r31, r31
     386:	e0 59       	subi	r30, 0x90	; 144
     388:	ff 4f       	sbci	r31, 0xFF	; 255
     38a:	01 90       	ld	r0, Z+
     38c:	f0 81       	ld	r31, Z
     38e:	e0 2d       	mov	r30, r0
     390:	20 81       	ld	r18, Z
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	01 c0       	rjmp	.+2      	; 0x39a <DIO_SetPinValue+0x50>
     398:	88 0f       	add	r24, r24
     39a:	6a 95       	dec	r22
     39c:	ea f7       	brpl	.-6      	; 0x398 <DIO_SetPinValue+0x4e>
     39e:	80 95       	com	r24
     3a0:	82 23       	and	r24, r18
     3a2:	80 83       	st	Z, r24
     3a4:	08 95       	ret

000003a6 <DIO_GetPinValue>:
u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     3a6:	84 30       	cpi	r24, 0x04	; 4
     3a8:	a0 f4       	brcc	.+40     	; 0x3d2 <DIO_GetPinValue+0x2c>
     3aa:	68 30       	cpi	r22, 0x08	; 8
     3ac:	90 f4       	brcc	.+36     	; 0x3d2 <DIO_GetPinValue+0x2c>
	{
		u8ResultLocal= GET_BIT(*DIO_InRegisters[u8PortIdCopy],u8PinIdCopy);
     3ae:	e8 2f       	mov	r30, r24
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	ee 0f       	add	r30, r30
     3b4:	ff 1f       	adc	r31, r31
     3b6:	e8 59       	subi	r30, 0x98	; 152
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	01 90       	ld	r0, Z+
     3bc:	f0 81       	ld	r31, Z
     3be:	e0 2d       	mov	r30, r0
     3c0:	80 81       	ld	r24, Z
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_GetPinValue+0x24>
     3c6:	95 95       	asr	r25
     3c8:	87 95       	ror	r24
     3ca:	6a 95       	dec	r22
     3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_GetPinValue+0x20>
     3ce:	81 70       	andi	r24, 0x01	; 1
     3d0:	08 95       	ret
	}
	
	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
     3d2:	8f ef       	ldi	r24, 0xFF	; 255
	}
	
	return u8ResultLocal;
}
     3d4:	08 95       	ret

000003d6 <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
     3d6:	84 30       	cpi	r24, 0x04	; 4
     3d8:	58 f5       	brcc	.+86     	; 0x430 <DIO_SetPinDirection+0x5a>
     3da:	68 30       	cpi	r22, 0x08	; 8
     3dc:	48 f5       	brcc	.+82     	; 0x430 <DIO_SetPinDirection+0x5a>
	{
		if ( u8PinDirCopy == OUTPUT )
     3de:	41 30       	cpi	r20, 0x01	; 1
     3e0:	91 f4       	brne	.+36     	; 0x406 <DIO_SetPinDirection+0x30>
		{
			SET_BIT(*DIO_DirRegisters[u8PortIdCopy],u8PinIdCopy);		
     3e2:	e8 2f       	mov	r30, r24
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	ee 0f       	add	r30, r30
     3e8:	ff 1f       	adc	r31, r31
     3ea:	e0 5a       	subi	r30, 0xA0	; 160
     3ec:	ff 4f       	sbci	r31, 0xFF	; 255
     3ee:	01 90       	ld	r0, Z+
     3f0:	f0 81       	ld	r31, Z
     3f2:	e0 2d       	mov	r30, r0
     3f4:	20 81       	ld	r18, Z
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <DIO_SetPinDirection+0x28>
     3fc:	88 0f       	add	r24, r24
     3fe:	6a 95       	dec	r22
     400:	ea f7       	brpl	.-6      	; 0x3fc <DIO_SetPinDirection+0x26>
     402:	82 2b       	or	r24, r18
     404:	14 c0       	rjmp	.+40     	; 0x42e <DIO_SetPinDirection+0x58>
		}
		
		else if ( u8PinDirCopy == INPUT )
     406:	41 11       	cpse	r20, r1
     408:	13 c0       	rjmp	.+38     	; 0x430 <DIO_SetPinDirection+0x5a>
		{
			CLR_BIT(*DIO_DirRegisters[u8PortIdCopy],u8PinIdCopy);
     40a:	e8 2f       	mov	r30, r24
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	ee 0f       	add	r30, r30
     410:	ff 1f       	adc	r31, r31
     412:	e0 5a       	subi	r30, 0xA0	; 160
     414:	ff 4f       	sbci	r31, 0xFF	; 255
     416:	01 90       	ld	r0, Z+
     418:	f0 81       	ld	r31, Z
     41a:	e0 2d       	mov	r30, r0
     41c:	20 81       	ld	r18, Z
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	01 c0       	rjmp	.+2      	; 0x426 <DIO_SetPinDirection+0x50>
     424:	88 0f       	add	r24, r24
     426:	6a 95       	dec	r22
     428:	ea f7       	brpl	.-6      	; 0x424 <DIO_SetPinDirection+0x4e>
     42a:	80 95       	com	r24
     42c:	82 23       	and	r24, r18
     42e:	80 83       	st	Z, r24
     430:	08 95       	ret

00000432 <DIO_SetPortDirection>:

/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
	/* Check on the Required PORT Number */
	if (u8PortId <= PORTD)
     432:	84 30       	cpi	r24, 0x04	; 4
     434:	50 f4       	brcc	.+20     	; 0x44a <DIO_SetPortDirection+0x18>
	{
		*DIO_DirRegisters[u8PortId] = u8PortDir;
     436:	e8 2f       	mov	r30, r24
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	ee 0f       	add	r30, r30
     43c:	ff 1f       	adc	r31, r31
     43e:	e0 5a       	subi	r30, 0xA0	; 160
     440:	ff 4f       	sbci	r31, 0xFF	; 255
     442:	01 90       	ld	r0, Z+
     444:	f0 81       	ld	r31, Z
     446:	e0 2d       	mov	r30, r0
     448:	60 83       	st	Z, r22
     44a:	08 95       	ret

0000044c <DIO_SetPortValue>:
}

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
	/* Check on the Required PORT Number */
	if (u8PortId <= PORTD)
     44c:	84 30       	cpi	r24, 0x04	; 4
     44e:	50 f4       	brcc	.+20     	; 0x464 <DIO_SetPortValue+0x18>
	{
		*DIO_OutRegisters[u8PortId] = u8PortVal;
     450:	e8 2f       	mov	r30, r24
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	ee 0f       	add	r30, r30
     456:	ff 1f       	adc	r31, r31
     458:	e0 59       	subi	r30, 0x90	; 144
     45a:	ff 4f       	sbci	r31, 0xFF	; 255
     45c:	01 90       	ld	r0, Z+
     45e:	f0 81       	ld	r31, Z
     460:	e0 2d       	mov	r30, r0
     462:	60 83       	st	Z, r22
     464:	08 95       	ret

00000466 <arr_char_to_int>:
/* this fuction transfers array of char to integer
   input:array of u8
   output:s16

*/
s16 arr_char_to_int(u8 * arr){
     466:	8f 92       	push	r8
     468:	9f 92       	push	r9
     46a:	af 92       	push	r10
     46c:	bf 92       	push	r11
     46e:	df 92       	push	r13
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	00 d0       	rcall	.+0      	; 0x47e <arr_char_to_int+0x18>
     47e:	00 d0       	rcall	.+0      	; 0x480 <arr_char_to_int+0x1a>
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	7c 01       	movw	r14, r24
s16 index=0;

s16 rank;
while(arr[index]!='\0')
     486:	fc 01       	movw	r30, r24
     488:	8f 01       	movw	r16, r30
     48a:	0e 19       	sub	r16, r14
     48c:	1f 09       	sbc	r17, r15
     48e:	81 91       	ld	r24, Z+
     490:	81 11       	cpse	r24, r1
     492:	fa cf       	rjmp	.-12     	; 0x488 <arr_char_to_int+0x22>
}

rank=index;
index=0;
s16 number;
s16 sum=0;
     494:	a1 2c       	mov	r10, r1
     496:	b1 2c       	mov	r11, r1
while(arr[index]!='\0')
     498:	f7 01       	movw	r30, r14
     49a:	d1 90       	ld	r13, Z+
     49c:	7f 01       	movw	r14, r30
     49e:	dd 20       	and	r13, r13
     4a0:	c9 f1       	breq	.+114    	; 0x514 <arr_char_to_int+0xae>
{number=arr[index]-'0';
sum+=number*(pow(10,rank-1));
     4a2:	01 50       	subi	r16, 0x01	; 1
     4a4:	11 09       	sbc	r17, r1
     4a6:	b8 01       	movw	r22, r16
     4a8:	01 2e       	mov	r0, r17
     4aa:	00 0c       	add	r0, r0
     4ac:	88 0b       	sbc	r24, r24
     4ae:	99 0b       	sbc	r25, r25
     4b0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatsisf>
     4b4:	9b 01       	movw	r18, r22
     4b6:	ac 01       	movw	r20, r24
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	80 e2       	ldi	r24, 0x20	; 32
     4be:	91 e4       	ldi	r25, 0x41	; 65
     4c0:	0e 94 78 06 	call	0xcf0	; 0xcf0 <pow>
     4c4:	9b 01       	movw	r18, r22
     4c6:	ac 01       	movw	r20, r24
     4c8:	b5 01       	movw	r22, r10
     4ca:	bb 0c       	add	r11, r11
     4cc:	88 0b       	sbc	r24, r24
     4ce:	99 0b       	sbc	r25, r25
     4d0:	29 83       	std	Y+1, r18	; 0x01
     4d2:	3a 83       	std	Y+2, r19	; 0x02
     4d4:	4b 83       	std	Y+3, r20	; 0x03
     4d6:	5c 83       	std	Y+4, r21	; 0x04
     4d8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatsisf>
     4dc:	4b 01       	movw	r8, r22
     4de:	5c 01       	movw	r10, r24
rank=index;
index=0;
s16 number;
s16 sum=0;
while(arr[index]!='\0')
{number=arr[index]-'0';
     4e0:	6d 2d       	mov	r22, r13
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	60 53       	subi	r22, 0x30	; 48
     4e6:	71 09       	sbc	r23, r1
sum+=number*(pow(10,rank-1));
     4e8:	07 2e       	mov	r0, r23
     4ea:	00 0c       	add	r0, r0
     4ec:	88 0b       	sbc	r24, r24
     4ee:	99 0b       	sbc	r25, r25
     4f0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatsisf>
     4f4:	29 81       	ldd	r18, Y+1	; 0x01
     4f6:	3a 81       	ldd	r19, Y+2	; 0x02
     4f8:	4b 81       	ldd	r20, Y+3	; 0x03
     4fa:	5c 81       	ldd	r21, Y+4	; 0x04
     4fc:	0e 94 0b 06 	call	0xc16	; 0xc16 <__mulsf3>
     500:	9b 01       	movw	r18, r22
     502:	ac 01       	movw	r20, r24
     504:	c5 01       	movw	r24, r10
     506:	b4 01       	movw	r22, r8
     508:	0e 94 de 03 	call	0x7bc	; 0x7bc <__addsf3>
     50c:	0e 94 c1 04 	call	0x982	; 0x982 <__fixsfsi>
     510:	5b 01       	movw	r10, r22
     512:	c2 cf       	rjmp	.-124    	; 0x498 <arr_char_to_int+0x32>
index++;
rank--;
}
return sum;
}
     514:	c5 01       	movw	r24, r10
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	df 90       	pop	r13
     52c:	bf 90       	pop	r11
     52e:	af 90       	pop	r10
     530:	9f 90       	pop	r9
     532:	8f 90       	pop	r8
     534:	08 95       	ret

00000536 <calculate>:
  input:two array of u8 (argument),operation u8
  output: the result f64

 */

f64 calculate(u8 * first_arg,u8 * sec_arg,u8 op){
     536:	af 92       	push	r10
     538:	bf 92       	push	r11
     53a:	cf 92       	push	r12
     53c:	df 92       	push	r13
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	1f 92       	push	r1
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	7b 01       	movw	r14, r22
s16 first=arr_char_to_int(first_arg);
     552:	49 83       	std	Y+1, r20	; 0x01
     554:	0e 94 33 02 	call	0x466	; 0x466 <arr_char_to_int>
     558:	8c 01       	movw	r16, r24
s16 second=arr_char_to_int(sec_arg);
     55a:	c7 01       	movw	r24, r14
     55c:	0e 94 33 02 	call	0x466	; 0x466 <arr_char_to_int>
     560:	5c 01       	movw	r10, r24
switch(op){
     562:	49 81       	ldd	r20, Y+1	; 0x01
     564:	4d 32       	cpi	r20, 0x2D	; 45
     566:	01 f1       	breq	.+64     	; 0x5a8 <calculate+0x72>
     568:	30 f4       	brcc	.+12     	; 0x576 <calculate+0x40>
     56a:	4b 32       	cpi	r20, 0x2B	; 43
     56c:	e1 f5       	brne	.+120    	; 0x5e6 <calculate+0xb0>
case '+':
  return first+second;
     56e:	b8 01       	movw	r22, r16
     570:	68 0f       	add	r22, r24
     572:	79 1f       	adc	r23, r25
     574:	1c c0       	rjmp	.+56     	; 0x5ae <calculate+0x78>
 */

f64 calculate(u8 * first_arg,u8 * sec_arg,u8 op){
s16 first=arr_char_to_int(first_arg);
s16 second=arr_char_to_int(sec_arg);
switch(op){
     576:	4f 32       	cpi	r20, 0x2F	; 47
     578:	09 f1       	breq	.+66     	; 0x5bc <calculate+0x86>
     57a:	48 37       	cpi	r20, 0x78	; 120
     57c:	a1 f5       	brne	.+104    	; 0x5e6 <calculate+0xb0>
case '+':
  return first+second;
case '-':
  return first-second;
case 'x':
  return (1.00*first)*(1.00*second);
     57e:	b8 01       	movw	r22, r16
     580:	11 0f       	add	r17, r17
     582:	88 0b       	sbc	r24, r24
     584:	99 0b       	sbc	r25, r25
     586:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatsisf>
     58a:	6b 01       	movw	r12, r22
     58c:	7c 01       	movw	r14, r24
     58e:	b5 01       	movw	r22, r10
     590:	bb 0c       	add	r11, r11
     592:	88 0b       	sbc	r24, r24
     594:	99 0b       	sbc	r25, r25
     596:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatsisf>
     59a:	9b 01       	movw	r18, r22
     59c:	ac 01       	movw	r20, r24
     59e:	c7 01       	movw	r24, r14
     5a0:	b6 01       	movw	r22, r12
     5a2:	0e 94 0b 06 	call	0xc16	; 0xc16 <__mulsf3>
     5a6:	23 c0       	rjmp	.+70     	; 0x5ee <calculate+0xb8>
s16 second=arr_char_to_int(sec_arg);
switch(op){
case '+':
  return first+second;
case '-':
  return first-second;
     5a8:	b8 01       	movw	r22, r16
     5aa:	68 1b       	sub	r22, r24
     5ac:	79 0b       	sbc	r23, r25
     5ae:	07 2e       	mov	r0, r23
     5b0:	00 0c       	add	r0, r0
     5b2:	88 0b       	sbc	r24, r24
     5b4:	99 0b       	sbc	r25, r25
     5b6:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatsisf>
     5ba:	19 c0       	rjmp	.+50     	; 0x5ee <calculate+0xb8>
case 'x':
  return (1.00*first)*(1.00*second);
case '/':
  return (1.00*first)/(1.00*second);
     5bc:	b8 01       	movw	r22, r16
     5be:	11 0f       	add	r17, r17
     5c0:	88 0b       	sbc	r24, r24
     5c2:	99 0b       	sbc	r25, r25
     5c4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatsisf>
     5c8:	6b 01       	movw	r12, r22
     5ca:	7c 01       	movw	r14, r24
     5cc:	b5 01       	movw	r22, r10
     5ce:	bb 0c       	add	r11, r11
     5d0:	88 0b       	sbc	r24, r24
     5d2:	99 0b       	sbc	r25, r25
     5d4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatsisf>
     5d8:	9b 01       	movw	r18, r22
     5da:	ac 01       	movw	r20, r24
     5dc:	c7 01       	movw	r24, r14
     5de:	b6 01       	movw	r22, r12
     5e0:	0e 94 4f 04 	call	0x89e	; 0x89e <__divsf3>
     5e4:	04 c0       	rjmp	.+8      	; 0x5ee <calculate+0xb8>

}
return -5;
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	80 ea       	ldi	r24, 0xA0	; 160
     5ec:	90 ec       	ldi	r25, 0xC0	; 192
}
     5ee:	0f 90       	pop	r0
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	bf 90       	pop	r11
     602:	af 90       	pop	r10
     604:	08 95       	ret

00000606 <calculator>:
     606:	0e 94 ee 00 	call	0x1dc	; 0x1dc <init_LCD>
     60a:	2f e7       	ldi	r18, 0x7F	; 127
     60c:	88 e3       	ldi	r24, 0x38	; 56
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	21 50       	subi	r18, 0x01	; 1
     612:	80 40       	sbci	r24, 0x00	; 0
     614:	90 40       	sbci	r25, 0x00	; 0
     616:	e1 f7       	brne	.-8      	; 0x610 <calculator+0xa>
     618:	00 c0       	rjmp	.+0      	; 0x61a <calculator+0x14>
     61a:	00 00       	nop
     61c:	8a e0       	ldi	r24, 0x0A	; 10
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 ef 07 	call	0xfde	; 0xfde <malloc>
     624:	6c 01       	movw	r12, r24
     626:	8a e0       	ldi	r24, 0x0A	; 10
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 ef 07 	call	0xfde	; 0xfde <malloc>
     62e:	5c 01       	movw	r10, r24
     630:	6f e0       	ldi	r22, 0x0F	; 15
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	0e 94 19 02 	call	0x432	; 0x432 <DIO_SetPortDirection>
     638:	6f ef       	ldi	r22, 0xFF	; 255
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_SetPortValue>
     640:	c0 e0       	ldi	r28, 0x00	; 0
     642:	d0 e0       	ldi	r29, 0x00	; 0
     644:	e1 2c       	mov	r14, r1
     646:	f1 2c       	mov	r15, r1
     648:	00 e0       	ldi	r16, 0x00	; 0
     64a:	10 e0       	ldi	r17, 0x00	; 0
     64c:	0e 94 8a 00 	call	0x114	; 0x114 <KPD_u8GetPressedKey>
     650:	98 2f       	mov	r25, r24
     652:	8b 7f       	andi	r24, 0xFB	; 251
     654:	8b 32       	cpi	r24, 0x2B	; 43
     656:	01 f1       	breq	.+64     	; 0x698 <calculator+0x92>
     658:	89 2f       	mov	r24, r25
     65a:	8f 7e       	andi	r24, 0xEF	; 239
     65c:	8d 32       	cpi	r24, 0x2D	; 45
     65e:	e1 f0       	breq	.+56     	; 0x698 <calculator+0x92>
     660:	98 37       	cpi	r25, 0x78	; 120
     662:	d1 f0       	breq	.+52     	; 0x698 <calculator+0x92>
     664:	93 36       	cpi	r25, 0x63	; 99
     666:	c1 f0       	breq	.+48     	; 0x698 <calculator+0x92>
     668:	20 97       	sbiw	r28, 0x00	; 0
     66a:	51 f4       	brne	.+20     	; 0x680 <calculator+0x7a>
     66c:	f8 01       	movw	r30, r16
     66e:	0f 5f       	subi	r16, 0xFF	; 255
     670:	1f 4f       	sbci	r17, 0xFF	; 255
     672:	ec 0d       	add	r30, r12
     674:	fd 1d       	adc	r31, r13
     676:	90 83       	st	Z, r25
     678:	f6 01       	movw	r30, r12
     67a:	e0 0f       	add	r30, r16
     67c:	f1 1f       	adc	r31, r17
     67e:	0a c0       	rjmp	.+20     	; 0x694 <calculator+0x8e>
     680:	f7 01       	movw	r30, r14
     682:	2f ef       	ldi	r18, 0xFF	; 255
     684:	e2 1a       	sub	r14, r18
     686:	f2 0a       	sbc	r15, r18
     688:	ea 0d       	add	r30, r10
     68a:	fb 1d       	adc	r31, r11
     68c:	90 83       	st	Z, r25
     68e:	f5 01       	movw	r30, r10
     690:	ee 0d       	add	r30, r14
     692:	ff 1d       	adc	r31, r15
     694:	10 82       	st	Z, r1
     696:	4c c0       	rjmp	.+152    	; 0x730 <calculator+0x12a>
     698:	86 ed       	ldi	r24, 0xD6	; 214
     69a:	89 0f       	add	r24, r25
     69c:	82 30       	cpi	r24, 0x02	; 2
     69e:	08 f4       	brcc	.+2      	; 0x6a2 <calculator+0x9c>
     6a0:	5d c0       	rjmp	.+186    	; 0x75c <calculator+0x156>
     6a2:	9d 32       	cpi	r25, 0x2D	; 45
     6a4:	e1 f1       	breq	.+120    	; 0x71e <calculator+0x118>
     6a6:	98 37       	cpi	r25, 0x78	; 120
     6a8:	e9 f1       	breq	.+122    	; 0x724 <calculator+0x11e>
     6aa:	9f 32       	cpi	r25, 0x2F	; 47
     6ac:	f1 f1       	breq	.+124    	; 0x72a <calculator+0x124>
     6ae:	9d 33       	cpi	r25, 0x3D	; 61
     6b0:	81 f5       	brne	.+96     	; 0x712 <calculator+0x10c>
     6b2:	49 2d       	mov	r20, r9
     6b4:	b5 01       	movw	r22, r10
     6b6:	c6 01       	movw	r24, r12
     6b8:	0e 94 9b 02 	call	0x536	; 0x536 <calculate>
     6bc:	2b 01       	movw	r4, r22
     6be:	3c 01       	movw	r6, r24
     6c0:	8d e3       	ldi	r24, 0x3D	; 61
     6c2:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_write>
     6c6:	84 e1       	ldi	r24, 0x14	; 20
     6c8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	a9 01       	movw	r20, r18
     6d2:	c3 01       	movw	r24, r6
     6d4:	b2 01       	movw	r22, r4
     6d6:	0e 94 4a 04 	call	0x894	; 0x894 <__cmpsf2>
     6da:	87 ff       	sbrs	r24, 7
     6dc:	0a c0       	rjmp	.+20     	; 0x6f2 <calculator+0xec>
     6de:	8d e2       	ldi	r24, 0x2D	; 45
     6e0:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_write>
     6e4:	84 e1       	ldi	r24, 0x14	; 20
     6e6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     6ea:	77 fa       	bst	r7, 7
     6ec:	70 94       	com	r7
     6ee:	77 f8       	bld	r7, 7
     6f0:	70 94       	com	r7
     6f2:	c3 01       	movw	r24, r6
     6f4:	b2 01       	movw	r22, r4
     6f6:	0e 94 80 01 	call	0x300	; 0x300 <LCD_write_double>
     6fa:	8f ef       	ldi	r24, 0xFF	; 255
     6fc:	93 ed       	ldi	r25, 0xD3	; 211
     6fe:	20 e3       	ldi	r18, 0x30	; 48
     700:	81 50       	subi	r24, 0x01	; 1
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	20 40       	sbci	r18, 0x00	; 0
     706:	e1 f7       	brne	.-8      	; 0x700 <calculator+0xfa>
     708:	00 c0       	rjmp	.+0      	; 0x70a <calculator+0x104>
     70a:	00 00       	nop
     70c:	c0 e0       	ldi	r28, 0x00	; 0
     70e:	d0 e0       	ldi	r29, 0x00	; 0
     710:	9d cf       	rjmp	.-198    	; 0x64c <calculator+0x46>
     712:	93 36       	cpi	r25, 0x63	; 99
     714:	69 f4       	brne	.+26     	; 0x730 <calculator+0x12a>
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     71c:	93 cf       	rjmp	.-218    	; 0x644 <calculator+0x3e>
     71e:	3d e2       	ldi	r19, 0x2D	; 45
     720:	93 2e       	mov	r9, r19
     722:	1d c0       	rjmp	.+58     	; 0x75e <calculator+0x158>
     724:	28 e7       	ldi	r18, 0x78	; 120
     726:	92 2e       	mov	r9, r18
     728:	1a c0       	rjmp	.+52     	; 0x75e <calculator+0x158>
     72a:	8f e2       	ldi	r24, 0x2F	; 47
     72c:	98 2e       	mov	r9, r24
     72e:	17 c0       	rjmp	.+46     	; 0x75e <calculator+0x158>
     730:	9d 33       	cpi	r25, 0x3D	; 61
     732:	09 f4       	brne	.+2      	; 0x736 <calculator+0x130>
     734:	8b cf       	rjmp	.-234    	; 0x64c <calculator+0x46>
     736:	89 2f       	mov	r24, r25
     738:	0e 94 1b 01 	call	0x236	; 0x236 <LCD_write>
     73c:	84 e1       	ldi	r24, 0x14	; 20
     73e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     742:	80 e1       	ldi	r24, 0x10	; 16
     744:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_cmd>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	93 ed       	ldi	r25, 0xD3	; 211
     74c:	20 e3       	ldi	r18, 0x30	; 48
     74e:	81 50       	subi	r24, 0x01	; 1
     750:	90 40       	sbci	r25, 0x00	; 0
     752:	20 40       	sbci	r18, 0x00	; 0
     754:	e1 f7       	brne	.-8      	; 0x74e <calculator+0x148>
     756:	00 c0       	rjmp	.+0      	; 0x758 <calculator+0x152>
     758:	00 00       	nop
     75a:	78 cf       	rjmp	.-272    	; 0x64c <calculator+0x46>
     75c:	99 2e       	mov	r9, r25
     75e:	c1 e0       	ldi	r28, 0x01	; 1
     760:	d0 e0       	ldi	r29, 0x00	; 0
     762:	e9 cf       	rjmp	.-46     	; 0x736 <calculator+0x130>

00000764 <main>:
#include "calculator_int.h"

int main(void){

calculator();
     764:	0e 94 03 03 	call	0x606	; 0x606 <calculator>
while(1){

}
     768:	ff cf       	rjmp	.-2      	; 0x768 <main+0x4>

0000076a <__divmodhi4>:
     76a:	97 fb       	bst	r25, 7
     76c:	07 2e       	mov	r0, r23
     76e:	16 f4       	brtc	.+4      	; 0x774 <__divmodhi4+0xa>
     770:	00 94       	com	r0
     772:	07 d0       	rcall	.+14     	; 0x782 <__divmodhi4_neg1>
     774:	77 fd       	sbrc	r23, 7
     776:	09 d0       	rcall	.+18     	; 0x78a <__divmodhi4_neg2>
     778:	0e 94 c9 03 	call	0x792	; 0x792 <__udivmodhi4>
     77c:	07 fc       	sbrc	r0, 7
     77e:	05 d0       	rcall	.+10     	; 0x78a <__divmodhi4_neg2>
     780:	3e f4       	brtc	.+14     	; 0x790 <__divmodhi4_exit>

00000782 <__divmodhi4_neg1>:
     782:	90 95       	com	r25
     784:	81 95       	neg	r24
     786:	9f 4f       	sbci	r25, 0xFF	; 255
     788:	08 95       	ret

0000078a <__divmodhi4_neg2>:
     78a:	70 95       	com	r23
     78c:	61 95       	neg	r22
     78e:	7f 4f       	sbci	r23, 0xFF	; 255

00000790 <__divmodhi4_exit>:
     790:	08 95       	ret

00000792 <__udivmodhi4>:
     792:	aa 1b       	sub	r26, r26
     794:	bb 1b       	sub	r27, r27
     796:	51 e1       	ldi	r21, 0x11	; 17
     798:	07 c0       	rjmp	.+14     	; 0x7a8 <__udivmodhi4_ep>

0000079a <__udivmodhi4_loop>:
     79a:	aa 1f       	adc	r26, r26
     79c:	bb 1f       	adc	r27, r27
     79e:	a6 17       	cp	r26, r22
     7a0:	b7 07       	cpc	r27, r23
     7a2:	10 f0       	brcs	.+4      	; 0x7a8 <__udivmodhi4_ep>
     7a4:	a6 1b       	sub	r26, r22
     7a6:	b7 0b       	sbc	r27, r23

000007a8 <__udivmodhi4_ep>:
     7a8:	88 1f       	adc	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	5a 95       	dec	r21
     7ae:	a9 f7       	brne	.-22     	; 0x79a <__udivmodhi4_loop>
     7b0:	80 95       	com	r24
     7b2:	90 95       	com	r25
     7b4:	bc 01       	movw	r22, r24
     7b6:	cd 01       	movw	r24, r26
     7b8:	08 95       	ret

000007ba <__subsf3>:
     7ba:	50 58       	subi	r21, 0x80	; 128

000007bc <__addsf3>:
     7bc:	bb 27       	eor	r27, r27
     7be:	aa 27       	eor	r26, r26
     7c0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__addsf3x>
     7c4:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__fp_round>
     7c8:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fp_pscA>
     7cc:	38 f0       	brcs	.+14     	; 0x7dc <__addsf3+0x20>
     7ce:	0e 94 ca 05 	call	0xb94	; 0xb94 <__fp_pscB>
     7d2:	20 f0       	brcs	.+8      	; 0x7dc <__addsf3+0x20>
     7d4:	39 f4       	brne	.+14     	; 0x7e4 <__addsf3+0x28>
     7d6:	9f 3f       	cpi	r25, 0xFF	; 255
     7d8:	19 f4       	brne	.+6      	; 0x7e0 <__addsf3+0x24>
     7da:	26 f4       	brtc	.+8      	; 0x7e4 <__addsf3+0x28>
     7dc:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_nan>
     7e0:	0e f4       	brtc	.+2      	; 0x7e4 <__addsf3+0x28>
     7e2:	e0 95       	com	r30
     7e4:	e7 fb       	bst	r30, 7
     7e6:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>

000007ea <__addsf3x>:
     7ea:	e9 2f       	mov	r30, r25
     7ec:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fp_split3>
     7f0:	58 f3       	brcs	.-42     	; 0x7c8 <__addsf3+0xc>
     7f2:	ba 17       	cp	r27, r26
     7f4:	62 07       	cpc	r22, r18
     7f6:	73 07       	cpc	r23, r19
     7f8:	84 07       	cpc	r24, r20
     7fa:	95 07       	cpc	r25, r21
     7fc:	20 f0       	brcs	.+8      	; 0x806 <__addsf3x+0x1c>
     7fe:	79 f4       	brne	.+30     	; 0x81e <__addsf3x+0x34>
     800:	a6 f5       	brtc	.+104    	; 0x86a <__stack+0xb>
     802:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_zero>
     806:	0e f4       	brtc	.+2      	; 0x80a <__addsf3x+0x20>
     808:	e0 95       	com	r30
     80a:	0b 2e       	mov	r0, r27
     80c:	ba 2f       	mov	r27, r26
     80e:	a0 2d       	mov	r26, r0
     810:	0b 01       	movw	r0, r22
     812:	b9 01       	movw	r22, r18
     814:	90 01       	movw	r18, r0
     816:	0c 01       	movw	r0, r24
     818:	ca 01       	movw	r24, r20
     81a:	a0 01       	movw	r20, r0
     81c:	11 24       	eor	r1, r1
     81e:	ff 27       	eor	r31, r31
     820:	59 1b       	sub	r21, r25
     822:	99 f0       	breq	.+38     	; 0x84a <__addsf3x+0x60>
     824:	59 3f       	cpi	r21, 0xF9	; 249
     826:	50 f4       	brcc	.+20     	; 0x83c <__addsf3x+0x52>
     828:	50 3e       	cpi	r21, 0xE0	; 224
     82a:	68 f1       	brcs	.+90     	; 0x886 <__stack+0x27>
     82c:	1a 16       	cp	r1, r26
     82e:	f0 40       	sbci	r31, 0x00	; 0
     830:	a2 2f       	mov	r26, r18
     832:	23 2f       	mov	r18, r19
     834:	34 2f       	mov	r19, r20
     836:	44 27       	eor	r20, r20
     838:	58 5f       	subi	r21, 0xF8	; 248
     83a:	f3 cf       	rjmp	.-26     	; 0x822 <__addsf3x+0x38>
     83c:	46 95       	lsr	r20
     83e:	37 95       	ror	r19
     840:	27 95       	ror	r18
     842:	a7 95       	ror	r26
     844:	f0 40       	sbci	r31, 0x00	; 0
     846:	53 95       	inc	r21
     848:	c9 f7       	brne	.-14     	; 0x83c <__addsf3x+0x52>
     84a:	7e f4       	brtc	.+30     	; 0x86a <__stack+0xb>
     84c:	1f 16       	cp	r1, r31
     84e:	ba 0b       	sbc	r27, r26
     850:	62 0b       	sbc	r22, r18
     852:	73 0b       	sbc	r23, r19
     854:	84 0b       	sbc	r24, r20
     856:	ba f0       	brmi	.+46     	; 0x886 <__stack+0x27>
     858:	91 50       	subi	r25, 0x01	; 1
     85a:	a1 f0       	breq	.+40     	; 0x884 <__stack+0x25>
     85c:	ff 0f       	add	r31, r31
     85e:	bb 1f       	adc	r27, r27
     860:	66 1f       	adc	r22, r22
     862:	77 1f       	adc	r23, r23
     864:	88 1f       	adc	r24, r24
     866:	c2 f7       	brpl	.-16     	; 0x858 <__addsf3x+0x6e>
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	ba 0f       	add	r27, r26
     86c:	62 1f       	adc	r22, r18
     86e:	73 1f       	adc	r23, r19
     870:	84 1f       	adc	r24, r20
     872:	48 f4       	brcc	.+18     	; 0x886 <__stack+0x27>
     874:	87 95       	ror	r24
     876:	77 95       	ror	r23
     878:	67 95       	ror	r22
     87a:	b7 95       	ror	r27
     87c:	f7 95       	ror	r31
     87e:	9e 3f       	cpi	r25, 0xFE	; 254
     880:	08 f0       	brcs	.+2      	; 0x884 <__stack+0x25>
     882:	b0 cf       	rjmp	.-160    	; 0x7e4 <__addsf3+0x28>
     884:	93 95       	inc	r25
     886:	88 0f       	add	r24, r24
     888:	08 f0       	brcs	.+2      	; 0x88c <__stack+0x2d>
     88a:	99 27       	eor	r25, r25
     88c:	ee 0f       	add	r30, r30
     88e:	97 95       	ror	r25
     890:	87 95       	ror	r24
     892:	08 95       	ret

00000894 <__cmpsf2>:
     894:	0e 94 88 05 	call	0xb10	; 0xb10 <__fp_cmp>
     898:	08 f4       	brcc	.+2      	; 0x89c <__cmpsf2+0x8>
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	08 95       	ret

0000089e <__divsf3>:
     89e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__divsf3x>
     8a2:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__fp_round>
     8a6:	0e 94 ca 05 	call	0xb94	; 0xb94 <__fp_pscB>
     8aa:	58 f0       	brcs	.+22     	; 0x8c2 <__divsf3+0x24>
     8ac:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fp_pscA>
     8b0:	40 f0       	brcs	.+16     	; 0x8c2 <__divsf3+0x24>
     8b2:	29 f4       	brne	.+10     	; 0x8be <__divsf3+0x20>
     8b4:	5f 3f       	cpi	r21, 0xFF	; 255
     8b6:	29 f0       	breq	.+10     	; 0x8c2 <__divsf3+0x24>
     8b8:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     8bc:	51 11       	cpse	r21, r1
     8be:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_szero>
     8c2:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_nan>

000008c6 <__divsf3x>:
     8c6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fp_split3>
     8ca:	68 f3       	brcs	.-38     	; 0x8a6 <__divsf3+0x8>

000008cc <__divsf3_pse>:
     8cc:	99 23       	and	r25, r25
     8ce:	b1 f3       	breq	.-20     	; 0x8bc <__divsf3+0x1e>
     8d0:	55 23       	and	r21, r21
     8d2:	91 f3       	breq	.-28     	; 0x8b8 <__divsf3+0x1a>
     8d4:	95 1b       	sub	r25, r21
     8d6:	55 0b       	sbc	r21, r21
     8d8:	bb 27       	eor	r27, r27
     8da:	aa 27       	eor	r26, r26
     8dc:	62 17       	cp	r22, r18
     8de:	73 07       	cpc	r23, r19
     8e0:	84 07       	cpc	r24, r20
     8e2:	38 f0       	brcs	.+14     	; 0x8f2 <__divsf3_pse+0x26>
     8e4:	9f 5f       	subi	r25, 0xFF	; 255
     8e6:	5f 4f       	sbci	r21, 0xFF	; 255
     8e8:	22 0f       	add	r18, r18
     8ea:	33 1f       	adc	r19, r19
     8ec:	44 1f       	adc	r20, r20
     8ee:	aa 1f       	adc	r26, r26
     8f0:	a9 f3       	breq	.-22     	; 0x8dc <__divsf3_pse+0x10>
     8f2:	35 d0       	rcall	.+106    	; 0x95e <__divsf3_pse+0x92>
     8f4:	0e 2e       	mov	r0, r30
     8f6:	3a f0       	brmi	.+14     	; 0x906 <__divsf3_pse+0x3a>
     8f8:	e0 e8       	ldi	r30, 0x80	; 128
     8fa:	32 d0       	rcall	.+100    	; 0x960 <__divsf3_pse+0x94>
     8fc:	91 50       	subi	r25, 0x01	; 1
     8fe:	50 40       	sbci	r21, 0x00	; 0
     900:	e6 95       	lsr	r30
     902:	00 1c       	adc	r0, r0
     904:	ca f7       	brpl	.-14     	; 0x8f8 <__divsf3_pse+0x2c>
     906:	2b d0       	rcall	.+86     	; 0x95e <__divsf3_pse+0x92>
     908:	fe 2f       	mov	r31, r30
     90a:	29 d0       	rcall	.+82     	; 0x95e <__divsf3_pse+0x92>
     90c:	66 0f       	add	r22, r22
     90e:	77 1f       	adc	r23, r23
     910:	88 1f       	adc	r24, r24
     912:	bb 1f       	adc	r27, r27
     914:	26 17       	cp	r18, r22
     916:	37 07       	cpc	r19, r23
     918:	48 07       	cpc	r20, r24
     91a:	ab 07       	cpc	r26, r27
     91c:	b0 e8       	ldi	r27, 0x80	; 128
     91e:	09 f0       	breq	.+2      	; 0x922 <__divsf3_pse+0x56>
     920:	bb 0b       	sbc	r27, r27
     922:	80 2d       	mov	r24, r0
     924:	bf 01       	movw	r22, r30
     926:	ff 27       	eor	r31, r31
     928:	93 58       	subi	r25, 0x83	; 131
     92a:	5f 4f       	sbci	r21, 0xFF	; 255
     92c:	3a f0       	brmi	.+14     	; 0x93c <__divsf3_pse+0x70>
     92e:	9e 3f       	cpi	r25, 0xFE	; 254
     930:	51 05       	cpc	r21, r1
     932:	78 f0       	brcs	.+30     	; 0x952 <__divsf3_pse+0x86>
     934:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     938:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_szero>
     93c:	5f 3f       	cpi	r21, 0xFF	; 255
     93e:	e4 f3       	brlt	.-8      	; 0x938 <__divsf3_pse+0x6c>
     940:	98 3e       	cpi	r25, 0xE8	; 232
     942:	d4 f3       	brlt	.-12     	; 0x938 <__divsf3_pse+0x6c>
     944:	86 95       	lsr	r24
     946:	77 95       	ror	r23
     948:	67 95       	ror	r22
     94a:	b7 95       	ror	r27
     94c:	f7 95       	ror	r31
     94e:	9f 5f       	subi	r25, 0xFF	; 255
     950:	c9 f7       	brne	.-14     	; 0x944 <__divsf3_pse+0x78>
     952:	88 0f       	add	r24, r24
     954:	91 1d       	adc	r25, r1
     956:	96 95       	lsr	r25
     958:	87 95       	ror	r24
     95a:	97 f9       	bld	r25, 7
     95c:	08 95       	ret
     95e:	e1 e0       	ldi	r30, 0x01	; 1
     960:	66 0f       	add	r22, r22
     962:	77 1f       	adc	r23, r23
     964:	88 1f       	adc	r24, r24
     966:	bb 1f       	adc	r27, r27
     968:	62 17       	cp	r22, r18
     96a:	73 07       	cpc	r23, r19
     96c:	84 07       	cpc	r24, r20
     96e:	ba 07       	cpc	r27, r26
     970:	20 f0       	brcs	.+8      	; 0x97a <__divsf3_pse+0xae>
     972:	62 1b       	sub	r22, r18
     974:	73 0b       	sbc	r23, r19
     976:	84 0b       	sbc	r24, r20
     978:	ba 0b       	sbc	r27, r26
     97a:	ee 1f       	adc	r30, r30
     97c:	88 f7       	brcc	.-30     	; 0x960 <__divsf3_pse+0x94>
     97e:	e0 95       	com	r30
     980:	08 95       	ret

00000982 <__fixsfsi>:
     982:	0e 94 c8 04 	call	0x990	; 0x990 <__fixunssfsi>
     986:	68 94       	set
     988:	b1 11       	cpse	r27, r1
     98a:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_szero>
     98e:	08 95       	ret

00000990 <__fixunssfsi>:
     990:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__fp_splitA>
     994:	88 f0       	brcs	.+34     	; 0x9b8 <__fixunssfsi+0x28>
     996:	9f 57       	subi	r25, 0x7F	; 127
     998:	98 f0       	brcs	.+38     	; 0x9c0 <__fixunssfsi+0x30>
     99a:	b9 2f       	mov	r27, r25
     99c:	99 27       	eor	r25, r25
     99e:	b7 51       	subi	r27, 0x17	; 23
     9a0:	b0 f0       	brcs	.+44     	; 0x9ce <__fixunssfsi+0x3e>
     9a2:	e1 f0       	breq	.+56     	; 0x9dc <__fixunssfsi+0x4c>
     9a4:	66 0f       	add	r22, r22
     9a6:	77 1f       	adc	r23, r23
     9a8:	88 1f       	adc	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	1a f0       	brmi	.+6      	; 0x9b4 <__fixunssfsi+0x24>
     9ae:	ba 95       	dec	r27
     9b0:	c9 f7       	brne	.-14     	; 0x9a4 <__fixunssfsi+0x14>
     9b2:	14 c0       	rjmp	.+40     	; 0x9dc <__fixunssfsi+0x4c>
     9b4:	b1 30       	cpi	r27, 0x01	; 1
     9b6:	91 f0       	breq	.+36     	; 0x9dc <__fixunssfsi+0x4c>
     9b8:	0e 94 04 06 	call	0xc08	; 0xc08 <__fp_zero>
     9bc:	b1 e0       	ldi	r27, 0x01	; 1
     9be:	08 95       	ret
     9c0:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_zero>
     9c4:	67 2f       	mov	r22, r23
     9c6:	78 2f       	mov	r23, r24
     9c8:	88 27       	eor	r24, r24
     9ca:	b8 5f       	subi	r27, 0xF8	; 248
     9cc:	39 f0       	breq	.+14     	; 0x9dc <__fixunssfsi+0x4c>
     9ce:	b9 3f       	cpi	r27, 0xF9	; 249
     9d0:	cc f3       	brlt	.-14     	; 0x9c4 <__fixunssfsi+0x34>
     9d2:	86 95       	lsr	r24
     9d4:	77 95       	ror	r23
     9d6:	67 95       	ror	r22
     9d8:	b3 95       	inc	r27
     9da:	d9 f7       	brne	.-10     	; 0x9d2 <__fixunssfsi+0x42>
     9dc:	3e f4       	brtc	.+14     	; 0x9ec <__fixunssfsi+0x5c>
     9de:	90 95       	com	r25
     9e0:	80 95       	com	r24
     9e2:	70 95       	com	r23
     9e4:	61 95       	neg	r22
     9e6:	7f 4f       	sbci	r23, 0xFF	; 255
     9e8:	8f 4f       	sbci	r24, 0xFF	; 255
     9ea:	9f 4f       	sbci	r25, 0xFF	; 255
     9ec:	08 95       	ret

000009ee <__floatunsisf>:
     9ee:	e8 94       	clt
     9f0:	09 c0       	rjmp	.+18     	; 0xa04 <__floatsisf+0x12>

000009f2 <__floatsisf>:
     9f2:	97 fb       	bst	r25, 7
     9f4:	3e f4       	brtc	.+14     	; 0xa04 <__floatsisf+0x12>
     9f6:	90 95       	com	r25
     9f8:	80 95       	com	r24
     9fa:	70 95       	com	r23
     9fc:	61 95       	neg	r22
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
     a00:	8f 4f       	sbci	r24, 0xFF	; 255
     a02:	9f 4f       	sbci	r25, 0xFF	; 255
     a04:	99 23       	and	r25, r25
     a06:	a9 f0       	breq	.+42     	; 0xa32 <__floatsisf+0x40>
     a08:	f9 2f       	mov	r31, r25
     a0a:	96 e9       	ldi	r25, 0x96	; 150
     a0c:	bb 27       	eor	r27, r27
     a0e:	93 95       	inc	r25
     a10:	f6 95       	lsr	r31
     a12:	87 95       	ror	r24
     a14:	77 95       	ror	r23
     a16:	67 95       	ror	r22
     a18:	b7 95       	ror	r27
     a1a:	f1 11       	cpse	r31, r1
     a1c:	f8 cf       	rjmp	.-16     	; 0xa0e <__floatsisf+0x1c>
     a1e:	fa f4       	brpl	.+62     	; 0xa5e <__floatsisf+0x6c>
     a20:	bb 0f       	add	r27, r27
     a22:	11 f4       	brne	.+4      	; 0xa28 <__floatsisf+0x36>
     a24:	60 ff       	sbrs	r22, 0
     a26:	1b c0       	rjmp	.+54     	; 0xa5e <__floatsisf+0x6c>
     a28:	6f 5f       	subi	r22, 0xFF	; 255
     a2a:	7f 4f       	sbci	r23, 0xFF	; 255
     a2c:	8f 4f       	sbci	r24, 0xFF	; 255
     a2e:	9f 4f       	sbci	r25, 0xFF	; 255
     a30:	16 c0       	rjmp	.+44     	; 0xa5e <__floatsisf+0x6c>
     a32:	88 23       	and	r24, r24
     a34:	11 f0       	breq	.+4      	; 0xa3a <__floatsisf+0x48>
     a36:	96 e9       	ldi	r25, 0x96	; 150
     a38:	11 c0       	rjmp	.+34     	; 0xa5c <__floatsisf+0x6a>
     a3a:	77 23       	and	r23, r23
     a3c:	21 f0       	breq	.+8      	; 0xa46 <__floatsisf+0x54>
     a3e:	9e e8       	ldi	r25, 0x8E	; 142
     a40:	87 2f       	mov	r24, r23
     a42:	76 2f       	mov	r23, r22
     a44:	05 c0       	rjmp	.+10     	; 0xa50 <__floatsisf+0x5e>
     a46:	66 23       	and	r22, r22
     a48:	71 f0       	breq	.+28     	; 0xa66 <__floatsisf+0x74>
     a4a:	96 e8       	ldi	r25, 0x86	; 134
     a4c:	86 2f       	mov	r24, r22
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	2a f0       	brmi	.+10     	; 0xa5e <__floatsisf+0x6c>
     a54:	9a 95       	dec	r25
     a56:	66 0f       	add	r22, r22
     a58:	77 1f       	adc	r23, r23
     a5a:	88 1f       	adc	r24, r24
     a5c:	da f7       	brpl	.-10     	; 0xa54 <__floatsisf+0x62>
     a5e:	88 0f       	add	r24, r24
     a60:	96 95       	lsr	r25
     a62:	87 95       	ror	r24
     a64:	97 f9       	bld	r25, 7
     a66:	08 95       	ret
     a68:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fp_pscA>
     a6c:	20 f0       	brcs	.+8      	; 0xa76 <__floatsisf+0x84>
     a6e:	19 f0       	breq	.+6      	; 0xa76 <__floatsisf+0x84>
     a70:	0e 94 ca 05 	call	0xb94	; 0xb94 <__fp_pscB>
     a74:	50 f4       	brcc	.+20     	; 0xa8a <fmod+0xc>
     a76:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_nan>
     a7a:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_szero>

00000a7e <fmod>:
     a7e:	e9 2f       	mov	r30, r25
     a80:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fp_split3>
     a84:	88 f3       	brcs	.-30     	; 0xa68 <__floatsisf+0x76>
     a86:	55 23       	and	r21, r21
     a88:	b1 f3       	breq	.-20     	; 0xa76 <__floatsisf+0x84>
     a8a:	e7 fb       	bst	r30, 7
     a8c:	62 17       	cp	r22, r18
     a8e:	73 07       	cpc	r23, r19
     a90:	84 07       	cpc	r24, r20
     a92:	95 07       	cpc	r25, r21
     a94:	a8 f1       	brcs	.+106    	; 0xb00 <fmod+0x82>
     a96:	89 f3       	breq	.-30     	; 0xa7a <__floatsisf+0x88>
     a98:	e9 2f       	mov	r30, r25
     a9a:	ff 27       	eor	r31, r31
     a9c:	88 23       	and	r24, r24
     a9e:	2a f0       	brmi	.+10     	; 0xaaa <fmod+0x2c>
     aa0:	31 97       	sbiw	r30, 0x01	; 1
     aa2:	66 0f       	add	r22, r22
     aa4:	77 1f       	adc	r23, r23
     aa6:	88 1f       	adc	r24, r24
     aa8:	da f7       	brpl	.-10     	; 0xaa0 <fmod+0x22>
     aaa:	95 2f       	mov	r25, r21
     aac:	55 27       	eor	r21, r21
     aae:	44 23       	and	r20, r20
     ab0:	32 f0       	brmi	.+12     	; 0xabe <fmod+0x40>
     ab2:	91 50       	subi	r25, 0x01	; 1
     ab4:	50 40       	sbci	r21, 0x00	; 0
     ab6:	22 0f       	add	r18, r18
     ab8:	33 1f       	adc	r19, r19
     aba:	44 1f       	adc	r20, r20
     abc:	d2 f7       	brpl	.-12     	; 0xab2 <fmod+0x34>
     abe:	bb 27       	eor	r27, r27
     ac0:	e9 1b       	sub	r30, r25
     ac2:	f5 0b       	sbc	r31, r21
     ac4:	62 1b       	sub	r22, r18
     ac6:	73 0b       	sbc	r23, r19
     ac8:	84 0b       	sbc	r24, r20
     aca:	b1 09       	sbc	r27, r1
     acc:	b1 f2       	breq	.-84     	; 0xa7a <__floatsisf+0x88>
     ace:	22 f4       	brpl	.+8      	; 0xad8 <fmod+0x5a>
     ad0:	62 0f       	add	r22, r18
     ad2:	73 1f       	adc	r23, r19
     ad4:	84 1f       	adc	r24, r20
     ad6:	b1 1d       	adc	r27, r1
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	2a f0       	brmi	.+10     	; 0xae6 <fmod+0x68>
     adc:	66 0f       	add	r22, r22
     ade:	77 1f       	adc	r23, r23
     ae0:	88 1f       	adc	r24, r24
     ae2:	bb 1f       	adc	r27, r27
     ae4:	ef cf       	rjmp	.-34     	; 0xac4 <fmod+0x46>
     ae6:	91 50       	subi	r25, 0x01	; 1
     ae8:	50 40       	sbci	r21, 0x00	; 0
     aea:	62 f0       	brmi	.+24     	; 0xb04 <fmod+0x86>
     aec:	41 f0       	breq	.+16     	; 0xafe <fmod+0x80>
     aee:	88 23       	and	r24, r24
     af0:	32 f0       	brmi	.+12     	; 0xafe <fmod+0x80>
     af2:	66 0f       	add	r22, r22
     af4:	77 1f       	adc	r23, r23
     af6:	88 1f       	adc	r24, r24
     af8:	91 50       	subi	r25, 0x01	; 1
     afa:	50 40       	sbci	r21, 0x00	; 0
     afc:	c1 f7       	brne	.-16     	; 0xaee <fmod+0x70>
     afe:	93 95       	inc	r25
     b00:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_mpack>
     b04:	86 95       	lsr	r24
     b06:	77 95       	ror	r23
     b08:	67 95       	ror	r22
     b0a:	9f 5f       	subi	r25, 0xFF	; 255
     b0c:	d9 f7       	brne	.-10     	; 0xb04 <fmod+0x86>
     b0e:	f7 cf       	rjmp	.-18     	; 0xafe <fmod+0x80>

00000b10 <__fp_cmp>:
     b10:	99 0f       	add	r25, r25
     b12:	00 08       	sbc	r0, r0
     b14:	55 0f       	add	r21, r21
     b16:	aa 0b       	sbc	r26, r26
     b18:	e0 e8       	ldi	r30, 0x80	; 128
     b1a:	fe ef       	ldi	r31, 0xFE	; 254
     b1c:	16 16       	cp	r1, r22
     b1e:	17 06       	cpc	r1, r23
     b20:	e8 07       	cpc	r30, r24
     b22:	f9 07       	cpc	r31, r25
     b24:	c0 f0       	brcs	.+48     	; 0xb56 <__fp_cmp+0x46>
     b26:	12 16       	cp	r1, r18
     b28:	13 06       	cpc	r1, r19
     b2a:	e4 07       	cpc	r30, r20
     b2c:	f5 07       	cpc	r31, r21
     b2e:	98 f0       	brcs	.+38     	; 0xb56 <__fp_cmp+0x46>
     b30:	62 1b       	sub	r22, r18
     b32:	73 0b       	sbc	r23, r19
     b34:	84 0b       	sbc	r24, r20
     b36:	95 0b       	sbc	r25, r21
     b38:	39 f4       	brne	.+14     	; 0xb48 <__fp_cmp+0x38>
     b3a:	0a 26       	eor	r0, r26
     b3c:	61 f0       	breq	.+24     	; 0xb56 <__fp_cmp+0x46>
     b3e:	23 2b       	or	r18, r19
     b40:	24 2b       	or	r18, r20
     b42:	25 2b       	or	r18, r21
     b44:	21 f4       	brne	.+8      	; 0xb4e <__fp_cmp+0x3e>
     b46:	08 95       	ret
     b48:	0a 26       	eor	r0, r26
     b4a:	09 f4       	brne	.+2      	; 0xb4e <__fp_cmp+0x3e>
     b4c:	a1 40       	sbci	r26, 0x01	; 1
     b4e:	a6 95       	lsr	r26
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	81 1d       	adc	r24, r1
     b54:	81 1d       	adc	r24, r1
     b56:	08 95       	ret

00000b58 <__fp_inf>:
     b58:	97 f9       	bld	r25, 7
     b5a:	9f 67       	ori	r25, 0x7F	; 127
     b5c:	80 e8       	ldi	r24, 0x80	; 128
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	08 95       	ret

00000b64 <__fp_mpack>:
     b64:	9f 3f       	cpi	r25, 0xFF	; 255
     b66:	31 f0       	breq	.+12     	; 0xb74 <__fp_mpack_finite+0xc>

00000b68 <__fp_mpack_finite>:
     b68:	91 50       	subi	r25, 0x01	; 1
     b6a:	20 f4       	brcc	.+8      	; 0xb74 <__fp_mpack_finite+0xc>
     b6c:	87 95       	ror	r24
     b6e:	77 95       	ror	r23
     b70:	67 95       	ror	r22
     b72:	b7 95       	ror	r27
     b74:	88 0f       	add	r24, r24
     b76:	91 1d       	adc	r25, r1
     b78:	96 95       	lsr	r25
     b7a:	87 95       	ror	r24
     b7c:	97 f9       	bld	r25, 7
     b7e:	08 95       	ret

00000b80 <__fp_nan>:
     b80:	9f ef       	ldi	r25, 0xFF	; 255
     b82:	80 ec       	ldi	r24, 0xC0	; 192
     b84:	08 95       	ret

00000b86 <__fp_pscA>:
     b86:	00 24       	eor	r0, r0
     b88:	0a 94       	dec	r0
     b8a:	16 16       	cp	r1, r22
     b8c:	17 06       	cpc	r1, r23
     b8e:	18 06       	cpc	r1, r24
     b90:	09 06       	cpc	r0, r25
     b92:	08 95       	ret

00000b94 <__fp_pscB>:
     b94:	00 24       	eor	r0, r0
     b96:	0a 94       	dec	r0
     b98:	12 16       	cp	r1, r18
     b9a:	13 06       	cpc	r1, r19
     b9c:	14 06       	cpc	r1, r20
     b9e:	05 06       	cpc	r0, r21
     ba0:	08 95       	ret

00000ba2 <__fp_round>:
     ba2:	09 2e       	mov	r0, r25
     ba4:	03 94       	inc	r0
     ba6:	00 0c       	add	r0, r0
     ba8:	11 f4       	brne	.+4      	; 0xbae <__fp_round+0xc>
     baa:	88 23       	and	r24, r24
     bac:	52 f0       	brmi	.+20     	; 0xbc2 <__fp_round+0x20>
     bae:	bb 0f       	add	r27, r27
     bb0:	40 f4       	brcc	.+16     	; 0xbc2 <__fp_round+0x20>
     bb2:	bf 2b       	or	r27, r31
     bb4:	11 f4       	brne	.+4      	; 0xbba <__fp_round+0x18>
     bb6:	60 ff       	sbrs	r22, 0
     bb8:	04 c0       	rjmp	.+8      	; 0xbc2 <__fp_round+0x20>
     bba:	6f 5f       	subi	r22, 0xFF	; 255
     bbc:	7f 4f       	sbci	r23, 0xFF	; 255
     bbe:	8f 4f       	sbci	r24, 0xFF	; 255
     bc0:	9f 4f       	sbci	r25, 0xFF	; 255
     bc2:	08 95       	ret

00000bc4 <__fp_split3>:
     bc4:	57 fd       	sbrc	r21, 7
     bc6:	90 58       	subi	r25, 0x80	; 128
     bc8:	44 0f       	add	r20, r20
     bca:	55 1f       	adc	r21, r21
     bcc:	59 f0       	breq	.+22     	; 0xbe4 <__fp_splitA+0x10>
     bce:	5f 3f       	cpi	r21, 0xFF	; 255
     bd0:	71 f0       	breq	.+28     	; 0xbee <__fp_splitA+0x1a>
     bd2:	47 95       	ror	r20

00000bd4 <__fp_splitA>:
     bd4:	88 0f       	add	r24, r24
     bd6:	97 fb       	bst	r25, 7
     bd8:	99 1f       	adc	r25, r25
     bda:	61 f0       	breq	.+24     	; 0xbf4 <__fp_splitA+0x20>
     bdc:	9f 3f       	cpi	r25, 0xFF	; 255
     bde:	79 f0       	breq	.+30     	; 0xbfe <__fp_splitA+0x2a>
     be0:	87 95       	ror	r24
     be2:	08 95       	ret
     be4:	12 16       	cp	r1, r18
     be6:	13 06       	cpc	r1, r19
     be8:	14 06       	cpc	r1, r20
     bea:	55 1f       	adc	r21, r21
     bec:	f2 cf       	rjmp	.-28     	; 0xbd2 <__fp_split3+0xe>
     bee:	46 95       	lsr	r20
     bf0:	f1 df       	rcall	.-30     	; 0xbd4 <__fp_splitA>
     bf2:	08 c0       	rjmp	.+16     	; 0xc04 <__fp_splitA+0x30>
     bf4:	16 16       	cp	r1, r22
     bf6:	17 06       	cpc	r1, r23
     bf8:	18 06       	cpc	r1, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	f1 cf       	rjmp	.-30     	; 0xbe0 <__fp_splitA+0xc>
     bfe:	86 95       	lsr	r24
     c00:	71 05       	cpc	r23, r1
     c02:	61 05       	cpc	r22, r1
     c04:	08 94       	sec
     c06:	08 95       	ret

00000c08 <__fp_zero>:
     c08:	e8 94       	clt

00000c0a <__fp_szero>:
     c0a:	bb 27       	eor	r27, r27
     c0c:	66 27       	eor	r22, r22
     c0e:	77 27       	eor	r23, r23
     c10:	cb 01       	movw	r24, r22
     c12:	97 f9       	bld	r25, 7
     c14:	08 95       	ret

00000c16 <__mulsf3>:
     c16:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__mulsf3x>
     c1a:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__fp_round>
     c1e:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fp_pscA>
     c22:	38 f0       	brcs	.+14     	; 0xc32 <__mulsf3+0x1c>
     c24:	0e 94 ca 05 	call	0xb94	; 0xb94 <__fp_pscB>
     c28:	20 f0       	brcs	.+8      	; 0xc32 <__mulsf3+0x1c>
     c2a:	95 23       	and	r25, r21
     c2c:	11 f0       	breq	.+4      	; 0xc32 <__mulsf3+0x1c>
     c2e:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     c32:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_nan>
     c36:	11 24       	eor	r1, r1
     c38:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_szero>

00000c3c <__mulsf3x>:
     c3c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fp_split3>
     c40:	70 f3       	brcs	.-36     	; 0xc1e <__mulsf3+0x8>

00000c42 <__mulsf3_pse>:
     c42:	95 9f       	mul	r25, r21
     c44:	c1 f3       	breq	.-16     	; 0xc36 <__mulsf3+0x20>
     c46:	95 0f       	add	r25, r21
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	55 1f       	adc	r21, r21
     c4c:	62 9f       	mul	r22, r18
     c4e:	f0 01       	movw	r30, r0
     c50:	72 9f       	mul	r23, r18
     c52:	bb 27       	eor	r27, r27
     c54:	f0 0d       	add	r31, r0
     c56:	b1 1d       	adc	r27, r1
     c58:	63 9f       	mul	r22, r19
     c5a:	aa 27       	eor	r26, r26
     c5c:	f0 0d       	add	r31, r0
     c5e:	b1 1d       	adc	r27, r1
     c60:	aa 1f       	adc	r26, r26
     c62:	64 9f       	mul	r22, r20
     c64:	66 27       	eor	r22, r22
     c66:	b0 0d       	add	r27, r0
     c68:	a1 1d       	adc	r26, r1
     c6a:	66 1f       	adc	r22, r22
     c6c:	82 9f       	mul	r24, r18
     c6e:	22 27       	eor	r18, r18
     c70:	b0 0d       	add	r27, r0
     c72:	a1 1d       	adc	r26, r1
     c74:	62 1f       	adc	r22, r18
     c76:	73 9f       	mul	r23, r19
     c78:	b0 0d       	add	r27, r0
     c7a:	a1 1d       	adc	r26, r1
     c7c:	62 1f       	adc	r22, r18
     c7e:	83 9f       	mul	r24, r19
     c80:	a0 0d       	add	r26, r0
     c82:	61 1d       	adc	r22, r1
     c84:	22 1f       	adc	r18, r18
     c86:	74 9f       	mul	r23, r20
     c88:	33 27       	eor	r19, r19
     c8a:	a0 0d       	add	r26, r0
     c8c:	61 1d       	adc	r22, r1
     c8e:	23 1f       	adc	r18, r19
     c90:	84 9f       	mul	r24, r20
     c92:	60 0d       	add	r22, r0
     c94:	21 1d       	adc	r18, r1
     c96:	82 2f       	mov	r24, r18
     c98:	76 2f       	mov	r23, r22
     c9a:	6a 2f       	mov	r22, r26
     c9c:	11 24       	eor	r1, r1
     c9e:	9f 57       	subi	r25, 0x7F	; 127
     ca0:	50 40       	sbci	r21, 0x00	; 0
     ca2:	9a f0       	brmi	.+38     	; 0xcca <__mulsf3_pse+0x88>
     ca4:	f1 f0       	breq	.+60     	; 0xce2 <__mulsf3_pse+0xa0>
     ca6:	88 23       	and	r24, r24
     ca8:	4a f0       	brmi	.+18     	; 0xcbc <__mulsf3_pse+0x7a>
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	bb 1f       	adc	r27, r27
     cb0:	66 1f       	adc	r22, r22
     cb2:	77 1f       	adc	r23, r23
     cb4:	88 1f       	adc	r24, r24
     cb6:	91 50       	subi	r25, 0x01	; 1
     cb8:	50 40       	sbci	r21, 0x00	; 0
     cba:	a9 f7       	brne	.-22     	; 0xca6 <__mulsf3_pse+0x64>
     cbc:	9e 3f       	cpi	r25, 0xFE	; 254
     cbe:	51 05       	cpc	r21, r1
     cc0:	80 f0       	brcs	.+32     	; 0xce2 <__mulsf3_pse+0xa0>
     cc2:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     cc6:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_szero>
     cca:	5f 3f       	cpi	r21, 0xFF	; 255
     ccc:	e4 f3       	brlt	.-8      	; 0xcc6 <__mulsf3_pse+0x84>
     cce:	98 3e       	cpi	r25, 0xE8	; 232
     cd0:	d4 f3       	brlt	.-12     	; 0xcc6 <__mulsf3_pse+0x84>
     cd2:	86 95       	lsr	r24
     cd4:	77 95       	ror	r23
     cd6:	67 95       	ror	r22
     cd8:	b7 95       	ror	r27
     cda:	f7 95       	ror	r31
     cdc:	e7 95       	ror	r30
     cde:	9f 5f       	subi	r25, 0xFF	; 255
     ce0:	c1 f7       	brne	.-16     	; 0xcd2 <__mulsf3_pse+0x90>
     ce2:	fe 2b       	or	r31, r30
     ce4:	88 0f       	add	r24, r24
     ce6:	91 1d       	adc	r25, r1
     ce8:	96 95       	lsr	r25
     cea:	87 95       	ror	r24
     cec:	97 f9       	bld	r25, 7
     cee:	08 95       	ret

00000cf0 <pow>:
     cf0:	fa 01       	movw	r30, r20
     cf2:	ee 0f       	add	r30, r30
     cf4:	ff 1f       	adc	r31, r31
     cf6:	30 96       	adiw	r30, 0x00	; 0
     cf8:	21 05       	cpc	r18, r1
     cfa:	31 05       	cpc	r19, r1
     cfc:	a1 f1       	breq	.+104    	; 0xd66 <pow+0x76>
     cfe:	61 15       	cp	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	61 f4       	brne	.+24     	; 0xd1c <pow+0x2c>
     d04:	80 38       	cpi	r24, 0x80	; 128
     d06:	bf e3       	ldi	r27, 0x3F	; 63
     d08:	9b 07       	cpc	r25, r27
     d0a:	49 f1       	breq	.+82     	; 0xd5e <pow+0x6e>
     d0c:	68 94       	set
     d0e:	90 38       	cpi	r25, 0x80	; 128
     d10:	81 05       	cpc	r24, r1
     d12:	61 f0       	breq	.+24     	; 0xd2c <pow+0x3c>
     d14:	80 38       	cpi	r24, 0x80	; 128
     d16:	bf ef       	ldi	r27, 0xFF	; 255
     d18:	9b 07       	cpc	r25, r27
     d1a:	41 f0       	breq	.+16     	; 0xd2c <pow+0x3c>
     d1c:	99 23       	and	r25, r25
     d1e:	4a f5       	brpl	.+82     	; 0xd72 <pow+0x82>
     d20:	ff 3f       	cpi	r31, 0xFF	; 255
     d22:	e1 05       	cpc	r30, r1
     d24:	31 05       	cpc	r19, r1
     d26:	21 05       	cpc	r18, r1
     d28:	19 f1       	breq	.+70     	; 0xd70 <pow+0x80>
     d2a:	e8 94       	clt
     d2c:	08 94       	sec
     d2e:	e7 95       	ror	r30
     d30:	d9 01       	movw	r26, r18
     d32:	aa 23       	and	r26, r26
     d34:	29 f4       	brne	.+10     	; 0xd40 <pow+0x50>
     d36:	ab 2f       	mov	r26, r27
     d38:	be 2f       	mov	r27, r30
     d3a:	f8 5f       	subi	r31, 0xF8	; 248
     d3c:	d0 f3       	brcs	.-12     	; 0xd32 <pow+0x42>
     d3e:	10 c0       	rjmp	.+32     	; 0xd60 <pow+0x70>
     d40:	ff 5f       	subi	r31, 0xFF	; 255
     d42:	70 f4       	brcc	.+28     	; 0xd60 <pow+0x70>
     d44:	a6 95       	lsr	r26
     d46:	e0 f7       	brcc	.-8      	; 0xd40 <pow+0x50>
     d48:	f7 39       	cpi	r31, 0x97	; 151
     d4a:	50 f0       	brcs	.+20     	; 0xd60 <pow+0x70>
     d4c:	19 f0       	breq	.+6      	; 0xd54 <pow+0x64>
     d4e:	ff 3a       	cpi	r31, 0xAF	; 175
     d50:	38 f4       	brcc	.+14     	; 0xd60 <pow+0x70>
     d52:	9f 77       	andi	r25, 0x7F	; 127
     d54:	9f 93       	push	r25
     d56:	0d d0       	rcall	.+26     	; 0xd72 <pow+0x82>
     d58:	0f 90       	pop	r0
     d5a:	07 fc       	sbrc	r0, 7
     d5c:	90 58       	subi	r25, 0x80	; 128
     d5e:	08 95       	ret
     d60:	46 f0       	brts	.+16     	; 0xd72 <pow+0x82>
     d62:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_nan>
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	80 e8       	ldi	r24, 0x80	; 128
     d6c:	9f e3       	ldi	r25, 0x3F	; 63
     d6e:	08 95       	ret
     d70:	4f e7       	ldi	r20, 0x7F	; 127
     d72:	9f 77       	andi	r25, 0x7F	; 127
     d74:	5f 93       	push	r21
     d76:	4f 93       	push	r20
     d78:	3f 93       	push	r19
     d7a:	2f 93       	push	r18
     d7c:	0e 94 73 07 	call	0xee6	; 0xee6 <log>
     d80:	2f 91       	pop	r18
     d82:	3f 91       	pop	r19
     d84:	4f 91       	pop	r20
     d86:	5f 91       	pop	r21
     d88:	0e 94 0b 06 	call	0xc16	; 0xc16 <__mulsf3>
     d8c:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <exp>
     d90:	29 f4       	brne	.+10     	; 0xd9c <pow+0xac>
     d92:	16 f0       	brts	.+4      	; 0xd98 <pow+0xa8>
     d94:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     d98:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_zero>
     d9c:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_nan>

00000da0 <exp>:
     da0:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__fp_splitA>
     da4:	a8 f3       	brcs	.-22     	; 0xd90 <pow+0xa0>
     da6:	96 38       	cpi	r25, 0x86	; 134
     da8:	a0 f7       	brcc	.-24     	; 0xd92 <pow+0xa2>
     daa:	07 f8       	bld	r0, 7
     dac:	0f 92       	push	r0
     dae:	e8 94       	clt
     db0:	2b e3       	ldi	r18, 0x3B	; 59
     db2:	3a ea       	ldi	r19, 0xAA	; 170
     db4:	48 eb       	ldi	r20, 0xB8	; 184
     db6:	5f e7       	ldi	r21, 0x7F	; 127
     db8:	0e 94 21 06 	call	0xc42	; 0xc42 <__mulsf3_pse>
     dbc:	0f 92       	push	r0
     dbe:	0f 92       	push	r0
     dc0:	0f 92       	push	r0
     dc2:	4d b7       	in	r20, 0x3d	; 61
     dc4:	5e b7       	in	r21, 0x3e	; 62
     dc6:	0f 92       	push	r0
     dc8:	0e 94 bb 07 	call	0xf76	; 0xf76 <modf>
     dcc:	e4 e5       	ldi	r30, 0x54	; 84
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	0e 94 02 07 	call	0xe04	; 0xe04 <__fp_powser>
     dd4:	4f 91       	pop	r20
     dd6:	5f 91       	pop	r21
     dd8:	ef 91       	pop	r30
     dda:	ff 91       	pop	r31
     ddc:	e5 95       	asr	r30
     dde:	ee 1f       	adc	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	49 f0       	breq	.+18     	; 0xdf6 <exp+0x56>
     de4:	fe 57       	subi	r31, 0x7E	; 126
     de6:	e0 68       	ori	r30, 0x80	; 128
     de8:	44 27       	eor	r20, r20
     dea:	ee 0f       	add	r30, r30
     dec:	44 1f       	adc	r20, r20
     dee:	fa 95       	dec	r31
     df0:	e1 f7       	brne	.-8      	; 0xdea <exp+0x4a>
     df2:	41 95       	neg	r20
     df4:	55 0b       	sbc	r21, r21
     df6:	0e 94 35 07 	call	0xe6a	; 0xe6a <ldexp>
     dfa:	0f 90       	pop	r0
     dfc:	07 fe       	sbrs	r0, 7
     dfe:	0c 94 29 07 	jmp	0xe52	; 0xe52 <inverse>
     e02:	08 95       	ret

00000e04 <__fp_powser>:
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	1f 93       	push	r17
     e0a:	0f 93       	push	r16
     e0c:	ff 92       	push	r15
     e0e:	ef 92       	push	r14
     e10:	df 92       	push	r13
     e12:	7b 01       	movw	r14, r22
     e14:	8c 01       	movw	r16, r24
     e16:	68 94       	set
     e18:	06 c0       	rjmp	.+12     	; 0xe26 <__fp_powser+0x22>
     e1a:	da 2e       	mov	r13, r26
     e1c:	ef 01       	movw	r28, r30
     e1e:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__mulsf3x>
     e22:	fe 01       	movw	r30, r28
     e24:	e8 94       	clt
     e26:	a5 91       	lpm	r26, Z+
     e28:	25 91       	lpm	r18, Z+
     e2a:	35 91       	lpm	r19, Z+
     e2c:	45 91       	lpm	r20, Z+
     e2e:	55 91       	lpm	r21, Z+
     e30:	a6 f3       	brts	.-24     	; 0xe1a <__fp_powser+0x16>
     e32:	ef 01       	movw	r28, r30
     e34:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__addsf3x>
     e38:	fe 01       	movw	r30, r28
     e3a:	97 01       	movw	r18, r14
     e3c:	a8 01       	movw	r20, r16
     e3e:	da 94       	dec	r13
     e40:	69 f7       	brne	.-38     	; 0xe1c <__fp_powser+0x18>
     e42:	df 90       	pop	r13
     e44:	ef 90       	pop	r14
     e46:	ff 90       	pop	r15
     e48:	0f 91       	pop	r16
     e4a:	1f 91       	pop	r17
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <inverse>:
     e52:	9b 01       	movw	r18, r22
     e54:	ac 01       	movw	r20, r24
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	80 e8       	ldi	r24, 0x80	; 128
     e5c:	9f e3       	ldi	r25, 0x3F	; 63
     e5e:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__divsf3>
     e62:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>
     e66:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_mpack>

00000e6a <ldexp>:
     e6a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__fp_splitA>
     e6e:	d8 f3       	brcs	.-10     	; 0xe66 <inverse+0x14>
     e70:	99 23       	and	r25, r25
     e72:	c9 f3       	breq	.-14     	; 0xe66 <inverse+0x14>
     e74:	94 0f       	add	r25, r20
     e76:	51 1d       	adc	r21, r1
     e78:	a3 f3       	brvs	.-24     	; 0xe62 <inverse+0x10>
     e7a:	91 50       	subi	r25, 0x01	; 1
     e7c:	50 40       	sbci	r21, 0x00	; 0
     e7e:	94 f0       	brlt	.+36     	; 0xea4 <ldexp+0x3a>
     e80:	59 f0       	breq	.+22     	; 0xe98 <ldexp+0x2e>
     e82:	88 23       	and	r24, r24
     e84:	32 f0       	brmi	.+12     	; 0xe92 <ldexp+0x28>
     e86:	66 0f       	add	r22, r22
     e88:	77 1f       	adc	r23, r23
     e8a:	88 1f       	adc	r24, r24
     e8c:	91 50       	subi	r25, 0x01	; 1
     e8e:	50 40       	sbci	r21, 0x00	; 0
     e90:	c1 f7       	brne	.-16     	; 0xe82 <ldexp+0x18>
     e92:	9e 3f       	cpi	r25, 0xFE	; 254
     e94:	51 05       	cpc	r21, r1
     e96:	2c f7       	brge	.-54     	; 0xe62 <inverse+0x10>
     e98:	88 0f       	add	r24, r24
     e9a:	91 1d       	adc	r25, r1
     e9c:	96 95       	lsr	r25
     e9e:	87 95       	ror	r24
     ea0:	97 f9       	bld	r25, 7
     ea2:	08 95       	ret
     ea4:	5f 3f       	cpi	r21, 0xFF	; 255
     ea6:	ac f0       	brlt	.+42     	; 0xed2 <ldexp+0x68>
     ea8:	98 3e       	cpi	r25, 0xE8	; 232
     eaa:	9c f0       	brlt	.+38     	; 0xed2 <ldexp+0x68>
     eac:	bb 27       	eor	r27, r27
     eae:	86 95       	lsr	r24
     eb0:	77 95       	ror	r23
     eb2:	67 95       	ror	r22
     eb4:	b7 95       	ror	r27
     eb6:	08 f4       	brcc	.+2      	; 0xeba <ldexp+0x50>
     eb8:	b1 60       	ori	r27, 0x01	; 1
     eba:	93 95       	inc	r25
     ebc:	c1 f7       	brne	.-16     	; 0xeae <ldexp+0x44>
     ebe:	bb 0f       	add	r27, r27
     ec0:	58 f7       	brcc	.-42     	; 0xe98 <ldexp+0x2e>
     ec2:	11 f4       	brne	.+4      	; 0xec8 <ldexp+0x5e>
     ec4:	60 ff       	sbrs	r22, 0
     ec6:	e8 cf       	rjmp	.-48     	; 0xe98 <ldexp+0x2e>
     ec8:	6f 5f       	subi	r22, 0xFF	; 255
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	8f 4f       	sbci	r24, 0xFF	; 255
     ece:	9f 4f       	sbci	r25, 0xFF	; 255
     ed0:	e3 cf       	rjmp	.-58     	; 0xe98 <ldexp+0x2e>
     ed2:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__fp_szero>
     ed6:	16 f0       	brts	.+4      	; 0xedc <ldexp+0x72>
     ed8:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__fp_mpack>
     edc:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_nan>
     ee0:	68 94       	set
     ee2:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_inf>

00000ee6 <log>:
     ee6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__fp_splitA>
     eea:	a8 f3       	brcs	.-22     	; 0xed6 <ldexp+0x6c>
     eec:	99 23       	and	r25, r25
     eee:	c1 f3       	breq	.-16     	; 0xee0 <ldexp+0x76>
     ef0:	ae f3       	brts	.-22     	; 0xedc <ldexp+0x72>
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	1f 93       	push	r17
     ef8:	0f 93       	push	r16
     efa:	ff 92       	push	r15
     efc:	c9 2f       	mov	r28, r25
     efe:	dd 27       	eor	r29, r29
     f00:	88 23       	and	r24, r24
     f02:	2a f0       	brmi	.+10     	; 0xf0e <log+0x28>
     f04:	21 97       	sbiw	r28, 0x01	; 1
     f06:	66 0f       	add	r22, r22
     f08:	77 1f       	adc	r23, r23
     f0a:	88 1f       	adc	r24, r24
     f0c:	da f7       	brpl	.-10     	; 0xf04 <log+0x1e>
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e8       	ldi	r20, 0x80	; 128
     f14:	5f eb       	ldi	r21, 0xBF	; 191
     f16:	9f e3       	ldi	r25, 0x3F	; 63
     f18:	88 39       	cpi	r24, 0x98	; 152
     f1a:	20 f0       	brcs	.+8      	; 0xf24 <log+0x3e>
     f1c:	80 3e       	cpi	r24, 0xE0	; 224
     f1e:	38 f0       	brcs	.+14     	; 0xf2e <log+0x48>
     f20:	21 96       	adiw	r28, 0x01	; 1
     f22:	8f 77       	andi	r24, 0x7F	; 127
     f24:	0e 94 de 03 	call	0x7bc	; 0x7bc <__addsf3>
     f28:	ec e7       	ldi	r30, 0x7C	; 124
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	04 c0       	rjmp	.+8      	; 0xf36 <log+0x50>
     f2e:	0e 94 de 03 	call	0x7bc	; 0x7bc <__addsf3>
     f32:	e9 ea       	ldi	r30, 0xA9	; 169
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	0e 94 02 07 	call	0xe04	; 0xe04 <__fp_powser>
     f3a:	8b 01       	movw	r16, r22
     f3c:	be 01       	movw	r22, r28
     f3e:	ec 01       	movw	r28, r24
     f40:	fb 2e       	mov	r15, r27
     f42:	6f 57       	subi	r22, 0x7F	; 127
     f44:	71 09       	sbc	r23, r1
     f46:	75 95       	asr	r23
     f48:	77 1f       	adc	r23, r23
     f4a:	88 0b       	sbc	r24, r24
     f4c:	99 0b       	sbc	r25, r25
     f4e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatsisf>
     f52:	28 e1       	ldi	r18, 0x18	; 24
     f54:	32 e7       	ldi	r19, 0x72	; 114
     f56:	41 e3       	ldi	r20, 0x31	; 49
     f58:	5f e3       	ldi	r21, 0x3F	; 63
     f5a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__mulsf3x>
     f5e:	af 2d       	mov	r26, r15
     f60:	98 01       	movw	r18, r16
     f62:	ae 01       	movw	r20, r28
     f64:	ff 90       	pop	r15
     f66:	0f 91       	pop	r16
     f68:	1f 91       	pop	r17
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__addsf3x>
     f72:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__fp_round>

00000f76 <modf>:
     f76:	fa 01       	movw	r30, r20
     f78:	dc 01       	movw	r26, r24
     f7a:	aa 0f       	add	r26, r26
     f7c:	bb 1f       	adc	r27, r27
     f7e:	9b 01       	movw	r18, r22
     f80:	ac 01       	movw	r20, r24
     f82:	bf 57       	subi	r27, 0x7F	; 127
     f84:	28 f4       	brcc	.+10     	; 0xf90 <modf+0x1a>
     f86:	22 27       	eor	r18, r18
     f88:	33 27       	eor	r19, r19
     f8a:	44 27       	eor	r20, r20
     f8c:	50 78       	andi	r21, 0x80	; 128
     f8e:	20 c0       	rjmp	.+64     	; 0xfd0 <modf+0x5a>
     f90:	b7 51       	subi	r27, 0x17	; 23
     f92:	90 f4       	brcc	.+36     	; 0xfb8 <modf+0x42>
     f94:	ab 2f       	mov	r26, r27
     f96:	00 24       	eor	r0, r0
     f98:	46 95       	lsr	r20
     f9a:	37 95       	ror	r19
     f9c:	27 95       	ror	r18
     f9e:	01 1c       	adc	r0, r1
     fa0:	a3 95       	inc	r26
     fa2:	d2 f3       	brmi	.-12     	; 0xf98 <modf+0x22>
     fa4:	00 20       	and	r0, r0
     fa6:	71 f0       	breq	.+28     	; 0xfc4 <modf+0x4e>
     fa8:	22 0f       	add	r18, r18
     faa:	33 1f       	adc	r19, r19
     fac:	44 1f       	adc	r20, r20
     fae:	b3 95       	inc	r27
     fb0:	da f3       	brmi	.-10     	; 0xfa8 <modf+0x32>
     fb2:	0e d0       	rcall	.+28     	; 0xfd0 <modf+0x5a>
     fb4:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__subsf3>
     fb8:	61 30       	cpi	r22, 0x01	; 1
     fba:	71 05       	cpc	r23, r1
     fbc:	a0 e8       	ldi	r26, 0x80	; 128
     fbe:	8a 07       	cpc	r24, r26
     fc0:	b9 46       	sbci	r27, 0x69	; 105
     fc2:	30 f4       	brcc	.+12     	; 0xfd0 <modf+0x5a>
     fc4:	9b 01       	movw	r18, r22
     fc6:	ac 01       	movw	r20, r24
     fc8:	66 27       	eor	r22, r22
     fca:	77 27       	eor	r23, r23
     fcc:	88 27       	eor	r24, r24
     fce:	90 78       	andi	r25, 0x80	; 128
     fd0:	30 96       	adiw	r30, 0x00	; 0
     fd2:	21 f0       	breq	.+8      	; 0xfdc <modf+0x66>
     fd4:	20 83       	st	Z, r18
     fd6:	31 83       	std	Z+1, r19	; 0x01
     fd8:	42 83       	std	Z+2, r20	; 0x02
     fda:	53 83       	std	Z+3, r21	; 0x03
     fdc:	08 95       	ret

00000fde <malloc>:
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	82 30       	cpi	r24, 0x02	; 2
     fe4:	91 05       	cpc	r25, r1
     fe6:	10 f4       	brcc	.+4      	; 0xfec <malloc+0xe>
     fe8:	82 e0       	ldi	r24, 0x02	; 2
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	e0 91 90 00 	lds	r30, 0x0090
     ff0:	f0 91 91 00 	lds	r31, 0x0091
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	c0 e0       	ldi	r28, 0x00	; 0
     ffa:	d0 e0       	ldi	r29, 0x00	; 0
     ffc:	30 97       	sbiw	r30, 0x00	; 0
     ffe:	11 f1       	breq	.+68     	; 0x1044 <malloc+0x66>
    1000:	40 81       	ld	r20, Z
    1002:	51 81       	ldd	r21, Z+1	; 0x01
    1004:	48 17       	cp	r20, r24
    1006:	59 07       	cpc	r21, r25
    1008:	c0 f0       	brcs	.+48     	; 0x103a <malloc+0x5c>
    100a:	48 17       	cp	r20, r24
    100c:	59 07       	cpc	r21, r25
    100e:	61 f4       	brne	.+24     	; 0x1028 <malloc+0x4a>
    1010:	82 81       	ldd	r24, Z+2	; 0x02
    1012:	93 81       	ldd	r25, Z+3	; 0x03
    1014:	20 97       	sbiw	r28, 0x00	; 0
    1016:	19 f0       	breq	.+6      	; 0x101e <malloc+0x40>
    1018:	9b 83       	std	Y+3, r25	; 0x03
    101a:	8a 83       	std	Y+2, r24	; 0x02
    101c:	2b c0       	rjmp	.+86     	; 0x1074 <malloc+0x96>
    101e:	90 93 91 00 	sts	0x0091, r25
    1022:	80 93 90 00 	sts	0x0090, r24
    1026:	26 c0       	rjmp	.+76     	; 0x1074 <malloc+0x96>
    1028:	21 15       	cp	r18, r1
    102a:	31 05       	cpc	r19, r1
    102c:	19 f0       	breq	.+6      	; 0x1034 <malloc+0x56>
    102e:	42 17       	cp	r20, r18
    1030:	53 07       	cpc	r21, r19
    1032:	18 f4       	brcc	.+6      	; 0x103a <malloc+0x5c>
    1034:	9a 01       	movw	r18, r20
    1036:	be 01       	movw	r22, r28
    1038:	df 01       	movw	r26, r30
    103a:	ef 01       	movw	r28, r30
    103c:	02 80       	ldd	r0, Z+2	; 0x02
    103e:	f3 81       	ldd	r31, Z+3	; 0x03
    1040:	e0 2d       	mov	r30, r0
    1042:	dc cf       	rjmp	.-72     	; 0xffc <malloc+0x1e>
    1044:	21 15       	cp	r18, r1
    1046:	31 05       	cpc	r19, r1
    1048:	09 f1       	breq	.+66     	; 0x108c <malloc+0xae>
    104a:	28 1b       	sub	r18, r24
    104c:	39 0b       	sbc	r19, r25
    104e:	24 30       	cpi	r18, 0x04	; 4
    1050:	31 05       	cpc	r19, r1
    1052:	90 f4       	brcc	.+36     	; 0x1078 <malloc+0x9a>
    1054:	12 96       	adiw	r26, 0x02	; 2
    1056:	8d 91       	ld	r24, X+
    1058:	9c 91       	ld	r25, X
    105a:	13 97       	sbiw	r26, 0x03	; 3
    105c:	61 15       	cp	r22, r1
    105e:	71 05       	cpc	r23, r1
    1060:	21 f0       	breq	.+8      	; 0x106a <malloc+0x8c>
    1062:	fb 01       	movw	r30, r22
    1064:	93 83       	std	Z+3, r25	; 0x03
    1066:	82 83       	std	Z+2, r24	; 0x02
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <malloc+0x94>
    106a:	90 93 91 00 	sts	0x0091, r25
    106e:	80 93 90 00 	sts	0x0090, r24
    1072:	fd 01       	movw	r30, r26
    1074:	32 96       	adiw	r30, 0x02	; 2
    1076:	44 c0       	rjmp	.+136    	; 0x1100 <malloc+0x122>
    1078:	fd 01       	movw	r30, r26
    107a:	e2 0f       	add	r30, r18
    107c:	f3 1f       	adc	r31, r19
    107e:	81 93       	st	Z+, r24
    1080:	91 93       	st	Z+, r25
    1082:	22 50       	subi	r18, 0x02	; 2
    1084:	31 09       	sbc	r19, r1
    1086:	2d 93       	st	X+, r18
    1088:	3c 93       	st	X, r19
    108a:	3a c0       	rjmp	.+116    	; 0x1100 <malloc+0x122>
    108c:	20 91 8e 00 	lds	r18, 0x008E
    1090:	30 91 8f 00 	lds	r19, 0x008F
    1094:	23 2b       	or	r18, r19
    1096:	41 f4       	brne	.+16     	; 0x10a8 <malloc+0xca>
    1098:	20 91 7a 00 	lds	r18, 0x007A
    109c:	30 91 7b 00 	lds	r19, 0x007B
    10a0:	30 93 8f 00 	sts	0x008F, r19
    10a4:	20 93 8e 00 	sts	0x008E, r18
    10a8:	20 91 78 00 	lds	r18, 0x0078
    10ac:	30 91 79 00 	lds	r19, 0x0079
    10b0:	21 15       	cp	r18, r1
    10b2:	31 05       	cpc	r19, r1
    10b4:	41 f4       	brne	.+16     	; 0x10c6 <malloc+0xe8>
    10b6:	2d b7       	in	r18, 0x3d	; 61
    10b8:	3e b7       	in	r19, 0x3e	; 62
    10ba:	40 91 7c 00 	lds	r20, 0x007C
    10be:	50 91 7d 00 	lds	r21, 0x007D
    10c2:	24 1b       	sub	r18, r20
    10c4:	35 0b       	sbc	r19, r21
    10c6:	e0 91 8e 00 	lds	r30, 0x008E
    10ca:	f0 91 8f 00 	lds	r31, 0x008F
    10ce:	e2 17       	cp	r30, r18
    10d0:	f3 07       	cpc	r31, r19
    10d2:	a0 f4       	brcc	.+40     	; 0x10fc <malloc+0x11e>
    10d4:	2e 1b       	sub	r18, r30
    10d6:	3f 0b       	sbc	r19, r31
    10d8:	28 17       	cp	r18, r24
    10da:	39 07       	cpc	r19, r25
    10dc:	78 f0       	brcs	.+30     	; 0x10fc <malloc+0x11e>
    10de:	ac 01       	movw	r20, r24
    10e0:	4e 5f       	subi	r20, 0xFE	; 254
    10e2:	5f 4f       	sbci	r21, 0xFF	; 255
    10e4:	24 17       	cp	r18, r20
    10e6:	35 07       	cpc	r19, r21
    10e8:	48 f0       	brcs	.+18     	; 0x10fc <malloc+0x11e>
    10ea:	4e 0f       	add	r20, r30
    10ec:	5f 1f       	adc	r21, r31
    10ee:	50 93 8f 00 	sts	0x008F, r21
    10f2:	40 93 8e 00 	sts	0x008E, r20
    10f6:	81 93       	st	Z+, r24
    10f8:	91 93       	st	Z+, r25
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <malloc+0x122>
    10fc:	e0 e0       	ldi	r30, 0x00	; 0
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	cf 01       	movw	r24, r30
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <free>:
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	09 f4       	brne	.+2      	; 0x1116 <free+0xe>
    1114:	8c c0       	rjmp	.+280    	; 0x122e <free+0x126>
    1116:	fc 01       	movw	r30, r24
    1118:	32 97       	sbiw	r30, 0x02	; 2
    111a:	13 82       	std	Z+3, r1	; 0x03
    111c:	12 82       	std	Z+2, r1	; 0x02
    111e:	00 91 90 00 	lds	r16, 0x0090
    1122:	10 91 91 00 	lds	r17, 0x0091
    1126:	01 15       	cp	r16, r1
    1128:	11 05       	cpc	r17, r1
    112a:	81 f4       	brne	.+32     	; 0x114c <free+0x44>
    112c:	20 81       	ld	r18, Z
    112e:	31 81       	ldd	r19, Z+1	; 0x01
    1130:	82 0f       	add	r24, r18
    1132:	93 1f       	adc	r25, r19
    1134:	20 91 8e 00 	lds	r18, 0x008E
    1138:	30 91 8f 00 	lds	r19, 0x008F
    113c:	28 17       	cp	r18, r24
    113e:	39 07       	cpc	r19, r25
    1140:	79 f5       	brne	.+94     	; 0x11a0 <free+0x98>
    1142:	f0 93 8f 00 	sts	0x008F, r31
    1146:	e0 93 8e 00 	sts	0x008E, r30
    114a:	71 c0       	rjmp	.+226    	; 0x122e <free+0x126>
    114c:	d8 01       	movw	r26, r16
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	ae 17       	cp	r26, r30
    1154:	bf 07       	cpc	r27, r31
    1156:	50 f4       	brcc	.+20     	; 0x116c <free+0x64>
    1158:	12 96       	adiw	r26, 0x02	; 2
    115a:	2d 91       	ld	r18, X+
    115c:	3c 91       	ld	r19, X
    115e:	13 97       	sbiw	r26, 0x03	; 3
    1160:	ad 01       	movw	r20, r26
    1162:	21 15       	cp	r18, r1
    1164:	31 05       	cpc	r19, r1
    1166:	09 f1       	breq	.+66     	; 0x11aa <free+0xa2>
    1168:	d9 01       	movw	r26, r18
    116a:	f3 cf       	rjmp	.-26     	; 0x1152 <free+0x4a>
    116c:	9d 01       	movw	r18, r26
    116e:	da 01       	movw	r26, r20
    1170:	33 83       	std	Z+3, r19	; 0x03
    1172:	22 83       	std	Z+2, r18	; 0x02
    1174:	60 81       	ld	r22, Z
    1176:	71 81       	ldd	r23, Z+1	; 0x01
    1178:	86 0f       	add	r24, r22
    117a:	97 1f       	adc	r25, r23
    117c:	82 17       	cp	r24, r18
    117e:	93 07       	cpc	r25, r19
    1180:	69 f4       	brne	.+26     	; 0x119c <free+0x94>
    1182:	ec 01       	movw	r28, r24
    1184:	28 81       	ld	r18, Y
    1186:	39 81       	ldd	r19, Y+1	; 0x01
    1188:	26 0f       	add	r18, r22
    118a:	37 1f       	adc	r19, r23
    118c:	2e 5f       	subi	r18, 0xFE	; 254
    118e:	3f 4f       	sbci	r19, 0xFF	; 255
    1190:	31 83       	std	Z+1, r19	; 0x01
    1192:	20 83       	st	Z, r18
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	9b 81       	ldd	r25, Y+3	; 0x03
    1198:	93 83       	std	Z+3, r25	; 0x03
    119a:	82 83       	std	Z+2, r24	; 0x02
    119c:	45 2b       	or	r20, r21
    119e:	29 f4       	brne	.+10     	; 0x11aa <free+0xa2>
    11a0:	f0 93 91 00 	sts	0x0091, r31
    11a4:	e0 93 90 00 	sts	0x0090, r30
    11a8:	42 c0       	rjmp	.+132    	; 0x122e <free+0x126>
    11aa:	13 96       	adiw	r26, 0x03	; 3
    11ac:	fc 93       	st	X, r31
    11ae:	ee 93       	st	-X, r30
    11b0:	12 97       	sbiw	r26, 0x02	; 2
    11b2:	ed 01       	movw	r28, r26
    11b4:	49 91       	ld	r20, Y+
    11b6:	59 91       	ld	r21, Y+
    11b8:	9e 01       	movw	r18, r28
    11ba:	24 0f       	add	r18, r20
    11bc:	35 1f       	adc	r19, r21
    11be:	e2 17       	cp	r30, r18
    11c0:	f3 07       	cpc	r31, r19
    11c2:	71 f4       	brne	.+28     	; 0x11e0 <free+0xd8>
    11c4:	80 81       	ld	r24, Z
    11c6:	91 81       	ldd	r25, Z+1	; 0x01
    11c8:	84 0f       	add	r24, r20
    11ca:	95 1f       	adc	r25, r21
    11cc:	02 96       	adiw	r24, 0x02	; 2
    11ce:	11 96       	adiw	r26, 0x01	; 1
    11d0:	9c 93       	st	X, r25
    11d2:	8e 93       	st	-X, r24
    11d4:	82 81       	ldd	r24, Z+2	; 0x02
    11d6:	93 81       	ldd	r25, Z+3	; 0x03
    11d8:	13 96       	adiw	r26, 0x03	; 3
    11da:	9c 93       	st	X, r25
    11dc:	8e 93       	st	-X, r24
    11de:	12 97       	sbiw	r26, 0x02	; 2
    11e0:	e0 e0       	ldi	r30, 0x00	; 0
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	d8 01       	movw	r26, r16
    11e6:	12 96       	adiw	r26, 0x02	; 2
    11e8:	8d 91       	ld	r24, X+
    11ea:	9c 91       	ld	r25, X
    11ec:	13 97       	sbiw	r26, 0x03	; 3
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <free+0xf0>
    11f2:	f8 01       	movw	r30, r16
    11f4:	8c 01       	movw	r16, r24
    11f6:	f6 cf       	rjmp	.-20     	; 0x11e4 <free+0xdc>
    11f8:	8d 91       	ld	r24, X+
    11fa:	9c 91       	ld	r25, X
    11fc:	98 01       	movw	r18, r16
    11fe:	2e 5f       	subi	r18, 0xFE	; 254
    1200:	3f 4f       	sbci	r19, 0xFF	; 255
    1202:	82 0f       	add	r24, r18
    1204:	93 1f       	adc	r25, r19
    1206:	20 91 8e 00 	lds	r18, 0x008E
    120a:	30 91 8f 00 	lds	r19, 0x008F
    120e:	28 17       	cp	r18, r24
    1210:	39 07       	cpc	r19, r25
    1212:	69 f4       	brne	.+26     	; 0x122e <free+0x126>
    1214:	30 97       	sbiw	r30, 0x00	; 0
    1216:	29 f4       	brne	.+10     	; 0x1222 <free+0x11a>
    1218:	10 92 91 00 	sts	0x0091, r1
    121c:	10 92 90 00 	sts	0x0090, r1
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <free+0x11e>
    1222:	13 82       	std	Z+3, r1	; 0x03
    1224:	12 82       	std	Z+2, r1	; 0x02
    1226:	10 93 8f 00 	sts	0x008F, r17
    122a:	00 93 8e 00 	sts	0x008E, r16
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	08 95       	ret

00001238 <_exit>:
    1238:	f8 94       	cli

0000123a <__stop_program>:
    123a:	ff cf       	rjmp	.-2      	; 0x123a <__stop_program>
