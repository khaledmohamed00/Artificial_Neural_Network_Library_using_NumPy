
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000a18  00000aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080008e  0080008e  00000ada  2**0
                  ALLOC
  3 .stab         00001c80  00000000  00000000  00000adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001132  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000388e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000038a0  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 33 02 	call	0x466	; 0x466 <main>
  8a:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_u8SetPinValue>:
/**************************************************DIO_u8SetPinValue*******************************************************************************/
/**********************************************************************************************************************************/
/**********************************************************************************************************************************/
u8 DIO_u8SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy){

if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	d8 f4       	brcc	.+54     	; 0xcc <DIO_u8SetPinValue+0x3a>
  96:	68 30       	cpi	r22, 0x08	; 8
  98:	c8 f4       	brcc	.+50     	; 0xcc <DIO_u8SetPinValue+0x3a>
  9a:	90 e0       	ldi	r25, 0x00	; 0

if(u8PinValCopy==HIGH){
SET_BIT(*PORT_Output[u8PortIdCopy],u8PinIdCopy);
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	fc 01       	movw	r30, r24
  a2:	e0 5a       	subi	r30, 0xA0	; 160
  a4:	ff 4f       	sbci	r31, 0xFF	; 255
  a6:	01 90       	ld	r0, Z+
  a8:	f0 81       	ld	r31, Z
  aa:	e0 2d       	mov	r30, r0
  ac:	20 81       	ld	r18, Z
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <DIO_u8SetPinValue+0x24>
  b4:	88 0f       	add	r24, r24
  b6:	6a 95       	dec	r22
  b8:	ea f7       	brpl	.-6      	; 0xb4 <DIO_u8SetPinValue+0x22>
/**********************************************************************************************************************************/
u8 DIO_u8SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy){

if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){

if(u8PinValCopy==HIGH){
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	11 f4       	brne	.+4      	; 0xc2 <DIO_u8SetPinValue+0x30>
SET_BIT(*PORT_Output[u8PortIdCopy],u8PinIdCopy);
  be:	82 2b       	or	r24, r18
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_u8SetPinValue+0x34>

}
else
{
CLR_BIT(*PORT_Output[u8PortIdCopy],u8PinIdCopy);
  c2:	80 95       	com	r24
  c4:	82 23       	and	r24, r18
  c6:	80 83       	st	Z, r24
}

return SUCCESS;
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	08 95       	ret
}

else{

return ERROR;
  cc:	8f ef       	ldi	r24, 0xFF	; 255

}



}
  ce:	08 95       	ret

000000d0 <DIO_u8GetPinValue>:
/**********************************************************************************************************************************/

u8 DIO_u8GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy,u8* u8ptrPinValCopy){


if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){
  d0:	84 30       	cpi	r24, 0x04	; 4
  d2:	b8 f4       	brcc	.+46     	; 0x102 <DIO_u8GetPinValue+0x32>
  d4:	68 30       	cpi	r22, 0x08	; 8
  d6:	a8 f4       	brcc	.+42     	; 0x102 <DIO_u8GetPinValue+0x32>
*u8ptrPinValCopy=GET_BIT(*PORT_Input[u8PortIdCopy],u8PinIdCopy);
  d8:	e8 2f       	mov	r30, r24
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	e8 59       	subi	r30, 0x98	; 152
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	01 90       	ld	r0, Z+
  e6:	f0 81       	ld	r31, Z
  e8:	e0 2d       	mov	r30, r0
  ea:	80 81       	ld	r24, Z
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_u8GetPinValue+0x24>
  f0:	95 95       	asr	r25
  f2:	87 95       	ror	r24
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_u8GetPinValue+0x20>
  f8:	81 70       	andi	r24, 0x01	; 1
  fa:	fa 01       	movw	r30, r20
  fc:	80 83       	st	Z, r24
return SUCCESS;
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	08 95       	ret
}

else{

return ERROR;
 102:	8f ef       	ldi	r24, 0xFF	; 255

}


}
 104:	08 95       	ret

00000106 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy){


if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	a8 f4       	brcc	.+42     	; 0x134 <DIO_GetPinValue+0x2e>
 10a:	68 30       	cpi	r22, 0x08	; 8
 10c:	98 f4       	brcc	.+38     	; 0x134 <DIO_GetPinValue+0x2e>
GET_BIT(*PORT_Input[u8PortIdCopy],u8PinIdCopy);
 10e:	e8 2f       	mov	r30, r24
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	e8 59       	subi	r30, 0x98	; 152
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	01 90       	ld	r0, Z+
 11c:	f0 81       	ld	r31, Z
 11e:	e0 2d       	mov	r30, r0
 120:	80 81       	ld	r24, Z
return GET_BIT(*PORT_Input[u8PortIdCopy],u8PinIdCopy);
 122:	80 81       	ld	r24, Z
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_GetPinValue+0x26>
 128:	95 95       	asr	r25
 12a:	87 95       	ror	r24
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_GetPinValue+0x22>
 130:	81 70       	andi	r24, 0x01	; 1
 132:	08 95       	ret
}

else{

return ERROR;
 134:	8f ef       	ldi	r24, 0xFF	; 255

}


}
 136:	08 95       	ret

00000138 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){


if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){
 138:	84 30       	cpi	r24, 0x04	; 4
 13a:	d8 f4       	brcc	.+54     	; 0x172 <DIO_u8SetPinDirection+0x3a>
 13c:	68 30       	cpi	r22, 0x08	; 8
 13e:	c8 f4       	brcc	.+50     	; 0x172 <DIO_u8SetPinDirection+0x3a>
 140:	90 e0       	ldi	r25, 0x00	; 0

if(u8PinDirCopy==HIGH)
{SET_BIT(*PORT_Direction[u8PortIdCopy],u8PinIdCopy);
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	fc 01       	movw	r30, r24
 148:	e0 59       	subi	r30, 0x90	; 144
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	01 90       	ld	r0, Z+
 14e:	f0 81       	ld	r31, Z
 150:	e0 2d       	mov	r30, r0
 152:	20 81       	ld	r18, Z
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	01 c0       	rjmp	.+2      	; 0x15c <DIO_u8SetPinDirection+0x24>
 15a:	88 0f       	add	r24, r24
 15c:	6a 95       	dec	r22
 15e:	ea f7       	brpl	.-6      	; 0x15a <DIO_u8SetPinDirection+0x22>
u8 DIO_u8SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){


if(u8PortIdCopy<=PORTD && u8PinIdCopy<=PIN7){

if(u8PinDirCopy==HIGH)
 160:	41 30       	cpi	r20, 0x01	; 1
 162:	11 f4       	brne	.+4      	; 0x168 <DIO_u8SetPinDirection+0x30>
{SET_BIT(*PORT_Direction[u8PortIdCopy],u8PinIdCopy);
 164:	82 2b       	or	r24, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_u8SetPinDirection+0x34>
}
else
{
CLR_BIT(*PORT_Direction[u8PortIdCopy],u8PinIdCopy);
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	80 83       	st	Z, r24
}

return SUCCESS;
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 95       	ret

}

else{

return ERROR;
 172:	8f ef       	ldi	r24, 0xFF	; 255

}


}
 174:	08 95       	ret

00000176 <DIO_u8SetPortDirection>:



u8 DIO_u8SetPortDirection (u8 u8PortIdCopy, u8 u8PortDirCopy){

if(u8PortIdCopy<=PORTD){
 176:	84 30       	cpi	r24, 0x04	; 4
 178:	60 f4       	brcc	.+24     	; 0x192 <DIO_u8SetPortDirection+0x1c>

*PORT_Direction[u8PortIdCopy]=u8PortDirCopy;
 17a:	e8 2f       	mov	r30, r24
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	e0 59       	subi	r30, 0x90	; 144
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	01 90       	ld	r0, Z+
 188:	f0 81       	ld	r31, Z
 18a:	e0 2d       	mov	r30, r0
 18c:	60 83       	st	Z, r22


return SUCCESS;
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	08 95       	ret

}

else{

return ERROR;
 192:	8f ef       	ldi	r24, 0xFF	; 255

}

}
 194:	08 95       	ret

00000196 <DIO_u8SetPortValue>:
/**********************************************************************************************************************************/



u8 DIO_u8SetPortValue(u8 u8PortIdCopy, u8 u8PortValCopy){
if(u8PortIdCopy<=PORTD && u8PortValCopy<=0xff){
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	60 f4       	brcc	.+24     	; 0x1b2 <DIO_u8SetPortValue+0x1c>

*PORT_Output[u8PortIdCopy]=u8PortValCopy;
 19a:	e8 2f       	mov	r30, r24
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	e0 5a       	subi	r30, 0xA0	; 160
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	01 90       	ld	r0, Z+
 1a8:	f0 81       	ld	r31, Z
 1aa:	e0 2d       	mov	r30, r0
 1ac:	60 83       	st	Z, r22

return SUCCESS;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret

}

else{

return ERROR;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255

}


}
 1b4:	08 95       	ret

000001b6 <LCD_cmd>:

void LCD_cmd(u8 cmd)
{


DIO_u8SetPortValue(LCD_DATA,cmd);
 1b6:	68 2f       	mov	r22, r24
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_u8SetPortValue>
DIO_u8SetPortValue(LCD_ctrl,(0<<rs)|(0<<rw)|(1<<en));
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_u8SetPortValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	8f ec       	ldi	r24, 0xCF	; 207
 1c8:	97 e0       	ldi	r25, 0x07	; 7
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_cmd+0x14>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_cmd+0x1a>
 1d0:	00 00       	nop
_delay_ms(1);
DIO_u8SetPortValue(LCD_ctrl,(0<<rs)|(0<<rw)|(0<<en));
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_u8SetPortValue>
 1da:	9f e7       	ldi	r25, 0x7F	; 127
 1dc:	28 e3       	ldi	r18, 0x38	; 56
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	91 50       	subi	r25, 0x01	; 1
 1e2:	20 40       	sbci	r18, 0x00	; 0
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <LCD_cmd+0x2a>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_cmd+0x34>
 1ea:	00 00       	nop
 1ec:	08 95       	ret

000001ee <init_LCD>:
#include "DIO_int.h"
#include "LCD_int.h"
#include "LCD_config.h"
void init_LCD(void)
{
DIO_u8SetPortDirection(LCD_DATA,0xff);
 1ee:	6f ef       	ldi	r22, 0xFF	; 255
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_u8SetPortDirection>
DIO_u8SetPortDirection(LCD_ctrl,0x07);
 1f6:	67 e0       	ldi	r22, 0x07	; 7
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_u8SetPortDirection>

LCD_cmd(0x38);                            // initialization of 16X2 LCD in 8bit mode
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_cmd>
 204:	8f ec       	ldi	r24, 0xCF	; 207
 206:	97 e0       	ldi	r25, 0x07	; 7
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <init_LCD+0x1a>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <init_LCD+0x20>
 20e:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x01);                                 // clear LCD
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_cmd>
 216:	8f ec       	ldi	r24, 0xCF	; 207
 218:	97 e0       	ldi	r25, 0x07	; 7
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <init_LCD+0x2c>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <init_LCD+0x32>
 220:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x0E);                        // cursor ON
 222:	8e e0       	ldi	r24, 0x0E	; 14
 224:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_cmd>
 228:	8f ec       	ldi	r24, 0xCF	; 207
 22a:	97 e0       	ldi	r25, 0x07	; 7
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <init_LCD+0x3e>
 230:	00 c0       	rjmp	.+0      	; 0x232 <init_LCD+0x44>
 232:	00 00       	nop
_delay_ms(1);
LCD_cmd(0x80);                     // —8 go to first line and –0 is for 0th position
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_cmd>
 23a:	8f ec       	ldi	r24, 0xCF	; 207
 23c:	97 e0       	ldi	r25, 0x07	; 7
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <init_LCD+0x50>
 242:	00 c0       	rjmp	.+0      	; 0x244 <init_LCD+0x56>
 244:	00 00       	nop
 246:	08 95       	ret

00000248 <LCD_write>:
}

void LCD_write(u8 data)
{

DIO_u8SetPortValue(LCD_DATA,data);
 248:	68 2f       	mov	r22, r24
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_u8SetPortValue>
DIO_u8SetPortValue(LCD_ctrl,(1<<rs)|(0<<rw)|(1<<en));
 250:	65 e0       	ldi	r22, 0x05	; 5
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_u8SetPortValue>
 258:	8f ec       	ldi	r24, 0xCF	; 207
 25a:	97 e0       	ldi	r25, 0x07	; 7
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <LCD_write+0x14>
 260:	00 c0       	rjmp	.+0      	; 0x262 <LCD_write+0x1a>
 262:	00 00       	nop
_delay_ms(1);

DIO_u8SetPortValue(LCD_ctrl, (1<<rs)|(0<<rw)|(0<<en));
 264:	64 e0       	ldi	r22, 0x04	; 4
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_u8SetPortValue>
 26c:	9f e7       	ldi	r25, 0x7F	; 127
 26e:	28 e3       	ldi	r18, 0x38	; 56
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	91 50       	subi	r25, 0x01	; 1
 274:	20 40       	sbci	r18, 0x00	; 0
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <LCD_write+0x2a>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_write+0x34>
 27c:	00 00       	nop
 27e:	08 95       	ret

00000280 <LCD_write_string>:
return ;

}

void LCD_write_string(u8 *str)             //store address value of the string in pointer *str
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	ec 01       	movw	r28, r24
int i=0;
while(str[i]!='\0')                               // loop will go on till the NULL character in the string
 286:	89 91       	ld	r24, Y+
 288:	88 23       	and	r24, r24
 28a:	19 f0       	breq	.+6      	; 0x292 <LCD_write_string+0x12>
{
LCD_write(str[i]);                            // sending data on LCD byte by byte
 28c:	0e 94 24 01 	call	0x248	; 0x248 <LCD_write>
 290:	fa cf       	rjmp	.-12     	; 0x286 <LCD_write_string+0x6>
i++;
}
return;
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <LCD_write_int>:

void LCD_write_int(s16 number){
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	18 2f       	mov	r17, r24
 2a6:	09 2f       	mov	r16, r25

s16 num=number;
 2a8:	68 2f       	mov	r22, r24
 2aa:	79 2f       	mov	r23, r25
s16 digits=0;
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
s16 index;
while(num>0){
digits++;
num/=10;
 2b0:	ea e0       	ldi	r30, 0x0A	; 10
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	ce 01       	movw	r24, r28
 2b6:	01 96       	adiw	r24, 0x01	; 1
void LCD_write_int(s16 number){

s16 num=number;
s16 digits=0;
s16 index;
while(num>0){
 2b8:	16 16       	cp	r1, r22
 2ba:	17 06       	cpc	r1, r23
 2bc:	34 f4       	brge	.+12     	; 0x2ca <LCD_write_int+0x32>
 2be:	ec 01       	movw	r28, r24
digits++;
num/=10;
 2c0:	cb 01       	movw	r24, r22
 2c2:	bf 01       	movw	r22, r30
 2c4:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__divmodhi4>
 2c8:	f5 cf       	rjmp	.-22     	; 0x2b4 <LCD_write_int+0x1c>
}
index=digits-1;
u8 * arr=malloc((digits+1)* sizeof(u8));
 2ca:	0e 94 dd 03 	call	0x7ba	; 0x7ba <malloc>
 2ce:	fc 01       	movw	r30, r24
while(index>=0){
 2d0:	9e 01       	movw	r18, r28
s16 rem=number%10;
 2d2:	8a e0       	ldi	r24, 0x0A	; 10
 2d4:	e8 2e       	mov	r14, r24
 2d6:	f1 2c       	mov	r15, r1
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	31 09       	sbc	r19, r1
digits++;
num/=10;
}
index=digits-1;
u8 * arr=malloc((digits+1)* sizeof(u8));
while(index>=0){
 2dc:	37 fd       	sbrc	r19, 7
 2de:	0d c0       	rjmp	.+26     	; 0x2fa <LCD_write_int+0x62>
s16 rem=number%10;
number=number/10;
 2e0:	81 2f       	mov	r24, r17
 2e2:	90 2f       	mov	r25, r16
 2e4:	b7 01       	movw	r22, r14
 2e6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__divmodhi4>
 2ea:	16 2f       	mov	r17, r22
 2ec:	07 2f       	mov	r16, r23
 2ee:	df 01       	movw	r26, r30
 2f0:	a2 0f       	add	r26, r18
 2f2:	b3 1f       	adc	r27, r19
arr[index--]=rem+'0';
 2f4:	80 5d       	subi	r24, 0xD0	; 208
 2f6:	8c 93       	st	X, r24
 2f8:	ef cf       	rjmp	.-34     	; 0x2d8 <LCD_write_int+0x40>
}
arr[digits]='\0';
 2fa:	ce 0f       	add	r28, r30
 2fc:	df 1f       	adc	r29, r31
 2fe:	18 82       	st	Y, r1
LCD_write_string(arr);
 300:	cf 01       	movw	r24, r30

}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
s16 rem=number%10;
number=number/10;
arr[index--]=rem+'0';
}
arr[digits]='\0';
LCD_write_string(arr);
 30e:	0c 94 40 01 	jmp	0x280	; 0x280 <LCD_write_string>

00000312 <LCD_write_double>:

}

void LCD_write_double(f64 number){
 312:	cf 92       	push	r12
 314:	df 92       	push	r13
 316:	ef 92       	push	r14
 318:	ff 92       	push	r15
 31a:	6b 01       	movw	r12, r22
 31c:	7c 01       	movw	r14, r24

s16 num=(s16)number;
 31e:	0e 94 87 02 	call	0x50e	; 0x50e <__fixsfsi>

LCD_write_int(num);
 322:	cb 01       	movw	r24, r22
 324:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_write_int>
LCD_write('.');
 328:	8e e2       	ldi	r24, 0x2E	; 46
 32a:	0e 94 24 01 	call	0x248	; 0x248 <LCD_write>
s16 factor=(s16)(fmod( number, 1.0 )*100);
 32e:	20 e0       	ldi	r18, 0x00	; 0
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	40 e8       	ldi	r20, 0x80	; 128
 334:	5f e3       	ldi	r21, 0x3F	; 63
 336:	c7 01       	movw	r24, r14
 338:	b6 01       	movw	r22, r12
 33a:	0e 94 c8 02 	call	0x590	; 0x590 <fmod>
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	48 ec       	ldi	r20, 0xC8	; 200
 344:	52 e4       	ldi	r21, 0x42	; 66
 346:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__mulsf3>
 34a:	0e 94 87 02 	call	0x50e	; 0x50e <__fixsfsi>
LCD_write_int(factor);
 34e:	cb 01       	movw	r24, r22

}
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	df 90       	pop	r13
 356:	cf 90       	pop	r12
s16 num=(s16)number;

LCD_write_int(num);
LCD_write('.');
s16 factor=(s16)(fmod( number, 1.0 )*100);
LCD_write_int(factor);
 358:	0c 94 4c 01 	jmp	0x298	; 0x298 <LCD_write_int>

0000035c <LCD_build_special_char>:

}

void LCD_build_special_char(u8 location,u8 *ptr){
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29

if(location<8){
 364:	88 30       	cpi	r24, 0x08	; 8
 366:	80 f4       	brcc	.+32     	; 0x388 <LCD_build_special_char+0x2c>
 368:	8b 01       	movw	r16, r22

LCD_cmd(0x40+location*8);
 36a:	88 0f       	add	r24, r24
 36c:	88 0f       	add	r24, r24
 36e:	88 0f       	add	r24, r24
 370:	80 5c       	subi	r24, 0xC0	; 192
 372:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_cmd>
 376:	e8 01       	movw	r28, r16
 378:	08 5f       	subi	r16, 0xF8	; 248
 37a:	1f 4f       	sbci	r17, 0xFF	; 255
u8 i=0;
for(i=0;i<8;i++){
LCD_write(ptr[i]);
 37c:	89 91       	ld	r24, Y+
 37e:	0e 94 24 01 	call	0x248	; 0x248 <LCD_write>

if(location<8){

LCD_cmd(0x40+location*8);
u8 i=0;
for(i=0;i<8;i++){
 382:	c0 17       	cp	r28, r16
 384:	d1 07       	cpc	r29, r17
 386:	d1 f7       	brne	.-12     	; 0x37c <LCD_build_special_char+0x20>

}

}

}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	08 95       	ret

00000392 <LCD_goto>:

void LCD_goto(u8 x,u8 y){

if(x<16){
 392:	80 31       	cpi	r24, 0x10	; 16
 394:	48 f4       	brcc	.+18     	; 0x3a8 <LCD_goto+0x16>

if(y==0){
 396:	61 11       	cpse	r22, r1
 398:	02 c0       	rjmp	.+4      	; 0x39e <LCD_goto+0xc>
LCD_cmd(0x80+x);
 39a:	80 58       	subi	r24, 0x80	; 128
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <LCD_goto+0x12>
}else if(y==1){
 39e:	61 30       	cpi	r22, 0x01	; 1
 3a0:	19 f4       	brne	.+6      	; 0x3a8 <LCD_goto+0x16>
LCD_cmd(0xBF+x);
 3a2:	81 54       	subi	r24, 0x41	; 65
 3a4:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <LCD_cmd>
 3a8:	08 95       	ret

000003aa <KPD_u8GetPressedKey>:
/* Output     ! Nothing                                                                */
/***************************************************************************************/


u8 KPD_u8GetPressedKey(void)
{
 3aa:	df 92       	push	r13
 3ac:	ef 92       	push	r14
 3ae:	ff 92       	push	r15
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	9e e7       	ldi	r25, 0x7E	; 126
 3ba:	e9 2e       	mov	r14, r25
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	f9 2e       	mov	r15, r25

  u8 LOC_u8Row;
  u8 LOC_u8Retrun = NOT_PRESSED;
  do{
  /* Initialize the switch status to NOT Pressed                                                                     */
   LOC_u8Retrun = NOT_PRESSED;
 3c0:	de e4       	ldi	r29, 0x4E	; 78

  /* Looping on columns of the Key Pad                                                                               */
  for (LOC_u8Column = 0 + COL_INIT; LOC_u8Column < COL_FIN; LOC_u8Column++)
 3c2:	c0 e0       	ldi	r28, 0x00	; 0
  {
    /* Activate the Column                                                                                           */
    DIO_u8SetPinValue(PORT, LOC_u8Column, LOW);
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	6c 2f       	mov	r22, r28
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
 3ce:	00 e0       	ldi	r16, 0x00	; 0
 3d0:	10 e0       	ldi	r17, 0x00	; 0
 3d2:	84 e0       	ldi	r24, 0x04	; 4
 3d4:	d8 2e       	mov	r13, r24
 3d6:	d0 0e       	add	r13, r16

    /* Loop on the rows of the Key Pad                                                                               */
    for (LOC_u8Row = 0 + ROW_INIT; LOC_u8Row < ROW_FIN; LOC_u8Row++)
    {
      /* Check the status of the switch                                                                              */
      if (!DIO_GetPinValue(PORT, LOC_u8Row))
 3d8:	6d 2d       	mov	r22, r13
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 83 00 	call	0x106	; 0x106 <DIO_GetPinValue>
 3e0:	81 11       	cpse	r24, r1
 3e2:	10 c0       	rjmp	.+32     	; 0x404 <KPD_u8GetPressedKey+0x5a>
 3e4:	f7 01       	movw	r30, r14
 3e6:	e0 0f       	add	r30, r16
 3e8:	f1 1f       	adc	r31, r17
      {
        /* Get the value of the currently pressed switch                                                             */
        LOC_u8Retrun = KPD_au8SwitchVal[LOC_u8Column - COL_INIT][LOC_u8Row - ROW_INIT];
 3ea:	d0 81       	ld	r29, Z

        /* Wait until the switch is released (Single Press)                                                          */
        while (!DIO_GetPinValue(PORT, LOC_u8Row))
 3ec:	6d 2d       	mov	r22, r13
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 83 00 	call	0x106	; 0x106 <DIO_GetPinValue>
 3f4:	88 23       	and	r24, r24
 3f6:	d1 f3       	breq	.-12     	; 0x3ec <KPD_u8GetPressedKey+0x42>
 3f8:	8f e1       	ldi	r24, 0x1F	; 31
 3fa:	9e e4       	ldi	r25, 0x4E	; 78
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <KPD_u8GetPressedKey+0x52>
 400:	00 c0       	rjmp	.+0      	; 0x402 <KPD_u8GetPressedKey+0x58>
 402:	00 00       	nop
 404:	0f 5f       	subi	r16, 0xFF	; 255
 406:	1f 4f       	sbci	r17, 0xFF	; 255
  {
    /* Activate the Column                                                                                           */
    DIO_u8SetPinValue(PORT, LOC_u8Column, LOW);

    /* Loop on the rows of the Key Pad                                                                               */
    for (LOC_u8Row = 0 + ROW_INIT; LOC_u8Row < ROW_FIN; LOC_u8Row++)
 408:	04 30       	cpi	r16, 0x04	; 4
 40a:	11 05       	cpc	r17, r1
 40c:	11 f7       	brne	.-60     	; 0x3d2 <KPD_u8GetPressedKey+0x28>

      }
    }

    /* Deactivate the Column                                                                                         */
    DIO_u8SetPinValue(PORT, LOC_u8Column, HIGH);
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	6c 2f       	mov	r22, r28
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinValue>
  do{
  /* Initialize the switch status to NOT Pressed                                                                     */
   LOC_u8Retrun = NOT_PRESSED;

  /* Looping on columns of the Key Pad                                                                               */
  for (LOC_u8Column = 0 + COL_INIT; LOC_u8Column < COL_FIN; LOC_u8Column++)
 418:	cf 5f       	subi	r28, 0xFF	; 255
 41a:	94 e0       	ldi	r25, 0x04	; 4
 41c:	e9 0e       	add	r14, r25
 41e:	f1 1c       	adc	r15, r1
 420:	c4 30       	cpi	r28, 0x04	; 4
 422:	81 f6       	brne	.-96     	; 0x3c4 <KPD_u8GetPressedKey+0x1a>
    }

    /* Deactivate the Column                                                                                         */
    DIO_u8SetPinValue(PORT, LOC_u8Column, HIGH);
  }
  }while(LOC_u8Retrun == NOT_PRESSED);
 424:	de 34       	cpi	r29, 0x4E	; 78
 426:	41 f2       	breq	.-112    	; 0x3b8 <KPD_u8GetPressedKey+0xe>
  return LOC_u8Retrun;
}
 428:	8d 2f       	mov	r24, r29
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	df 90       	pop	r13
 438:	08 95       	ret

0000043a <ADC_Init>:
#include "ADC_register.h"

void ADC_Init (void)
{
	// ADC Enable
	SET_BIT(ADCSRA_Reg,7);
 43a:	37 9a       	sbi	0x06, 7	; 6

	// Prescaler Configuration as 128
	SET_BIT(ADCSRA_Reg,2);
 43c:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA_Reg,1);
 43e:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA_Reg,0);
 440:	30 9a       	sbi	0x06, 0	; 6


	// Referance Voltage as AVCC with external capacitor
	CLR_BIT(ADMUX_Reg,7);
 442:	3f 98       	cbi	0x07, 7	; 7
	SET_BIT(ADMUX_Reg,6);
 444:	3e 9a       	sbi	0x07, 6	; 7

	// ADC Data Rgith Adjustment
	CLR_BIT(ADMUX_Reg,5);
 446:	3d 98       	cbi	0x07, 5	; 7
 448:	08 95       	ret

0000044a <ADCu16_Read>:
 44a:	97 b1       	in	r25, 0x07	; 7
 44c:	90 7e       	andi	r25, 0xE0	; 224
 44e:	97 b9       	out	0x07, r25	; 7
 450:	97 b1       	in	r25, 0x07	; 7
 452:	87 70       	andi	r24, 0x07	; 7
 454:	98 2b       	or	r25, r24
 456:	97 b9       	out	0x07, r25	; 7
 458:	36 9a       	sbi	0x06, 6	; 6
 45a:	34 9b       	sbis	0x06, 4	; 6
 45c:	fe cf       	rjmp	.-4      	; 0x45a <ADCu16_Read+0x10>
 45e:	34 9a       	sbi	0x06, 4	; 6
 460:	84 b1       	in	r24, 0x04	; 4
 462:	95 b1       	in	r25, 0x05	; 5
 464:	08 95       	ret

00000466 <main>:





init_LCD();
 466:	0e 94 f7 00 	call	0x1ee	; 0x1ee <init_LCD>
ADC_Init();
 46a:	0e 94 1d 02 	call	0x43a	; 0x43a <ADC_Init>
DDRB=0x0f;
 46e:	8f e0       	ldi	r24, 0x0F	; 15
 470:	87 bb       	out	0x17, r24	; 23
PORTB=0xff;
 472:	8f ef       	ldi	r24, 0xFF	; 255
 474:	88 bb       	out	0x18, r24	; 24
DDRA&=~(1<<7);
 476:	d7 98       	cbi	0x1a, 7	; 26
u16 digital_value=ADCu16_Read(7);
 478:	87 e0       	ldi	r24, 0x07	; 7
 47a:	0e 94 25 02 	call	0x44a	; 0x44a <ADCu16_Read>
u16 analog_value=(u16)((u32)digital_value*5000/1024);
 47e:	9c 01       	movw	r18, r24
 480:	a8 e8       	ldi	r26, 0x88	; 136
 482:	b3 e1       	ldi	r27, 0x13	; 19
 484:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__umulhisi3>
 488:	dc 01       	movw	r26, r24
 48a:	cb 01       	movw	r24, r22
 48c:	2a e0       	ldi	r18, 0x0A	; 10
 48e:	b6 95       	lsr	r27
 490:	a7 95       	ror	r26
 492:	97 95       	ror	r25
 494:	87 95       	ror	r24
 496:	2a 95       	dec	r18
 498:	d1 f7       	brne	.-12     	; 0x48e <main+0x28>
LCD_write_int(analog_value);
 49a:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_write_int>
//u8 key=KPD_u8GetPressedKey();


//LCD_write(key);

}
 49e:	ff cf       	rjmp	.-2      	; 0x49e <main+0x38>

000004a0 <__divmodhi4>:
 4a0:	97 fb       	bst	r25, 7
 4a2:	07 2e       	mov	r0, r23
 4a4:	16 f4       	brtc	.+4      	; 0x4aa <__divmodhi4+0xa>
 4a6:	00 94       	com	r0
 4a8:	07 d0       	rcall	.+14     	; 0x4b8 <__divmodhi4_neg1>
 4aa:	77 fd       	sbrc	r23, 7
 4ac:	09 d0       	rcall	.+18     	; 0x4c0 <__divmodhi4_neg2>
 4ae:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__udivmodhi4>
 4b2:	07 fc       	sbrc	r0, 7
 4b4:	05 d0       	rcall	.+10     	; 0x4c0 <__divmodhi4_neg2>
 4b6:	3e f4       	brtc	.+14     	; 0x4c6 <__divmodhi4_exit>

000004b8 <__divmodhi4_neg1>:
 4b8:	90 95       	com	r25
 4ba:	81 95       	neg	r24
 4bc:	9f 4f       	sbci	r25, 0xFF	; 255
 4be:	08 95       	ret

000004c0 <__divmodhi4_neg2>:
 4c0:	70 95       	com	r23
 4c2:	61 95       	neg	r22
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255

000004c6 <__divmodhi4_exit>:
 4c6:	08 95       	ret

000004c8 <__umulhisi3>:
 4c8:	a2 9f       	mul	r26, r18
 4ca:	b0 01       	movw	r22, r0
 4cc:	b3 9f       	mul	r27, r19
 4ce:	c0 01       	movw	r24, r0
 4d0:	a3 9f       	mul	r26, r19
 4d2:	70 0d       	add	r23, r0
 4d4:	81 1d       	adc	r24, r1
 4d6:	11 24       	eor	r1, r1
 4d8:	91 1d       	adc	r25, r1
 4da:	b2 9f       	mul	r27, r18
 4dc:	70 0d       	add	r23, r0
 4de:	81 1d       	adc	r24, r1
 4e0:	11 24       	eor	r1, r1
 4e2:	91 1d       	adc	r25, r1
 4e4:	08 95       	ret

000004e6 <__udivmodhi4>:
 4e6:	aa 1b       	sub	r26, r26
 4e8:	bb 1b       	sub	r27, r27
 4ea:	51 e1       	ldi	r21, 0x11	; 17
 4ec:	07 c0       	rjmp	.+14     	; 0x4fc <__udivmodhi4_ep>

000004ee <__udivmodhi4_loop>:
 4ee:	aa 1f       	adc	r26, r26
 4f0:	bb 1f       	adc	r27, r27
 4f2:	a6 17       	cp	r26, r22
 4f4:	b7 07       	cpc	r27, r23
 4f6:	10 f0       	brcs	.+4      	; 0x4fc <__udivmodhi4_ep>
 4f8:	a6 1b       	sub	r26, r22
 4fa:	b7 0b       	sbc	r27, r23

000004fc <__udivmodhi4_ep>:
 4fc:	88 1f       	adc	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	5a 95       	dec	r21
 502:	a9 f7       	brne	.-22     	; 0x4ee <__udivmodhi4_loop>
 504:	80 95       	com	r24
 506:	90 95       	com	r25
 508:	bc 01       	movw	r22, r24
 50a:	cd 01       	movw	r24, r26
 50c:	08 95       	ret

0000050e <__fixsfsi>:
 50e:	0e 94 8e 02 	call	0x51c	; 0x51c <__fixunssfsi>
 512:	68 94       	set
 514:	b1 11       	cpse	r27, r1
 516:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_szero>
 51a:	08 95       	ret

0000051c <__fixunssfsi>:
 51c:	0e 94 38 03 	call	0x670	; 0x670 <__fp_splitA>
 520:	88 f0       	brcs	.+34     	; 0x544 <__fixunssfsi+0x28>
 522:	9f 57       	subi	r25, 0x7F	; 127
 524:	98 f0       	brcs	.+38     	; 0x54c <__fixunssfsi+0x30>
 526:	b9 2f       	mov	r27, r25
 528:	99 27       	eor	r25, r25
 52a:	b7 51       	subi	r27, 0x17	; 23
 52c:	b0 f0       	brcs	.+44     	; 0x55a <__fixunssfsi+0x3e>
 52e:	e1 f0       	breq	.+56     	; 0x568 <__fixunssfsi+0x4c>
 530:	66 0f       	add	r22, r22
 532:	77 1f       	adc	r23, r23
 534:	88 1f       	adc	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	1a f0       	brmi	.+6      	; 0x540 <__fixunssfsi+0x24>
 53a:	ba 95       	dec	r27
 53c:	c9 f7       	brne	.-14     	; 0x530 <__fixunssfsi+0x14>
 53e:	14 c0       	rjmp	.+40     	; 0x568 <__fixunssfsi+0x4c>
 540:	b1 30       	cpi	r27, 0x01	; 1
 542:	91 f0       	breq	.+36     	; 0x568 <__fixunssfsi+0x4c>
 544:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__fp_zero>
 548:	b1 e0       	ldi	r27, 0x01	; 1
 54a:	08 95       	ret
 54c:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_zero>
 550:	67 2f       	mov	r22, r23
 552:	78 2f       	mov	r23, r24
 554:	88 27       	eor	r24, r24
 556:	b8 5f       	subi	r27, 0xF8	; 248
 558:	39 f0       	breq	.+14     	; 0x568 <__fixunssfsi+0x4c>
 55a:	b9 3f       	cpi	r27, 0xF9	; 249
 55c:	cc f3       	brlt	.-14     	; 0x550 <__fixunssfsi+0x34>
 55e:	86 95       	lsr	r24
 560:	77 95       	ror	r23
 562:	67 95       	ror	r22
 564:	b3 95       	inc	r27
 566:	d9 f7       	brne	.-10     	; 0x55e <__fixunssfsi+0x42>
 568:	3e f4       	brtc	.+14     	; 0x578 <__fixunssfsi+0x5c>
 56a:	90 95       	com	r25
 56c:	80 95       	com	r24
 56e:	70 95       	com	r23
 570:	61 95       	neg	r22
 572:	7f 4f       	sbci	r23, 0xFF	; 255
 574:	8f 4f       	sbci	r24, 0xFF	; 255
 576:	9f 4f       	sbci	r25, 0xFF	; 255
 578:	08 95       	ret
 57a:	0e 94 22 03 	call	0x644	; 0x644 <__fp_pscA>
 57e:	20 f0       	brcs	.+8      	; 0x588 <__fixunssfsi+0x6c>
 580:	19 f0       	breq	.+6      	; 0x588 <__fixunssfsi+0x6c>
 582:	0e 94 29 03 	call	0x652	; 0x652 <__fp_pscB>
 586:	50 f4       	brcc	.+20     	; 0x59c <fmod+0xc>
 588:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_nan>
 58c:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_szero>

00000590 <fmod>:
 590:	e9 2f       	mov	r30, r25
 592:	0e 94 30 03 	call	0x660	; 0x660 <__fp_split3>
 596:	88 f3       	brcs	.-30     	; 0x57a <__fixunssfsi+0x5e>
 598:	55 23       	and	r21, r21
 59a:	b1 f3       	breq	.-20     	; 0x588 <__fixunssfsi+0x6c>
 59c:	e7 fb       	bst	r30, 7
 59e:	62 17       	cp	r22, r18
 5a0:	73 07       	cpc	r23, r19
 5a2:	84 07       	cpc	r24, r20
 5a4:	95 07       	cpc	r25, r21
 5a6:	a8 f1       	brcs	.+106    	; 0x612 <fmod+0x82>
 5a8:	89 f3       	breq	.-30     	; 0x58c <__fixunssfsi+0x70>
 5aa:	e9 2f       	mov	r30, r25
 5ac:	ff 27       	eor	r31, r31
 5ae:	88 23       	and	r24, r24
 5b0:	2a f0       	brmi	.+10     	; 0x5bc <fmod+0x2c>
 5b2:	31 97       	sbiw	r30, 0x01	; 1
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	da f7       	brpl	.-10     	; 0x5b2 <fmod+0x22>
 5bc:	95 2f       	mov	r25, r21
 5be:	55 27       	eor	r21, r21
 5c0:	44 23       	and	r20, r20
 5c2:	32 f0       	brmi	.+12     	; 0x5d0 <fmod+0x40>
 5c4:	91 50       	subi	r25, 0x01	; 1
 5c6:	50 40       	sbci	r21, 0x00	; 0
 5c8:	22 0f       	add	r18, r18
 5ca:	33 1f       	adc	r19, r19
 5cc:	44 1f       	adc	r20, r20
 5ce:	d2 f7       	brpl	.-12     	; 0x5c4 <fmod+0x34>
 5d0:	bb 27       	eor	r27, r27
 5d2:	e9 1b       	sub	r30, r25
 5d4:	f5 0b       	sbc	r31, r21
 5d6:	62 1b       	sub	r22, r18
 5d8:	73 0b       	sbc	r23, r19
 5da:	84 0b       	sbc	r24, r20
 5dc:	b1 09       	sbc	r27, r1
 5de:	b1 f2       	breq	.-84     	; 0x58c <__fixunssfsi+0x70>
 5e0:	22 f4       	brpl	.+8      	; 0x5ea <fmod+0x5a>
 5e2:	62 0f       	add	r22, r18
 5e4:	73 1f       	adc	r23, r19
 5e6:	84 1f       	adc	r24, r20
 5e8:	b1 1d       	adc	r27, r1
 5ea:	31 97       	sbiw	r30, 0x01	; 1
 5ec:	2a f0       	brmi	.+10     	; 0x5f8 <fmod+0x68>
 5ee:	66 0f       	add	r22, r22
 5f0:	77 1f       	adc	r23, r23
 5f2:	88 1f       	adc	r24, r24
 5f4:	bb 1f       	adc	r27, r27
 5f6:	ef cf       	rjmp	.-34     	; 0x5d6 <fmod+0x46>
 5f8:	91 50       	subi	r25, 0x01	; 1
 5fa:	50 40       	sbci	r21, 0x00	; 0
 5fc:	62 f0       	brmi	.+24     	; 0x616 <fmod+0x86>
 5fe:	41 f0       	breq	.+16     	; 0x610 <fmod+0x80>
 600:	88 23       	and	r24, r24
 602:	32 f0       	brmi	.+12     	; 0x610 <fmod+0x80>
 604:	66 0f       	add	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	88 1f       	adc	r24, r24
 60a:	91 50       	subi	r25, 0x01	; 1
 60c:	50 40       	sbci	r21, 0x00	; 0
 60e:	c1 f7       	brne	.-16     	; 0x600 <fmod+0x70>
 610:	93 95       	inc	r25
 612:	0c 94 11 03 	jmp	0x622	; 0x622 <__fp_mpack>
 616:	86 95       	lsr	r24
 618:	77 95       	ror	r23
 61a:	67 95       	ror	r22
 61c:	9f 5f       	subi	r25, 0xFF	; 255
 61e:	d9 f7       	brne	.-10     	; 0x616 <fmod+0x86>
 620:	f7 cf       	rjmp	.-18     	; 0x610 <fmod+0x80>

00000622 <__fp_mpack>:
 622:	9f 3f       	cpi	r25, 0xFF	; 255
 624:	31 f0       	breq	.+12     	; 0x632 <__fp_mpack_finite+0xc>

00000626 <__fp_mpack_finite>:
 626:	91 50       	subi	r25, 0x01	; 1
 628:	20 f4       	brcc	.+8      	; 0x632 <__fp_mpack_finite+0xc>
 62a:	87 95       	ror	r24
 62c:	77 95       	ror	r23
 62e:	67 95       	ror	r22
 630:	b7 95       	ror	r27
 632:	88 0f       	add	r24, r24
 634:	91 1d       	adc	r25, r1
 636:	96 95       	lsr	r25
 638:	87 95       	ror	r24
 63a:	97 f9       	bld	r25, 7
 63c:	08 95       	ret

0000063e <__fp_nan>:
 63e:	9f ef       	ldi	r25, 0xFF	; 255
 640:	80 ec       	ldi	r24, 0xC0	; 192
 642:	08 95       	ret

00000644 <__fp_pscA>:
 644:	00 24       	eor	r0, r0
 646:	0a 94       	dec	r0
 648:	16 16       	cp	r1, r22
 64a:	17 06       	cpc	r1, r23
 64c:	18 06       	cpc	r1, r24
 64e:	09 06       	cpc	r0, r25
 650:	08 95       	ret

00000652 <__fp_pscB>:
 652:	00 24       	eor	r0, r0
 654:	0a 94       	dec	r0
 656:	12 16       	cp	r1, r18
 658:	13 06       	cpc	r1, r19
 65a:	14 06       	cpc	r1, r20
 65c:	05 06       	cpc	r0, r21
 65e:	08 95       	ret

00000660 <__fp_split3>:
 660:	57 fd       	sbrc	r21, 7
 662:	90 58       	subi	r25, 0x80	; 128
 664:	44 0f       	add	r20, r20
 666:	55 1f       	adc	r21, r21
 668:	59 f0       	breq	.+22     	; 0x680 <__fp_splitA+0x10>
 66a:	5f 3f       	cpi	r21, 0xFF	; 255
 66c:	71 f0       	breq	.+28     	; 0x68a <__fp_splitA+0x1a>
 66e:	47 95       	ror	r20

00000670 <__fp_splitA>:
 670:	88 0f       	add	r24, r24
 672:	97 fb       	bst	r25, 7
 674:	99 1f       	adc	r25, r25
 676:	61 f0       	breq	.+24     	; 0x690 <__fp_splitA+0x20>
 678:	9f 3f       	cpi	r25, 0xFF	; 255
 67a:	79 f0       	breq	.+30     	; 0x69a <__fp_splitA+0x2a>
 67c:	87 95       	ror	r24
 67e:	08 95       	ret
 680:	12 16       	cp	r1, r18
 682:	13 06       	cpc	r1, r19
 684:	14 06       	cpc	r1, r20
 686:	55 1f       	adc	r21, r21
 688:	f2 cf       	rjmp	.-28     	; 0x66e <__fp_split3+0xe>
 68a:	46 95       	lsr	r20
 68c:	f1 df       	rcall	.-30     	; 0x670 <__fp_splitA>
 68e:	08 c0       	rjmp	.+16     	; 0x6a0 <__fp_splitA+0x30>
 690:	16 16       	cp	r1, r22
 692:	17 06       	cpc	r1, r23
 694:	18 06       	cpc	r1, r24
 696:	99 1f       	adc	r25, r25
 698:	f1 cf       	rjmp	.-30     	; 0x67c <__fp_splitA+0xc>
 69a:	86 95       	lsr	r24
 69c:	71 05       	cpc	r23, r1
 69e:	61 05       	cpc	r22, r1
 6a0:	08 94       	sec
 6a2:	08 95       	ret

000006a4 <__fp_zero>:
 6a4:	e8 94       	clt

000006a6 <__fp_szero>:
 6a6:	bb 27       	eor	r27, r27
 6a8:	66 27       	eor	r22, r22
 6aa:	77 27       	eor	r23, r23
 6ac:	cb 01       	movw	r24, r22
 6ae:	97 f9       	bld	r25, 7
 6b0:	08 95       	ret

000006b2 <__mulsf3>:
 6b2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__mulsf3x>
 6b6:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_round>
 6ba:	0e 94 22 03 	call	0x644	; 0x644 <__fp_pscA>
 6be:	38 f0       	brcs	.+14     	; 0x6ce <__mulsf3+0x1c>
 6c0:	0e 94 29 03 	call	0x652	; 0x652 <__fp_pscB>
 6c4:	20 f0       	brcs	.+8      	; 0x6ce <__mulsf3+0x1c>
 6c6:	95 23       	and	r25, r21
 6c8:	11 f0       	breq	.+4      	; 0x6ce <__mulsf3+0x1c>
 6ca:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_inf>
 6ce:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_nan>
 6d2:	11 24       	eor	r1, r1
 6d4:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_szero>

000006d8 <__mulsf3x>:
 6d8:	0e 94 30 03 	call	0x660	; 0x660 <__fp_split3>
 6dc:	70 f3       	brcs	.-36     	; 0x6ba <__mulsf3+0x8>

000006de <__mulsf3_pse>:
 6de:	95 9f       	mul	r25, r21
 6e0:	c1 f3       	breq	.-16     	; 0x6d2 <__mulsf3+0x20>
 6e2:	95 0f       	add	r25, r21
 6e4:	50 e0       	ldi	r21, 0x00	; 0
 6e6:	55 1f       	adc	r21, r21
 6e8:	62 9f       	mul	r22, r18
 6ea:	f0 01       	movw	r30, r0
 6ec:	72 9f       	mul	r23, r18
 6ee:	bb 27       	eor	r27, r27
 6f0:	f0 0d       	add	r31, r0
 6f2:	b1 1d       	adc	r27, r1
 6f4:	63 9f       	mul	r22, r19
 6f6:	aa 27       	eor	r26, r26
 6f8:	f0 0d       	add	r31, r0
 6fa:	b1 1d       	adc	r27, r1
 6fc:	aa 1f       	adc	r26, r26
 6fe:	64 9f       	mul	r22, r20
 700:	66 27       	eor	r22, r22
 702:	b0 0d       	add	r27, r0
 704:	a1 1d       	adc	r26, r1
 706:	66 1f       	adc	r22, r22
 708:	82 9f       	mul	r24, r18
 70a:	22 27       	eor	r18, r18
 70c:	b0 0d       	add	r27, r0
 70e:	a1 1d       	adc	r26, r1
 710:	62 1f       	adc	r22, r18
 712:	73 9f       	mul	r23, r19
 714:	b0 0d       	add	r27, r0
 716:	a1 1d       	adc	r26, r1
 718:	62 1f       	adc	r22, r18
 71a:	83 9f       	mul	r24, r19
 71c:	a0 0d       	add	r26, r0
 71e:	61 1d       	adc	r22, r1
 720:	22 1f       	adc	r18, r18
 722:	74 9f       	mul	r23, r20
 724:	33 27       	eor	r19, r19
 726:	a0 0d       	add	r26, r0
 728:	61 1d       	adc	r22, r1
 72a:	23 1f       	adc	r18, r19
 72c:	84 9f       	mul	r24, r20
 72e:	60 0d       	add	r22, r0
 730:	21 1d       	adc	r18, r1
 732:	82 2f       	mov	r24, r18
 734:	76 2f       	mov	r23, r22
 736:	6a 2f       	mov	r22, r26
 738:	11 24       	eor	r1, r1
 73a:	9f 57       	subi	r25, 0x7F	; 127
 73c:	50 40       	sbci	r21, 0x00	; 0
 73e:	9a f0       	brmi	.+38     	; 0x766 <__mulsf3_pse+0x88>
 740:	f1 f0       	breq	.+60     	; 0x77e <__mulsf3_pse+0xa0>
 742:	88 23       	and	r24, r24
 744:	4a f0       	brmi	.+18     	; 0x758 <__mulsf3_pse+0x7a>
 746:	ee 0f       	add	r30, r30
 748:	ff 1f       	adc	r31, r31
 74a:	bb 1f       	adc	r27, r27
 74c:	66 1f       	adc	r22, r22
 74e:	77 1f       	adc	r23, r23
 750:	88 1f       	adc	r24, r24
 752:	91 50       	subi	r25, 0x01	; 1
 754:	50 40       	sbci	r21, 0x00	; 0
 756:	a9 f7       	brne	.-22     	; 0x742 <__mulsf3_pse+0x64>
 758:	9e 3f       	cpi	r25, 0xFE	; 254
 75a:	51 05       	cpc	r21, r1
 75c:	80 f0       	brcs	.+32     	; 0x77e <__mulsf3_pse+0xa0>
 75e:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_inf>
 762:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_szero>
 766:	5f 3f       	cpi	r21, 0xFF	; 255
 768:	e4 f3       	brlt	.-8      	; 0x762 <__mulsf3_pse+0x84>
 76a:	98 3e       	cpi	r25, 0xE8	; 232
 76c:	d4 f3       	brlt	.-12     	; 0x762 <__mulsf3_pse+0x84>
 76e:	86 95       	lsr	r24
 770:	77 95       	ror	r23
 772:	67 95       	ror	r22
 774:	b7 95       	ror	r27
 776:	f7 95       	ror	r31
 778:	e7 95       	ror	r30
 77a:	9f 5f       	subi	r25, 0xFF	; 255
 77c:	c1 f7       	brne	.-16     	; 0x76e <__mulsf3_pse+0x90>
 77e:	fe 2b       	or	r31, r30
 780:	88 0f       	add	r24, r24
 782:	91 1d       	adc	r25, r1
 784:	96 95       	lsr	r25
 786:	87 95       	ror	r24
 788:	97 f9       	bld	r25, 7
 78a:	08 95       	ret

0000078c <__fp_inf>:
 78c:	97 f9       	bld	r25, 7
 78e:	9f 67       	ori	r25, 0x7F	; 127
 790:	80 e8       	ldi	r24, 0x80	; 128
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	08 95       	ret

00000798 <__fp_round>:
 798:	09 2e       	mov	r0, r25
 79a:	03 94       	inc	r0
 79c:	00 0c       	add	r0, r0
 79e:	11 f4       	brne	.+4      	; 0x7a4 <__fp_round+0xc>
 7a0:	88 23       	and	r24, r24
 7a2:	52 f0       	brmi	.+20     	; 0x7b8 <__fp_round+0x20>
 7a4:	bb 0f       	add	r27, r27
 7a6:	40 f4       	brcc	.+16     	; 0x7b8 <__fp_round+0x20>
 7a8:	bf 2b       	or	r27, r31
 7aa:	11 f4       	brne	.+4      	; 0x7b0 <__fp_round+0x18>
 7ac:	60 ff       	sbrs	r22, 0
 7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <__fp_round+0x20>
 7b0:	6f 5f       	subi	r22, 0xFF	; 255
 7b2:	7f 4f       	sbci	r23, 0xFF	; 255
 7b4:	8f 4f       	sbci	r24, 0xFF	; 255
 7b6:	9f 4f       	sbci	r25, 0xFF	; 255
 7b8:	08 95       	ret

000007ba <malloc>:
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
 7be:	82 30       	cpi	r24, 0x02	; 2
 7c0:	91 05       	cpc	r25, r1
 7c2:	10 f4       	brcc	.+4      	; 0x7c8 <malloc+0xe>
 7c4:	82 e0       	ldi	r24, 0x02	; 2
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	e0 91 90 00 	lds	r30, 0x0090
 7cc:	f0 91 91 00 	lds	r31, 0x0091
 7d0:	20 e0       	ldi	r18, 0x00	; 0
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	c0 e0       	ldi	r28, 0x00	; 0
 7d6:	d0 e0       	ldi	r29, 0x00	; 0
 7d8:	30 97       	sbiw	r30, 0x00	; 0
 7da:	11 f1       	breq	.+68     	; 0x820 <malloc+0x66>
 7dc:	40 81       	ld	r20, Z
 7de:	51 81       	ldd	r21, Z+1	; 0x01
 7e0:	48 17       	cp	r20, r24
 7e2:	59 07       	cpc	r21, r25
 7e4:	c0 f0       	brcs	.+48     	; 0x816 <malloc+0x5c>
 7e6:	48 17       	cp	r20, r24
 7e8:	59 07       	cpc	r21, r25
 7ea:	61 f4       	brne	.+24     	; 0x804 <malloc+0x4a>
 7ec:	82 81       	ldd	r24, Z+2	; 0x02
 7ee:	93 81       	ldd	r25, Z+3	; 0x03
 7f0:	20 97       	sbiw	r28, 0x00	; 0
 7f2:	19 f0       	breq	.+6      	; 0x7fa <malloc+0x40>
 7f4:	9b 83       	std	Y+3, r25	; 0x03
 7f6:	8a 83       	std	Y+2, r24	; 0x02
 7f8:	2b c0       	rjmp	.+86     	; 0x850 <malloc+0x96>
 7fa:	90 93 91 00 	sts	0x0091, r25
 7fe:	80 93 90 00 	sts	0x0090, r24
 802:	26 c0       	rjmp	.+76     	; 0x850 <malloc+0x96>
 804:	21 15       	cp	r18, r1
 806:	31 05       	cpc	r19, r1
 808:	19 f0       	breq	.+6      	; 0x810 <malloc+0x56>
 80a:	42 17       	cp	r20, r18
 80c:	53 07       	cpc	r21, r19
 80e:	18 f4       	brcc	.+6      	; 0x816 <malloc+0x5c>
 810:	9a 01       	movw	r18, r20
 812:	be 01       	movw	r22, r28
 814:	df 01       	movw	r26, r30
 816:	ef 01       	movw	r28, r30
 818:	02 80       	ldd	r0, Z+2	; 0x02
 81a:	f3 81       	ldd	r31, Z+3	; 0x03
 81c:	e0 2d       	mov	r30, r0
 81e:	dc cf       	rjmp	.-72     	; 0x7d8 <malloc+0x1e>
 820:	21 15       	cp	r18, r1
 822:	31 05       	cpc	r19, r1
 824:	09 f1       	breq	.+66     	; 0x868 <__stack+0x9>
 826:	28 1b       	sub	r18, r24
 828:	39 0b       	sbc	r19, r25
 82a:	24 30       	cpi	r18, 0x04	; 4
 82c:	31 05       	cpc	r19, r1
 82e:	90 f4       	brcc	.+36     	; 0x854 <malloc+0x9a>
 830:	12 96       	adiw	r26, 0x02	; 2
 832:	8d 91       	ld	r24, X+
 834:	9c 91       	ld	r25, X
 836:	13 97       	sbiw	r26, 0x03	; 3
 838:	61 15       	cp	r22, r1
 83a:	71 05       	cpc	r23, r1
 83c:	21 f0       	breq	.+8      	; 0x846 <malloc+0x8c>
 83e:	fb 01       	movw	r30, r22
 840:	93 83       	std	Z+3, r25	; 0x03
 842:	82 83       	std	Z+2, r24	; 0x02
 844:	04 c0       	rjmp	.+8      	; 0x84e <malloc+0x94>
 846:	90 93 91 00 	sts	0x0091, r25
 84a:	80 93 90 00 	sts	0x0090, r24
 84e:	fd 01       	movw	r30, r26
 850:	32 96       	adiw	r30, 0x02	; 2
 852:	44 c0       	rjmp	.+136    	; 0x8dc <__stack+0x7d>
 854:	fd 01       	movw	r30, r26
 856:	e2 0f       	add	r30, r18
 858:	f3 1f       	adc	r31, r19
 85a:	81 93       	st	Z+, r24
 85c:	91 93       	st	Z+, r25
 85e:	22 50       	subi	r18, 0x02	; 2
 860:	31 09       	sbc	r19, r1
 862:	2d 93       	st	X+, r18
 864:	3c 93       	st	X, r19
 866:	3a c0       	rjmp	.+116    	; 0x8dc <__stack+0x7d>
 868:	20 91 8e 00 	lds	r18, 0x008E
 86c:	30 91 8f 00 	lds	r19, 0x008F
 870:	23 2b       	or	r18, r19
 872:	41 f4       	brne	.+16     	; 0x884 <__stack+0x25>
 874:	20 91 7a 00 	lds	r18, 0x007A
 878:	30 91 7b 00 	lds	r19, 0x007B
 87c:	30 93 8f 00 	sts	0x008F, r19
 880:	20 93 8e 00 	sts	0x008E, r18
 884:	20 91 78 00 	lds	r18, 0x0078
 888:	30 91 79 00 	lds	r19, 0x0079
 88c:	21 15       	cp	r18, r1
 88e:	31 05       	cpc	r19, r1
 890:	41 f4       	brne	.+16     	; 0x8a2 <__stack+0x43>
 892:	2d b7       	in	r18, 0x3d	; 61
 894:	3e b7       	in	r19, 0x3e	; 62
 896:	40 91 7c 00 	lds	r20, 0x007C
 89a:	50 91 7d 00 	lds	r21, 0x007D
 89e:	24 1b       	sub	r18, r20
 8a0:	35 0b       	sbc	r19, r21
 8a2:	e0 91 8e 00 	lds	r30, 0x008E
 8a6:	f0 91 8f 00 	lds	r31, 0x008F
 8aa:	e2 17       	cp	r30, r18
 8ac:	f3 07       	cpc	r31, r19
 8ae:	a0 f4       	brcc	.+40     	; 0x8d8 <__stack+0x79>
 8b0:	2e 1b       	sub	r18, r30
 8b2:	3f 0b       	sbc	r19, r31
 8b4:	28 17       	cp	r18, r24
 8b6:	39 07       	cpc	r19, r25
 8b8:	78 f0       	brcs	.+30     	; 0x8d8 <__stack+0x79>
 8ba:	ac 01       	movw	r20, r24
 8bc:	4e 5f       	subi	r20, 0xFE	; 254
 8be:	5f 4f       	sbci	r21, 0xFF	; 255
 8c0:	24 17       	cp	r18, r20
 8c2:	35 07       	cpc	r19, r21
 8c4:	48 f0       	brcs	.+18     	; 0x8d8 <__stack+0x79>
 8c6:	4e 0f       	add	r20, r30
 8c8:	5f 1f       	adc	r21, r31
 8ca:	50 93 8f 00 	sts	0x008F, r21
 8ce:	40 93 8e 00 	sts	0x008E, r20
 8d2:	81 93       	st	Z+, r24
 8d4:	91 93       	st	Z+, r25
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__stack+0x7d>
 8d8:	e0 e0       	ldi	r30, 0x00	; 0
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	cf 01       	movw	r24, r30
 8de:	df 91       	pop	r29
 8e0:	cf 91       	pop	r28
 8e2:	08 95       	ret

000008e4 <free>:
 8e4:	0f 93       	push	r16
 8e6:	1f 93       	push	r17
 8e8:	cf 93       	push	r28
 8ea:	df 93       	push	r29
 8ec:	00 97       	sbiw	r24, 0x00	; 0
 8ee:	09 f4       	brne	.+2      	; 0x8f2 <free+0xe>
 8f0:	8c c0       	rjmp	.+280    	; 0xa0a <free+0x126>
 8f2:	fc 01       	movw	r30, r24
 8f4:	32 97       	sbiw	r30, 0x02	; 2
 8f6:	13 82       	std	Z+3, r1	; 0x03
 8f8:	12 82       	std	Z+2, r1	; 0x02
 8fa:	00 91 90 00 	lds	r16, 0x0090
 8fe:	10 91 91 00 	lds	r17, 0x0091
 902:	01 15       	cp	r16, r1
 904:	11 05       	cpc	r17, r1
 906:	81 f4       	brne	.+32     	; 0x928 <free+0x44>
 908:	20 81       	ld	r18, Z
 90a:	31 81       	ldd	r19, Z+1	; 0x01
 90c:	82 0f       	add	r24, r18
 90e:	93 1f       	adc	r25, r19
 910:	20 91 8e 00 	lds	r18, 0x008E
 914:	30 91 8f 00 	lds	r19, 0x008F
 918:	28 17       	cp	r18, r24
 91a:	39 07       	cpc	r19, r25
 91c:	79 f5       	brne	.+94     	; 0x97c <free+0x98>
 91e:	f0 93 8f 00 	sts	0x008F, r31
 922:	e0 93 8e 00 	sts	0x008E, r30
 926:	71 c0       	rjmp	.+226    	; 0xa0a <free+0x126>
 928:	d8 01       	movw	r26, r16
 92a:	40 e0       	ldi	r20, 0x00	; 0
 92c:	50 e0       	ldi	r21, 0x00	; 0
 92e:	ae 17       	cp	r26, r30
 930:	bf 07       	cpc	r27, r31
 932:	50 f4       	brcc	.+20     	; 0x948 <free+0x64>
 934:	12 96       	adiw	r26, 0x02	; 2
 936:	2d 91       	ld	r18, X+
 938:	3c 91       	ld	r19, X
 93a:	13 97       	sbiw	r26, 0x03	; 3
 93c:	ad 01       	movw	r20, r26
 93e:	21 15       	cp	r18, r1
 940:	31 05       	cpc	r19, r1
 942:	09 f1       	breq	.+66     	; 0x986 <free+0xa2>
 944:	d9 01       	movw	r26, r18
 946:	f3 cf       	rjmp	.-26     	; 0x92e <free+0x4a>
 948:	9d 01       	movw	r18, r26
 94a:	da 01       	movw	r26, r20
 94c:	33 83       	std	Z+3, r19	; 0x03
 94e:	22 83       	std	Z+2, r18	; 0x02
 950:	60 81       	ld	r22, Z
 952:	71 81       	ldd	r23, Z+1	; 0x01
 954:	86 0f       	add	r24, r22
 956:	97 1f       	adc	r25, r23
 958:	82 17       	cp	r24, r18
 95a:	93 07       	cpc	r25, r19
 95c:	69 f4       	brne	.+26     	; 0x978 <free+0x94>
 95e:	ec 01       	movw	r28, r24
 960:	28 81       	ld	r18, Y
 962:	39 81       	ldd	r19, Y+1	; 0x01
 964:	26 0f       	add	r18, r22
 966:	37 1f       	adc	r19, r23
 968:	2e 5f       	subi	r18, 0xFE	; 254
 96a:	3f 4f       	sbci	r19, 0xFF	; 255
 96c:	31 83       	std	Z+1, r19	; 0x01
 96e:	20 83       	st	Z, r18
 970:	8a 81       	ldd	r24, Y+2	; 0x02
 972:	9b 81       	ldd	r25, Y+3	; 0x03
 974:	93 83       	std	Z+3, r25	; 0x03
 976:	82 83       	std	Z+2, r24	; 0x02
 978:	45 2b       	or	r20, r21
 97a:	29 f4       	brne	.+10     	; 0x986 <free+0xa2>
 97c:	f0 93 91 00 	sts	0x0091, r31
 980:	e0 93 90 00 	sts	0x0090, r30
 984:	42 c0       	rjmp	.+132    	; 0xa0a <free+0x126>
 986:	13 96       	adiw	r26, 0x03	; 3
 988:	fc 93       	st	X, r31
 98a:	ee 93       	st	-X, r30
 98c:	12 97       	sbiw	r26, 0x02	; 2
 98e:	ed 01       	movw	r28, r26
 990:	49 91       	ld	r20, Y+
 992:	59 91       	ld	r21, Y+
 994:	9e 01       	movw	r18, r28
 996:	24 0f       	add	r18, r20
 998:	35 1f       	adc	r19, r21
 99a:	e2 17       	cp	r30, r18
 99c:	f3 07       	cpc	r31, r19
 99e:	71 f4       	brne	.+28     	; 0x9bc <free+0xd8>
 9a0:	80 81       	ld	r24, Z
 9a2:	91 81       	ldd	r25, Z+1	; 0x01
 9a4:	84 0f       	add	r24, r20
 9a6:	95 1f       	adc	r25, r21
 9a8:	02 96       	adiw	r24, 0x02	; 2
 9aa:	11 96       	adiw	r26, 0x01	; 1
 9ac:	9c 93       	st	X, r25
 9ae:	8e 93       	st	-X, r24
 9b0:	82 81       	ldd	r24, Z+2	; 0x02
 9b2:	93 81       	ldd	r25, Z+3	; 0x03
 9b4:	13 96       	adiw	r26, 0x03	; 3
 9b6:	9c 93       	st	X, r25
 9b8:	8e 93       	st	-X, r24
 9ba:	12 97       	sbiw	r26, 0x02	; 2
 9bc:	e0 e0       	ldi	r30, 0x00	; 0
 9be:	f0 e0       	ldi	r31, 0x00	; 0
 9c0:	d8 01       	movw	r26, r16
 9c2:	12 96       	adiw	r26, 0x02	; 2
 9c4:	8d 91       	ld	r24, X+
 9c6:	9c 91       	ld	r25, X
 9c8:	13 97       	sbiw	r26, 0x03	; 3
 9ca:	00 97       	sbiw	r24, 0x00	; 0
 9cc:	19 f0       	breq	.+6      	; 0x9d4 <free+0xf0>
 9ce:	f8 01       	movw	r30, r16
 9d0:	8c 01       	movw	r16, r24
 9d2:	f6 cf       	rjmp	.-20     	; 0x9c0 <free+0xdc>
 9d4:	8d 91       	ld	r24, X+
 9d6:	9c 91       	ld	r25, X
 9d8:	98 01       	movw	r18, r16
 9da:	2e 5f       	subi	r18, 0xFE	; 254
 9dc:	3f 4f       	sbci	r19, 0xFF	; 255
 9de:	82 0f       	add	r24, r18
 9e0:	93 1f       	adc	r25, r19
 9e2:	20 91 8e 00 	lds	r18, 0x008E
 9e6:	30 91 8f 00 	lds	r19, 0x008F
 9ea:	28 17       	cp	r18, r24
 9ec:	39 07       	cpc	r19, r25
 9ee:	69 f4       	brne	.+26     	; 0xa0a <free+0x126>
 9f0:	30 97       	sbiw	r30, 0x00	; 0
 9f2:	29 f4       	brne	.+10     	; 0x9fe <free+0x11a>
 9f4:	10 92 91 00 	sts	0x0091, r1
 9f8:	10 92 90 00 	sts	0x0090, r1
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <free+0x11e>
 9fe:	13 82       	std	Z+3, r1	; 0x03
 a00:	12 82       	std	Z+2, r1	; 0x02
 a02:	10 93 8f 00 	sts	0x008F, r17
 a06:	00 93 8e 00 	sts	0x008E, r16
 a0a:	df 91       	pop	r29
 a0c:	cf 91       	pop	r28
 a0e:	1f 91       	pop	r17
 a10:	0f 91       	pop	r16
 a12:	08 95       	ret

00000a14 <_exit>:
 a14:	f8 94       	cli

00000a16 <__stop_program>:
 a16:	ff cf       	rjmp	.-2      	; 0xa16 <__stop_program>
